I"²<!-- excerpt-end -->
<ul>
  <li><a href="#q-value-iter">Q-value iteration</a></li>
  <li><a href="#nn-q-learning">Neural networks with Q-learning</a></li>
  <li><a href="#references">References</a></li>
  <li><a href="#footnotes">Footnotes</a></li>
</ul>

<h2 id="q-value-iter">Q-value iteration</h2>
<p>Recall that in the post <a href="/2021/06/27/mdp-bellman-eqn.html">Markov Decision Processes, Bellman equations</a>, we have defined the <strong>state-value fuction</strong> for a policy $\pi$ as
\begin{equation}
V_\pi(s)=\sum_{a}\pi(a\vert s)\sum_{sâ€™}P(sâ€™\vert s,a)\left(R(s,a,sâ€™)+\gamma V_\pi(sâ€™)\right)
\end{equation}
which measures how good the state $s$ is.</p>

<p>From the definition of $V_\pi(s)$, we have continued to define the Bellman equation for the optimal value at state $s$, denoted $V^*(s)$:
\begin{equation}
V^*(s)=\max_{a}\sum_{sâ€™}P(sâ€™\vert s,a)\left(R(s,a,sâ€™)+\gamma V^*(sâ€™)\right),
\end{equation}
which characterizes the optimal value of state $s$ in terms of the optimal values of successor state $sâ€™$.</p>

<p>Then, with <a href="/2021/07/25/dp-in-mdp.html">Dynamic programming</a></p>

<h2 id="nn-q-learning">Neural networks with Q-learning</h2>
<p>Recall that</p>

<h2 id="references">References</h2>
<p>[1] Vlad Mnih, et al. <a href="https://www.cs.toronto.edu/~vmnih/docs/dqn.pdf">Playing Atari with Deep Reinforcement Learning</a>, 2013.</p>

<p>[2] Vlad Mnih, et al. <a href="https://www.deepmind.com/publications/human-level-control-through-deep-reinforcement-learning">Human Level Control Through Deep Reinforcement Learning</a>. Nature, 2015.</p>

<p>[3] Hado van Hasselt. <a href="https://proceedings.neurips.cc/paper/2010/file/091d584fced301b442654dd8c23b3fc9-Paper.pdf">Double Q-learning</a>. NIPS 2010.</p>

<p>[4] Hado van Hasselt, Arthur Guez, David Silver. <a href="https://arxiv.org/abs/1509.06461">Deep Reinforcement Learning with Double Q-learning</a>. AAAI16, 2016.</p>

<h2 id="footnotes">Footnotes</h2>
:ET