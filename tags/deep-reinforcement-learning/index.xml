<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Deep-Reinforcement-Learning on Littleroot</title>
    <link>https://trunghng.github.io/tags/deep-reinforcement-learning/</link>
    <description>Recent content in Deep-Reinforcement-Learning on Littleroot</description>
    <image>
      <title>Littleroot</title>
      <url>https://trunghng.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://trunghng.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 22 Sep 2024 17:54:43 +0700</lastBuildDate><atom:link href="https://trunghng.github.io/tags/deep-reinforcement-learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Model-based RL with world models</title>
      <link>https://trunghng.github.io/posts/reinforcement-learning/mbrl-lvm/</link>
      <pubDate>Sun, 22 Sep 2024 17:54:43 +0700</pubDate>
      
      <guid>https://trunghng.github.io/posts/reinforcement-learning/mbrl-lvm/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Model-based RL methods that learn latent-variable models instead of trying to predict dynamics models in the observed space.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>MuZero</title>
      <link>https://trunghng.github.io/posts/reinforcement-learning/muzero/</link>
      <pubDate>Tue, 02 Jan 2024 11:52:40 +0700</pubDate>
      
      <guid>https://trunghng.github.io/posts/reinforcement-learning/muzero/</guid>
      <description>&lt;h2 id=&#34;muzero&#34;&gt;MuZero&lt;/h2&gt;
&lt;p&gt;Predictions are made at each time step $t$, for each of $k=0,\ldots,K$ steps, by a model $\mu_\theta$, parameterized by $\theta$, conditioned on past observations $o_1,\ldots,o_t$ and on future actions $a_{t+1},\ldots,a_{t+k}$ for $k&amp;gt;0$.&lt;br&gt;
The model $\mu_\theta$ predicts three future quantities that are directly relevant for planning:&lt;/p&gt;
&lt;ul class=&#39;number-list&#39;&gt;
	&lt;li&gt;
		the policy $p_t^k\approx\pi(a_{t+k+1}\vert o_1,\ldots,o_t,a_{t+1},\ldots,a_{t+k})$;
	&lt;/li&gt;
	&lt;li&gt;
		the value function $v_t^k\approx\mathbb{E}\big[u_{t+k+1}+\gamma u_{t+k+2}+\ldots\vert o_1,\ldots,o_t,a_{t+1},\ldots,a_{t+k}\big]$;
	&lt;/li&gt;
	&lt;li&gt;
		the immediate reward $r_t^k\approx u_{t+k}$,
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;where $u$ is the true, observed reward, $\pi$ is the policy used to select real actions and $\gamma$ is the discount function of the environment.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AlphaZero</title>
      <link>https://trunghng.github.io/posts/reinforcement-learning/alphazero/</link>
      <pubDate>Tue, 17 Oct 2023 10:23:22 +0700</pubDate>
      
      <guid>https://trunghng.github.io/posts/reinforcement-learning/alphazero/</guid>
      <description>&lt;!-- for Milu --&gt;
&lt;h2 id=&#34;alphago&#34;&gt;AlphaGo&lt;/h2&gt;
&lt;p&gt;The training pipeline used in &lt;strong&gt;AlphaGo&lt;/strong&gt; can be divided into following stages:&lt;/p&gt;
&lt;ul class=&#39;number-list&#39;&gt;
	&lt;li&gt;
		Using a dataset of human experts positions, a &lt;b&gt;supervised learning (SL) policy network&lt;/b&gt; $p_\sigma$ and, a &lt;b&gt;rollout policy&lt;/b&gt; $p_\pi$, which can sample actions rapidly, are trained by classification to predict player moves.
	&lt;/li&gt;
	&lt;li&gt;
		Initializing with the &lt;b&gt;SL policy network&lt;/b&gt; $p_\sigma$, it uses policy gradient to train a &lt;b&gt;reinforcement learning (RL) policy network&lt;/b&gt; $p_\rho$ with the goal to maximize the winning outcome against previous versions of the policy network. This process generates a dataset of self-play games.
	&lt;/li&gt;
	&lt;li&gt;
		Via the dataset of self-play moves, a &lt;b&gt;value network&lt;/b&gt; $v_\theta$ is trained by regression to predict the expected outcome (win or lose).
	&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
	&lt;img src=&#34;https://trunghng.github.io/images/alphazero/alphago-training-pipeline.png&#34; alt=&#34;AlphaGo training pipeline&#34; width=&#34;80%&#34; height=&#34;80%&#34;/&gt;
	&lt;figcaption style=&#34;text-align: center&#34;&gt;&lt;b&gt;Figure 1&lt;/b&gt;: (taken from &lt;a href=&#39;#alphago-paper&#39;&gt;AlphaGo paper&lt;/a&gt;) &lt;b&gt;AlphaGo neural network training pipeline&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;sl-policy-network-p_sigma-rollout-network-p_pi&#34;&gt;SL policy network $p_\sigma$, rollout network $p_\pi$&lt;/h3&gt;
&lt;p&gt;The policy network $p_\sigma(a\vert s)$ takes as its input a simple representation of the board state $s$ and outputs a probability distribution over all legal moves $a$. The network is trained to maximize the likelihood of the human move $a$ selected in state $s$ by using SGA
\begin{equation}
\Delta\sigma\propto\frac{\partial\log p_\sigma(a\vert s)}{\partial\sigma}
\end{equation}
The rollout network $p_\pi(a\vert s)$ is trained using a linear softmax of small pattern features. This network is less accurate but faster selecting action than $p_\sigma$.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Multi-agent Deep Deterministic Policy Gradient</title>
      <link>https://trunghng.github.io/posts/reinforcement-learning/maddpg/</link>
      <pubDate>Thu, 25 May 2023 15:25:54 +0700</pubDate>
      
      <guid>https://trunghng.github.io/posts/reinforcement-learning/maddpg/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Notes on MADDPG.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Maximum Entropy Reinforcement Learning via Soft Q-learning &amp; Soft Actor-Critic</title>
      <link>https://trunghng.github.io/posts/reinforcement-learning/maxent-sql-sac/</link>
      <pubDate>Tue, 27 Dec 2022 13:46:09 +0700</pubDate>
      
      <guid>https://trunghng.github.io/posts/reinforcement-learning/maxent-sql-sac/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Notes on Entropy-Regularized Reinforcement Learning via SQL &amp;amp; SAC&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Trust Region Policy Optimization</title>
      <link>https://trunghng.github.io/posts/reinforcement-learning/trpo/</link>
      <pubDate>Wed, 23 Nov 2022 15:26:00 +0700</pubDate>
      
      <guid>https://trunghng.github.io/posts/reinforcement-learning/trpo/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Notes on policy optimization using trust region method.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Deep Q-learning</title>
      <link>https://trunghng.github.io/posts/reinforcement-learning/deep-q-learning/</link>
      <pubDate>Fri, 18 Nov 2022 15:26:00 +0700</pubDate>
      
      <guid>https://trunghng.github.io/posts/reinforcement-learning/deep-q-learning/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Notes on DQN and its variants.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Policy Gradient</title>
      <link>https://trunghng.github.io/posts/reinforcement-learning/policy-gradient/</link>
      <pubDate>Thu, 06 Oct 2022 15:26:00 +0700</pubDate>
      
      <guid>https://trunghng.github.io/posts/reinforcement-learning/policy-gradient/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Notes on Policy gradient methods.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
