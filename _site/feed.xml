<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-08-04T17:49:50+07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Trung’s cabin</title><subtitle>To document something I&apos;ve learned
</subtitle><author><name>Trung H. Nguyen</name><email>trung.skipper@gmail.com</email></author><entry><title type="html">Function Approximation</title><link href="http://localhost:4000/artificial-intelligent/reinforcement-learning/2022/07/10/func-approx.html" rel="alternate" type="text/html" title="Function Approximation" /><published>2022-07-10T15:26:00+07:00</published><updated>2022-07-10T15:26:00+07:00</updated><id>http://localhost:4000/artificial-intelligent/reinforcement-learning/2022/07/10/func-approx</id><content type="html" xml:base="http://localhost:4000/artificial-intelligent/reinforcement-learning/2022/07/10/func-approx.html">&lt;blockquote&gt;
  &lt;p&gt;Reinforcement Learning in continuous state space requires function approximation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- excerpt-end --&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#on-policy-methods&quot;&gt;On-policy Methods&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#value-func-approx&quot;&gt;Value-function Approximation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pred-obj&quot;&gt;The Prediction Objective&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#grad-algs&quot;&gt;Gradient-based algorithms&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#stochastic-grad&quot;&gt;Stochastic-gradient&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#on-policy-semi-grad&quot;&gt;Semi-gradient&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#lin-func-approx&quot;&gt;Linear Function Approximation&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#lin-methods&quot;&gt;Linear Methods&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#feature-cons&quot;&gt;Feature Construction&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#polynomial&quot;&gt;Polynomial Basis&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#fourier&quot;&gt;Fourier Basis&lt;/a&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#uni-fourier-series&quot;&gt;The Univariate Fourier Series&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#even-odd-non-periodic-func&quot;&gt;Even, Odd and Non-Periodic Functions&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#mult-fourier-series&quot;&gt;The Multivariate Fourier Series&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#coarse-coding&quot;&gt;Coarse Coding&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#tile-coding&quot;&gt;Tile Coding&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#rbf&quot;&gt;Radial Basis Functions&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#lstd&quot;&gt;Least-Squares TD&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ep-semi-grad-control&quot;&gt;Episodic Semi-gradient Control&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#semi-grad-n-step-sarsa&quot;&gt;Semi-gradient n-step Sarsa&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#off-policy-methods&quot;&gt;Off-policy Methods&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#off-policy-semi-grad&quot;&gt;Semi-gradient&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#grad-td&quot;&gt;Gradient-TD&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#em-td&quot;&gt;Emphatic-TD&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#footnotes&quot;&gt;Footnotes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;on-policy-methods&quot;&gt;On-policy Methods&lt;/h2&gt;
&lt;p&gt;So far in the series, we have gone through tabular methods, which are used to solve problems with small state and action spaces. For larger spaces, rather than getting the exact solutions, we now have to approximate the value of them. To start, we begin with on-policy approximation methods.&lt;/p&gt;

&lt;h3 id=&quot;value-func-approx&quot;&gt;Value-function Approximation&lt;/h3&gt;
&lt;p&gt;All of the prediction methods so far have been described as updates to an estimated value function that shift its value at particular states toward a “backed-up value” (or &lt;em&gt;update target&lt;/em&gt;) for that state
\begin{equation}
s\mapsto u,
\end{equation}
where $s$ is the state updated and $u$ is the update target that $s$’s estimated value is shifted toward.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the MC update for value prediction is: $S_t\mapsto G_t$.&lt;/li&gt;
  &lt;li&gt;the TD(0) update for value prediction is: $S_t\mapsto R_{t+1}+\gamma\hat{v}(S_{t+1},\mathbf{w}_t)$.&lt;/li&gt;
  &lt;li&gt;the $n$-step TD update is: $S_t\mapsto G_{t:t+n}$.&lt;/li&gt;
  &lt;li&gt;and in the DP, policy-evaluation update, $s\mapsto\mathbb{E}\big[R_{t+1}+\gamma\hat{v}(S_{t+1},\mathbf{w}_t)\vert S_t=s\big]$, an arbitrary $s$ is updated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each update $s\mapsto u$ can be viewed as example of the desired input-output behavior of the value function. And when the outputs are numbers, like $u$, we call the process &lt;strong&gt;function approximation&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;pred-obj&quot;&gt;The Prediction Objective&lt;/h3&gt;
&lt;p&gt;In contrast to tabular case, where the solution of value function could be found equal to the true value function exactly, and an update at one state did not affect the others, with function approximation, it is impossible to find the exact value function of all states. And moreover, an update at one state also affects many others.&lt;/p&gt;

&lt;p&gt;Hence, it is necessary to specify a state distribution $\mu(s)\geq0,\sum_s\mu(s)=1$, representing how much we care about the error (the difference between the approximate value $\hat{v}(s,\mathbf{w})$ and the true value $v_\pi(s)$) in each state $s$. Weighting this over the state space $\mathcal{S}$ by $\mu$, we obtain a natural objective function, called the &lt;em&gt;Mean Squared Value Error&lt;/em&gt;, denoted as $\overline{\text{VE}}$:
\begin{equation}
\overline{\text{VE}}(\mathbf{w})\doteq\sum_{s\in\mathcal{S}}\mu(s)\Big[v_\pi(s)-\hat{v}(s,\mathbf{w})\Big]^2
\end{equation}
The distribution $\mu(s)$ is usually chosen as the fraction of time spent in $s$ (number of time $s$ visited divided by total amount of visits). Under on-policy training this is called the &lt;em&gt;on-policy distribution&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In continuing tasks, the on-policy distribution is the stationary distribution under $\pi$.&lt;/li&gt;
  &lt;li&gt;In episodic tasks, the on-policy distribution depends on how the initial states are chosen.
    &lt;ul&gt;
      &lt;li&gt;Let $h(s)$ denote the probability that an episode begins in each state $s$, and let $\eta(s)$ denote the number of time steps spent, on average, in state $s$ in a single episode
  \begin{equation}
  \eta(s)=h(s)+\sum_\bar{s}\eta(\bar{s})\sum_a\pi(a\vert\bar{s})p(s\vert\bar{s},a),\hspace{1cm}\forall s\in\mathcal{S}
  \end{equation}
  This system of equation can be solved for the expected number of visits $\eta(s)$. The on-policy distribution is then
  \begin{equation}
  \mu(s)=\frac{\eta(s)}{\sum_{s’}\eta(s’)},\hspace{1cm}\forall s\in\mathcal{S}
  \end{equation}&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;grad-algs&quot;&gt;Gradient-based algorithms&lt;/h3&gt;
&lt;p&gt;To solve the least squares problem, we are going to use a popular method, named &lt;strong&gt;Gradient descent&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Say, consider a differentiable function $J(\mathbf{w})$ of parameter vector $\mathbf{w}$.&lt;/p&gt;

&lt;p&gt;The gradient of $J(\mathbf{w})$ w.r.t $\mathbf{w}$ is defined to be
\begin{equation}
\nabla_{\mathbf{w}}J(\mathbf{w})=\left(\begin{smallmatrix}\dfrac{\partial J(\mathbf{w})}{\partial\mathbf{w}_1} \\ \vdots \\ \dfrac{\partial J(\mathbf{w})}{\partial\mathbf{w}_d}\end{smallmatrix}\right)
\end{equation}
The idea of Gradient descent is to minimize the objective function $J(\mathbf{w})$, we repeatedly move $\mathbf{w}$ in the direction of steepest decrease of $J$, which is the direction of negative gradient $-\nabla_\mathbf{w}J(\mathbf{w})$.&lt;/p&gt;

&lt;p&gt;Thus, we have the update rule of Gradient descent:
\begin{equation}
\mathbf{w}\leftarrow\mathbf{w}-\dfrac{1}{2}\alpha\nabla_\mathbf{w}J(\mathbf{w}),
\end{equation}
where $\alpha$ is a positive step-size parameter.&lt;/p&gt;

&lt;h4 id=&quot;stochastic-grad&quot;&gt;Stochastic-gradient&lt;/h4&gt;
&lt;p&gt;Apply gradient descent to our problem, which is we have to find the minimization of
\begin{equation}
\overline{\text{VE}}(\mathbf{w})=\sum_{s\in\mathcal{S}}\mu(s)\Big[v_\pi(s)-\hat{v}(s,\mathbf{w})\Big]^2
\end{equation}
Since $\mu(s)$ is the state distribution over state space $\mathcal{S}$, we can rewrite $\overline{\text{VE}}$ as
\begin{equation}
\overline{\text{VE}}(\mathbf{w})=\mathbb{E}_{s\sim\mu}\Big[v_\pi(s)-\hat{v}(s,\mathbf{w})\Big]^2
\end{equation}
By the update we have defined earlier, in each step, we need to decrease $\mathbf{w}$ by an amount of
\begin{equation}
\Delta\mathbf{w}=-\dfrac{1}{2}\alpha\nabla_\mathbf{w}\overline{\text{VE}}(\mathbf{w})=\alpha\mathbb{E}\Big[v_\pi(s)-\hat{v}(s,\mathbf{w})\Big]\nabla_\mathbf{w}\hat{v}(s,\mathbf{w})
\end{equation}
Using &lt;strong&gt;Stochastic Gradient descent (SGD)&lt;/strong&gt;, and since the Monte Carlo target $G_t$ by definition is an unbiased estimate of $v_\pi(S_t)$ , we sample the gradient:
\begin{equation}
\Delta\mathbf{w}=\alpha(G_t-\hat{v}(S_t,\mathbf{w}))\nabla_\mathbf{w}\hat{v}(S_t,\mathbf{w})
\end{equation}
which gives us pseudocode of the algorithm:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-07-10/sgd_mc.png&quot; alt=&quot;SGD Monte Carlo&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; /&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;on-policy-semi-grad&quot;&gt;Semi-gradient&lt;/h4&gt;
&lt;p&gt;If instead of using MC target $G_t$, we use the bootstrapping targets such as $n$-step return $G_{t:t+n}$ or the DP target $\sum_{a,s’,r}\pi(a\vert S_t)p(s’,r\vert S_t,a)\left[r+\gamma\hat{v}(s’,\mathbf{w}_t)\right]$, which all depend on the current value of the weight vector $\mathbf{w}_t$, and then implies that they will be biased, and will not produce a true gradient-descent method.&lt;/p&gt;

&lt;p&gt;Such methods are called &lt;strong&gt;semi-gradient&lt;/strong&gt; since they include only a part of the gradient.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-07-10/semi_gd.png&quot; alt=&quot;Semi-gradient TD(0)&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; /&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;lin-func-approx&quot;&gt;Linear Function Approximation&lt;/h3&gt;
&lt;p&gt;One of the most crucial special cases of function approximation is that in which the approximate function, $\hat{v}(\cdot,\mathbf{w})$, is a linear function of the weight vector, $\mathbf{w}$.&lt;/p&gt;

&lt;p&gt;Corresponding to every state $s$, there is a real-valued vector $\mathbf{x}(s)\doteq\left(x_1(s),x_2(s),\dots,x_d(s)\right)^\intercal$, with the same number of components with $\mathbf{w}$.&lt;/p&gt;

&lt;h4 id=&quot;lin-methods&quot;&gt;Linear Methods&lt;/h4&gt;
&lt;p&gt;Linear methods approximate value function by the inner product between $\mathbf{w}$ and $\mathbf{x}(s)$:
\begin{equation}
\hat{v}(s,\mathbf{w})\doteq\mathbf{w}^\intercal\mathbf{x}(s)=\sum_{i=1}^{d}w_ix_i(s)\tag{1}\label{1}
\end{equation}
The vector $\mathbf{x}(s)$ is called a &lt;em&gt;feature vector&lt;/em&gt; representing state $s$, i.e., $x_i:\mathcal{S}\to\mathbb{R}$.&lt;/p&gt;

&lt;p&gt;For linear methods, features are &lt;em&gt;basis functions&lt;/em&gt; because they form a linear basis for the set of approximate functions. Constructing $d$-dimensional feature vectors to represent states is the same as selecting a set of $d$ basis functions.&lt;/p&gt;

&lt;p&gt;From \eqref{1}, when using SGD updates with linear approximation, we have the gradient of the approximate value function w.r.t $\mathbf{w}$ is
\begin{equation}
\nabla_\mathbf{w}\hat{v}(s,\mathbf{w})=\mathbf{x}(s)
\end{equation}
Thus, with linear approximation, the SGD update can be rewrite as
\begin{equation}
\mathbf{w}_{t+1}\doteq\mathbf{w}_t+\alpha\left[G_t-\hat{v}(S_t,\mathbf{w}_t)\right]\mathbf{x}(S_t)
\end{equation}&lt;/p&gt;

&lt;p&gt;In the linear case, there is only one optimum, and thus any method that is guaranteed to converge to or near a local optimum is automatically guaranteed to converge to or near the global optimum.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The gradient MC algorithm in the previous section converges to the global optimum of the $\overline{\text{VE}}$ under linear function approximation if $\alpha$ is reduced over time according to the usual conditions.&lt;/li&gt;
  &lt;li&gt;The semi-gradient TD algorithm also converges under linear approximation.
    &lt;ul&gt;
      &lt;li&gt;Recall that, at each time $t$, the semi-gradient TD update is
  \begin{align}
  \mathbf{w}_{t+1}&amp;amp;\doteq\mathbf{w}_t+\alpha\left(R_{t+1}+\gamma\mathbf{w}_t^\intercal\mathbf{x}_{t+1}-\mathbf{w}_t^\intercal\mathbf{x}_t\right)\mathbf{x}_t \\ &amp;amp;=\mathbf{w}_t+\alpha\left(R_{t+1}\mathbf{x}_t-\mathbf{x}_t(\mathbf{x}_t-\gamma\mathbf{x}_{t+1})^\intercal\mathbf{w}_t\right),
  \end{align}
  where $\mathbf{x}_t=\mathbf{x}(S_t)$. Once the system has reached steady state, for any given $\mathbf{w}_t$, the expected next weight vector can be written as
  \begin{equation}
  \mathbb{E}\left[\mathbf{w}_{t+1}\vert\mathbf{w}_t\right]=\mathbf{w}_t+\alpha\left(\mathbf{b}-\mathbf{A}\mathbf{w}_t\right),\tag{2}\label{2}
  \end{equation}
  where
  \begin{align}
  \mathbf{b}&amp;amp;\doteq\mathbb{E}\left[R_{t+1}\mathbf{x}_t\right]\in\mathbb{R}^d, \\ \mathbf{A}&amp;amp;\doteq\mathbb{E}\left[\mathbf{x}_t\left(\mathbf{x}_t-\gamma\mathbf{x}_{t+1}\right)^\intercal\right]\in\mathbb{R}^d\times\mathbb{R}^d\tag{3}\label{3}
  \end{align}
  From \eqref{2}, it is easily seen that if the system converges, it must converges to the weight vector $\mathbf{w}_{\text{TD}}$ at which
  \begin{align}
  \mathbf{b}-\mathbf{A}\mathbf{w}_{\text{TD}}&amp;amp;=\mathbf{0} \\ \mathbf{w}_{\text{TD}}&amp;amp;=\mathbf{A}^{-1}\mathbf{b}
  \end{align}
  This quantity, $\mathbf{w}_{\text{TD}}$, is called the &lt;strong&gt;TD fixed point&lt;/strong&gt;. And in fact, linear semi-gradient TD(0) converges to this point.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Proof&lt;/strong&gt;:&lt;br /&gt;
  We have \eqref{2} can be written as
  \begin{equation}
  \mathbb{E}\left[\mathbf{w}_{t+1}\vert\mathbf{w}_t\right]=\left(\mathbf{I}-\alpha\mathbf{A}\right)\mathbf{w}_t+\alpha\mathbf{b}
  \end{equation}
  The idea of the proof is prove that the matrix $\mathbf{A}$ in \eqref{3} is a positive definite matrix&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, since $\mathbf{w}_t$ will be reduced toward zero whenever $\mathbf{A}$ is positive definite.&lt;br /&gt;
  For linear TD(0), in the continuing case with $\gamma&amp;lt;1$, the matrix $\mathbf{A}$ can be written as
  \begin{align}
  \mathbf{A}&amp;amp;=\sum_s\mu(s)\sum_a\pi(a\vert s)\sum_{r,s’}p(r,s’\vert s,a)\mathbf{x}(s)\big(\mathbf{x}(s)-\gamma\mathbf{x}(s’)\big)^\intercal \\ &amp;amp;=\sum_s\mu(s)\sum_{s’}p(s’\vert s)\mathbf{x}(s)\big(\mathbf{x}(s)-\gamma\mathbf{x}(s’)\big)^\intercal \\ &amp;amp;=\sum_s\mu(s)\mathbf{x}(s)\Big(\mathbf{x}(s)-\gamma\sum_{s’}p(s’\vert s)\mathbf{x}(s’)\Big)^\intercal \\ &amp;amp;=\mathbf{X}^\intercal\mathbf{D}(\mathbf{I}-\gamma\mathbf{P})\mathbf{X},\tag{4}\label{4}
  \end{align}
  where
        &lt;ul&gt;
          &lt;li&gt;$\mu(s)$ is the stationary distribution under $\pi$;&lt;/li&gt;
          &lt;li&gt;$p(s’\vert s)$ is the probability transition from $s$ to $s’$ under policy $\pi$;&lt;/li&gt;
          &lt;li&gt;$\mathbf{P}$ is the $\vert\mathcal{S}\vert\times\vert\mathcal{S}\vert$ matrix of these probabilities;&lt;/li&gt;
          &lt;li&gt;$\mathbf{D}$ is the $\vert\mathcal{S}\vert\times\vert\mathcal{S}\vert$ diagonal matrix with the $\mu(s)$ on its diagonal;&lt;/li&gt;
          &lt;li&gt;$\mathbf{X}$ is the $\vert\mathcal{S}\vert\times d$ matrix with $\mathbf{x}(s)$ as its row.&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;Hence, it is clear that the positive definiteness of $A$ depends on the matrix $\mathbf{D}(\mathbf{I}-\gamma\mathbf{P})$ in \eqref{4}.&lt;/p&gt;

        &lt;p&gt;To continue proving the positive definiteness of $\mathbf{A}$, we use two lemmas:&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Lemma 1&lt;/strong&gt;: &lt;em&gt;A square matrix $\mathbf{A}$ is positive definite if $\mathbf{A}+\mathbf{A}^\intercal$&lt;/em&gt; is positive definite.&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Lemma 2&lt;/strong&gt;: &lt;em&gt;If $\mathbf{A}$ is a real, symmetric, and strictly diagonally dominant matrix with positive diagonal entries, then $\mathbf{A}$ is positive definite&lt;/em&gt;.&lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;With these lemmas, plus since $\mathbf{D}(\mathbf{I}-\gamma\mathbf{P})$ has positive diagonal entries and negative off-diagonal entries, so all we have to show is that each row sum plus the corresponding column sum is positive. The row sums are all positive because $\mathbf{P}$ is a stochastic matrix and $\gamma&amp;lt;1$. Thus the problem remains to show that the column sums are nonnegative.&lt;/p&gt;

        &lt;p&gt;Let $\mathbf{1}$ denote the column vector with all components equal to $1$ and $\boldsymbol{\mu}(s)$ denote the vectorized version of $\mu(s)$: i.e., $\boldsymbol{\mu}\in\mathbb{R}^{\vert\mathcal{S}\vert}$. Thus, $\boldsymbol{\mu}=\mathbf{P}^\intercal\boldsymbol{\mu}$ since $\mu(s)$ is the stationary distribution. We have:
  \begin{align}
  \mathbf{1}^\intercal\mathbf{D}\left(\mathbf{I}-\gamma\mathbf{P}\right)&amp;amp;=\boldsymbol{\mu}^\intercal\left(\mathbf{I}-\gamma\mathbf{P}\right) \\ &amp;amp;=\boldsymbol{\mu}^\intercal-\gamma\boldsymbol{\mu}^\intercal\mathbf{P} \\ &amp;amp;=\boldsymbol{\mu}^\intercal-\gamma\boldsymbol{\mu}^\intercal \\ &amp;amp;=\left(1-\gamma\right)\boldsymbol{\mu}^\intercal,
  \end{align}
  which implies that the column sums of $\mathbf{D}(\mathbf{I}-\gamma\mathbf{P})$ are positive.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;At the TD fixed point, it has also been proven (in the continuing case) that $\overline{\text{VE}}$ is within a bounded expansion of the lowest possible error
  \begin{equation}
  \overline{\text{VE}}(\mathbf{w}_{\text{TD}})\leq\dfrac{1}{1-\gamma}\min_{\mathbf{w}}\overline{\text{VE}}(\mathbf{w})
  \end{equation}&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;feature-cons&quot;&gt;Feature Construction&lt;/h4&gt;
&lt;p&gt;There are various ways to define features. The simplest way is to use each variable directly as a basis function along with a constant function, i.e., setting:
\begin{equation}
x_0(s)=1;\hspace{1cm}x_i(s)=s_i,0\leq i\leq d
\end{equation}
However, most interesting value functions are too complex to be represented in this way. This scheme therefore was generalized into the polynomial basis.&lt;/p&gt;

&lt;h5 id=&quot;polynomial&quot;&gt;Polynomial Basis&lt;/h5&gt;
&lt;p&gt;Suppose each state $s$ corresponds to $d$ numbers, $s_1,s_2\dots,s_d$, with each $s_i\in\mathbb{R}$. For this $d$-dimensional state space, each order-$n$ polynomial basis feature $x_i$ can be written as
\begin{equation}
x_i(s)=\prod_{j=1}^{d}s_j^{c_{i,j}},
\end{equation}
where each $c_{i,j}\in\{0,1,\dots,n\}$ for an integer $n\geq 0$. These features make up the order-$n$ polynomial basis for dimension $d$, which contains $(n+1)^d$ different features.&lt;/p&gt;

&lt;h5 id=&quot;fourier&quot;&gt;Fourier Basis&lt;/h5&gt;

&lt;h6 id=&quot;uni-fourier-series&quot;&gt;The Univariate Fourier Series&lt;/h6&gt;
&lt;p&gt;&lt;strong&gt;Fourier series&lt;/strong&gt; is applied widely in Mathematics to approximate a periodic function&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. For example:&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-07-10/fourier_series.gif&quot; alt=&quot;Fourier series visualization&quot; width=&quot;480&quot; height=&quot;360px&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; /&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 1&lt;/b&gt;: Four partial sums (Fourier series) of lengths 1, 2, 3, and 4 terms, showing how the approximation to a square wave improves as the number of terms increases: where $f_1(\theta)=\frac{4\sin\theta}{\pi},f_2(\theta)=\frac{4\sin 3\theta}{3\pi},f_3(\theta)=\frac{4\sin 5\theta}{5\pi}$ and $f_4(\theta)=\frac{4\sin 7\theta}{7\pi}$. The code can be found &lt;span&gt;&lt;a href=&quot;https://github.com/trunghng/maths-visualization/blob/main/fourier-series/fourier_series.py&quot;&gt;here&lt;/a&gt;&lt;/span&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;
In particular, the $n$-degree Fourier expansion of $f$ with period $\tau$ is
\begin{equation}
\bar{f}(x)=\dfrac{a_0}{2}+\sum_{k=1}^{n}\left[a_k\cos\left(k\frac{2\pi}{\tau}x\right)+b_k\left(k\frac{2\pi}{\tau}x\right)\right],
\end{equation}
where
\begin{align}
a_k&amp;amp;=\frac{2}{\tau}\int_{0}^{\tau}f(x)\cos\left(\frac{2\pi kx}{\tau}\right)\,dx, \\ b_k&amp;amp;=\frac{2}{\tau}\int_{0}^{\tau}f(x)\sin\left(\frac{2\pi kx}{\tau}\right)\,dx
\end{align}
In the RL setting, $f$ is unknown so we cannot compute $a_0,\dots,a_n$ and $b_1,\dots,b_n$, but we can instead treat them as parameters in a linear function approximation scheme, with
\begin{equation}
\phi_i(x)=\begin{cases}1 &amp;amp;\text{if }i=0 \\ \cos\left(\frac{(i+1)\pi x}{\tau}\right) &amp;amp;\text{if }i&amp;gt;0,i\text{ odd} \\ \sin\left(\frac{i\pi x}{\tau}\right) &amp;amp;\text{if }i&amp;gt;0,i\text{ even}\end{cases}
\end{equation}
Thus, a full $n$-th order Fourier approximation to a one-dimensional value function results in a linear function approximation with $2n+1$ terms.&lt;/p&gt;

&lt;h6 id=&quot;even-odd-non-periodic-func&quot;&gt;Even, Odd and Non-Periodic Functions&lt;/h6&gt;
&lt;p&gt;If $f$ is known to be &lt;em&gt;even&lt;/em&gt; (i.e., $f(x)=f(-x)$), then $\forall i&amp;gt;0$, we have:
\begin{align}
b_i&amp;amp;=\frac{2}{\tau}\int_{0}^{\tau}f(x)\sin\left(\frac{2\pi ix}{\tau}\right)\,dx \\ &amp;amp;=\frac{2}{\tau}\left[\int_{0}^{\tau/2}f(x)\sin\left(\frac{2\pi ix}{\tau}\right)\,dx+\int_{\tau/2}^{\tau}f(x)\sin\left(\frac{2\pi ix}{\tau}\right)\,dx\right] \\ &amp;amp;=\frac{2}{\tau}\left[\int_{0}^{\tau/2}f(x)\sin\left(\frac{2\pi ix}{\tau}\right)\,dx+\int_{\tau/2}^{\tau}f(x-\tau)\sin\left(\frac{2\pi ix}{\tau}-2\pi i\right)\,dx\right] \\ &amp;amp;=\frac{2}{\tau}\left[\int_{0}^{\tau/2}f(x)\sin\left(\frac{2\pi ix}{\tau}\right)\,dx+\int_{\tau/2}^{\tau}f(x-\tau)\sin\left(\frac{2\pi i(x-\tau)}{\tau}\right)\,dx\right] \\ &amp;amp;=\frac{2}{\tau}\left[\int_{0}^{\tau/2}f(x)\sin\left(\frac{2\pi ix}{\tau}\right)\,dx+\int_{-\tau/2}^{0}f(x)\sin\left(\frac{2\pi ix}{\tau}\right)\,dx\right] \\ &amp;amp;=0,
\end{align}
so the $\sin$ terms can be dropped, which reduces the terms required for an $n$-th order Fourier approximation to $n+1$.&lt;/p&gt;

&lt;p&gt;Similarly, if $f$ is known to be &lt;em&gt;odd&lt;/em&gt; (i.e., $f(x)=-f(-x)$), then $\forall i&amp;gt;0, a_i=0$, so we can omit the $\cos$ terms.&lt;/p&gt;

&lt;p&gt;However, in general, value functions are not even, odd, or periodic (or known to be in advance). In such cases, if $f$ is defined over a bounded interval with length, let us assume, $\tau$, or without loss of generality, $\left[-\frac{\tau}{2},\frac{\tau}{2}\right]$, but only project the input variable to $\left[0,\frac{\tau}{2}\right]$. This results in a function periodic on $\left[-\frac{\tau}{2},\frac{\tau}{2}\right]$, but unconstrained on $\left(0,\frac{\tau}{2}\right]$. We are now free to choose whether or not the function is even or odd over $\left[-\frac{\tau}{2},\frac{\tau}{2}\right]$, and can drop half of the terms in the approximation.&lt;/p&gt;

&lt;p&gt;In general, we expect it will be better to use the “half-even” approximation and drop the $\sin$ terms because this causes only a slight discontinuity at the origin. Thus, we can define the univariate $n$-th order Fourier basis as:
\begin{equation}
x_i(s)=\cos(i\pi s),
\end{equation}
for $i=0,\dots,n$.&lt;/p&gt;

&lt;h6 id=&quot;mult-fourier-series&quot;&gt;The Multivariate Fourier Series&lt;/h6&gt;
&lt;p&gt;The $n$-order Fourier expansion of the multivariate function $F$ with period $\tau$ in $d$ dimensions is
\begin{equation}
\overline{F}(\mathbf{x})=\sum_\mathbf{c}\left[a_\mathbf{c}\cos\left(\frac{2\pi}{\tau}\mathbf{c}\cdot\mathbf{x}\right)+b_\mathbf{c}\sin\left(\frac{2\pi}{\tau}\mathbf{c}\cdot\mathbf{x}\right)\right],
\end{equation}
where $\mathbf{c}=(c_1,\dots,c_d)^\intercal,c_i\in\left[0,\dots,n\right],1\leq i\leq d$.&lt;/p&gt;

&lt;p&gt;This results in $2(n+1)^d$ basis functions for an $n$-th order full Fourier approximation to a value function in $d$ dimensions, which can be reduced to $(n+1)^d$ if we drop either the $sin$ or $cos$ terms for each variable as described above. Thus, we can define the $n$-th order Fourier basis in the multi-dimensional case as:&lt;/p&gt;

&lt;p&gt;Suppose each state $s$ corresponds to a vector of $d$ numbers, $\mathbf{s}=(s_1,\dots,s_d)^\intercal$, with each $s_i\in[0,1]$. The $i$-th feature in the order-$n$ Fourier cosine basis can then be written as:
\begin{equation}
x_i(s)=\cos\left(\pi\mathbf{s}^\intercal\mathbf{c}^i\right),
\end{equation}
where $\mathbf{c}=(c_1^i,\dots,c_d^i)^\intercal$, with $c_j^i\in\{0,\dots,n\}$ for $j=1,\dots,d$ and $i=0,\dots,(n+1)^d$.&lt;/p&gt;

&lt;p&gt;This defines a feature for each of the $(n+1)^d$ possible integer vector $\mathbf{c}^i$. The inner product $\mathbf{s}^\intercal\mathbf{c}^i$ has the effect of assigning an integer in $\{0,\dots,n\}$ to each dimension of $\mathbf{s}$. As in the one-dimensional case, this integer determines the feature’s frequency along that dimension. The feature thus can be shifted and scaled to suit the bounded state space of a particular application.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-07-10/gradient_mc_bases.png&quot; alt=&quot;Fourier basis vs polynomial basis&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; /&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 2&lt;/b&gt;: Fourier basis vs Polynomial basis on the 1000-state random walk&lt;br /&gt;&lt;span&gt;(Eg9.2 - RL: An Introduction book).&lt;/span&gt;&lt;br /&gt;The code can be found &lt;span&gt;&lt;a href=&quot;https://github.com/trunghng/reinforcement-learning-an-introduction-imp/blob/main/chapter-9/random_walk.py&quot;&gt;here&lt;/a&gt;&lt;/span&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;coarse-coding&quot;&gt;Coarse Coding&lt;/h5&gt;

&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-07-10/square_wave_function.png&quot; alt=&quot;Square wave function approximated using Coarse Coding&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; /&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 3&lt;/b&gt;: Using linear function approximation based on coarse coding on learning a one-dimensional square-wave function &lt;br /&gt;&lt;span&gt;(Eg9.3 - RL: An Introduction book).&lt;/span&gt;&lt;br /&gt; The code can be found &lt;span&gt;&lt;a href=&quot;https://github.com/trunghng/reinforcement-learning-an-introduction-imp/blob/main/chapter-9/square_wave.py&quot;&gt;here&lt;/a&gt;&lt;/span&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;tile-coding&quot;&gt;Tile Coding&lt;/h5&gt;

&lt;h5 id=&quot;rbf&quot;&gt;Radial Basis Functions&lt;/h5&gt;
&lt;p&gt;Another common scheme is &lt;strong&gt;Radial Basis Functions (RBFs)&lt;/strong&gt;. RBFs are the natural generalization of coarse coding to continuous valued features. Rather than each feature taking either $0$ or $1$, it can be anything within $[0,1]$, reflecting various degrees to which the feature is present.&lt;/p&gt;

&lt;p&gt;A typical RBF feature, $x_i$, has a Gaussian response $x_i(s)$ dependent only on the distance between the state, $s$, and the feature’s prototypical or center state, $c_i$, and relative to the feature’s width, $\sigma_i$:
\begin{equation}
x_i(s)\doteq\exp\left(\frac{\Vert s-c_i\Vert^2}{2\sigma_i^2}\right)
\end{equation}
The figures below shows a one-dimensional example with a Euclidean distance metric.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-07-10/1_d_rbf.png&quot; alt=&quot;one-dimensional RBFs&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 300px; height: 100px&quot; /&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 4&lt;/b&gt;: One-dimensional RBFs&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;lstd&quot;&gt;Least-Squares TD&lt;/h3&gt;
&lt;p&gt;Recall when using TD(0) with linear function approximation, $v_\mathbf{w}(s)=\mathbf{w}^\intercal\mathbf{x}(s)$, we need to find a point $\mathbf{w}$ such that
\begin{equation}
\mathbb{E}\Big[\big(R_{t+1}+\gamma v_\mathbf{w}(S_{t+1})-v_{\mathbf{w}}(S_t)\big)\mathbf{x}_t\Big]=\mathbf{0}\tag{5}\label{5}
\end{equation}
or
\begin{equation}
\mathbb{E}\Big[R_{t+1}\mathbf{x}_t-\mathbf{x}_t(\mathbf{x}_t-\gamma\mathbf{x}_{t+1})^\intercal\mathbf{w}_t\Big]=\mathbf{0}
\end{equation}
We found out that the solution is:
\begin{equation}
\mathbf{w}_{\text{TD}}=\mathbf{A}^{-1}\mathbf{b},
\end{equation}
where
\begin{align}
\mathbf{A}&amp;amp;\doteq\mathbb{E}\left[\mathbf{x}_t\left(\mathbf{x}_t-\gamma\mathbf{x}_{t+1}\right)^\intercal\right], \\ \mathbf{b}&amp;amp;\doteq\mathbb{E}\left[R_{t+1}\mathbf{x}_t\right]
\end{align}
Instead of computing these expectations over all possible states and all possible transitions that could happen, we now only care about the things that did happen. In particular, we now consider the empirical loss of \eqref{5}, as:
\begin{equation}
\frac{1}{t}\sum_{k=0}^{t-1}\big(R_{k+1}+\gamma v_\mathbf{w}(S_{k+1})-v_{\mathbf{w}}(S_k)\big)\mathbf{x}_i=\mathbf{0}\tag{6}\label{6}
\end{equation}
By the law of large numbers&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, when $t\to\infty$, \eqref{6} converges to its expectation, which is \eqref{5}. Hence, we now just have to compute the estimate of $\mathbf{w}_{\text{TD}}$, called $\mathbf{w}_{\text{LSTD}}$ (as LSTD stands for &lt;strong&gt;Least-Squares TD&lt;/strong&gt;), which is defined as:
\begin{equation}
\mathbf{w}_{\text{LSTD}}\doteq\left(\sum_{k=0}^{t-1}\mathbf{x}_i\left(\mathbf{x}_k-\gamma\mathbf{x}_{k+1}\right)^\intercal\right)^{-1}\left(\sum_{k=1}^{t-1}R_{k+1}\mathbf{x}_k\right)\tag{7}\label{7}
\end{equation}
In other words, our work is to compute estimates $\widehat{\mathbf{A}}_t$ and $\widehat{\mathbf{b}}_t$ of $\mathbf{A}$ and $\mathbf{b}$:
\begin{align}
\widehat{\mathbf{A}}_t&amp;amp;\doteq\sum_{k=0}^{t-1}\mathbf{x}_k\left(\mathbf{x}_k-\gamma\mathbf{x}_{k+1}\right)^\intercal+\varepsilon\mathbf{I};\tag{8}\label{8} \\ \widehat{\mathbf{b}}_t&amp;amp;\doteq\sum_{k=0}^{t-1}R_{k+1}\mathbf{x}_k,\tag{9}\label{9}
\end{align}
where $\mathbf{I}$ is the identity matrix, and $\varepsilon\mathbf{I}$, for some small $\varepsilon&amp;gt;0$, ensures that $\widehat{\mathbf{A}}_t$ is always invertible. Thus, \eqref{7} can be rewritten as:
\begin{equation}
\mathbf{w}_{\text{LSTD}}\doteq\widehat{\mathbf{A}}_t^{-1}\widehat{\mathbf{b}}_t
\end{equation}
The two approximations in \eqref{8} and \eqref{9} could be implemented incrementally using the same &lt;a href=&quot;/artificial-intelligent/reinforcement-learning/2021/08/21/monte-carlo-in-rl.html#incremental-method&quot;&gt;technique&lt;/a&gt; we used to apply earlier so that they can be done in constant time per step. Even so, the update for $\widehat{\mathbf{A}}_t$ would have the computational complexity of $O(d^2)$, and so is its memory required to hold the $\widehat{\mathbf{A}}_t$ matrix.&lt;/p&gt;

&lt;p&gt;This leads to a problem that our next step, which is the computation of the inverse $\widehat{\mathbf{A}}_t^{-1}$ of $\widehat{\mathbf{A}}_t$, is going to be $O(d^3)$. Fortunately, with the so-called &lt;strong&gt;Sherman-Morrison formula&lt;/strong&gt;, an inverse of our special form matrix - a sum of outer products - can also be updated incrementally with only $O(d^2)$ computations, as
\begin{align}
\widehat{\mathbf{A}}_t^{-1}&amp;amp;=\left(\widehat{\mathbf{A}}_t+\mathbf{x}_t\left(\mathbf{x}_t-\gamma\mathbf{x}_{t+1}\right)^\intercal\right)^{-1} \\ &amp;amp;=\widehat{\mathbf{A}}_{t-1}^{-1}-\frac{\widehat{\mathbf{A}}_{t-1}^{-1}\mathbf{x}_t\left(\mathbf{x}_t-\gamma\mathbf{x}_{t+1}\right)^\intercal\widehat{\mathbf{A}}_{t-1}^{-1}}{1+\left(\mathbf{x}_t-\gamma\mathbf{x}_{t+1}\right)^\intercal\widehat{\mathbf{A}}_{t-1}^{-1}\mathbf{x}_t},
\end{align}
for $t&amp;gt;0$, with $\mathbf{\widehat{A}}_0\doteq\varepsilon\mathbf{I}$. The pseudocode for LSTD is given below&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-07-10/lstd.png&quot; alt=&quot;LSTD&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; /&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;ep-semi-grad-control&quot;&gt;Episodic Semi-gradient Control&lt;/h3&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;p&gt;[1] Richard S. Sutton &amp;amp; Andrew G. Barto. &lt;a href=&quot;https://mitpress.mit.edu/books/reinforcement-learning-second-edition&quot;&gt;Reinforcement Learning: An Introduction&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2] Deepmind x UCL. &lt;a href=&quot;https://www.deepmind.com/learning-resources/reinforcement-learning-lecture-series-2021&quot;&gt;Reinforcement Learning Lecture Series 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[3] Sutton, R. S. (1988). &lt;a href=&quot;doi:10.1007/bf00115009&quot;&gt;Learning to predict by the methods of temporal differences&lt;/a&gt;. Machine Learning, 3(1), 9–44.&lt;/p&gt;

&lt;p&gt;[4] Konidaris, G. &amp;amp; Osentoski, S. &amp;amp; Thomas, P.. &lt;a href=&quot;https://dl.acm.org/doi/10.5555/2900423.2900483&quot;&gt;Value Function Approximation in Reinforcement Learning Using the Fourier Basis&lt;/a&gt;. AAAI Conference on Artificial Intelligence, North America, aug. 2011.&lt;/p&gt;

&lt;p&gt;[5] Shangtong Zhang. &lt;a href=&quot;https://github.com/ShangtongZhang/reinforcement-learning-an-introduction&quot;&gt;Reinforcement Learning: An Introduction implementation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;A $n\times n$ matrix $A$ is called &lt;em&gt;positive definite&lt;/em&gt; if and only if for any non-zero vector $\mathbf{x}\in\mathbb{R}^n$, we always have
\begin{equation}
\mathbf{x}^\intercal\mathbf{A}\mathbf{x}&amp;gt;0
\end{equation} &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;A function $f$ is periodic with period $\tau$ if
\begin{equation}
f(x+\tau)=f(x),\forall x
\end{equation} &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;

      &lt;p&gt;&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Trung H. Nguyen</name><email>trung.skipper@gmail.com</email></author><category term="artificial-intelligent" /><category term="reinforcement-learning" /><category term="artificial-intelligent" /><category term="reinforcement-learning" /><category term="function-approximation" /><summary type="html">Reinforcement Learning in continuous state space requires function approximation.</summary></entry><entry><title type="html">Temporal-Difference Learning</title><link href="http://localhost:4000/artificial-intelligent/reinforcement-learning/2022/04/08/td-learning.html" rel="alternate" type="text/html" title="Temporal-Difference Learning" /><published>2022-04-08T16:55:00+07:00</published><updated>2022-04-08T16:55:00+07:00</updated><id>http://localhost:4000/artificial-intelligent/reinforcement-learning/2022/04/08/td-learning</id><content type="html" xml:base="http://localhost:4000/artificial-intelligent/reinforcement-learning/2022/04/08/td-learning.html">&gt; So far in this [series](/tag/my-rl), we have gone through the ideas of [**dynamic programming** (DP)]({% post_url 2021-07-25-dp-in-mdp %}) and [**Monte Carlo**]({% post_url 2021-08-21-monte-carlo-in-rl %}). What will happen if we combine these ideas together? **Temporal-difference (TD) learning** is our answer.

&lt;!-- excerpt-end --&gt;
- [TD(0)](#td0)
	- [TD Prediction](#td-prediction)
		- [Advantages over MC &amp; DP](#adv-over-mc-dp)
		- [Optimality of TD(0)](#opt-td0)
	- [TD Control](#td-control)
		- [Sarsa](#sarsa)
		- [Q-learning](#q-learning)
			- [Example: Cliffwalking - Sarsa vs Q-learning](#eg-cliffwalking)
		- [Expected Sarsa](#exp-sarsa)
		- [Double Q-learning](#double-q-learning)
			- [Maximization Bias](#max-bias)
			- [A Solution](#sol)
- [$n$-step TD](#n-step-td)
	- [$n$-step TD Prediction](#n-step-td-prediction)
		- [Example: Random Walk](#eg-random-walk)
	- [$n$-step TD Control](#n-step-td-control)
		- [$n$-step Sarsa](#n-step-sarsa)
	- [Off-policy n-step TD](#off-policy-n-step-td)
		- [$n$-step TD with Importance Sampling](#n-step-td-is)
		- [$n$-step Tree Backup](#n-step-tree-backup)
		- [$n$-step $Q(\\sigma)$](#n-step-q-sigma)
- [References](#references)
- [Footnotes](#footnotes)

## TD(0)
{: #td0}
As usual, we approach this new method by considering the prediction problem.

### TD Prediction
Borrowing the idea of Monte Carlo, TD methods learn from episodes of experience to solve the [prediction problem]({% post_url 2021-08-21-monte-carlo-in-rl %}#fn:2). The simplest TD method is **TD(0)** (or **one-step TD**)[^1], which has the update form:
\begin{equation}
V(S_t)\leftarrow V(S_t)+\alpha\left[R_{t+1}+\gamma V(S_{t+1})-V(S_t)\right]\tag{1}\label{1},
\end{equation}
where $\alpha&gt;0$ is step size of the update. Here is pseudocode of the TD(0) method
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-04-08/td0.png&quot; alt=&quot;TD(0)&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
Recall that in [Monte Carlo method]({% post_url 2021-08-21-monte-carlo-in-rl %}#mc-prediction), or even in its trivial form, **constant-$\alpha$ MC**, which has the update form:
\begin{equation}
V(S_t)\leftarrow V(S_t)+\alpha\left[G_t-V(S_t)\right]\tag{2}\label{2},
\end{equation}
we have to wait until the end of the episode, when the return $G_t$ is determined. However, with TD(0), we can do the update immediately in the next time step $t+1$.  

As we can see in \eqref{1} and \eqref{2}, both TD and MC updates look ahead to a sample successor state (or state-action pair), use the value of the successor and the corresponding reward in order to update the value of the current state (or state-action pair). This kind of updates is called *sample update*, which differs from *expected update* used by DP methods in that they are based on a single sample successor rather than on a complete distribution of all possible successors.

Other than the sampling of Monte Carlo, TD methods also use the bootstrapping of DP. Because similar to [DP]({% post_url 2021-07-25-dp-in-mdp %}#policy-evaluation), TD(0) is also a bootstrapping method, since the target in its update is $R_{t+1}+\gamma V(S_{t+1})$.  

The quantity inside bracket in \eqref{1} is called *TD error*, denoted as $\delta$:
\begin{equation}
\delta_t\doteq R_{t+1}+\gamma V(S_{t+1})-V(S_t)
\end{equation}
If the array $V$ does not change during the episode (as in MC), then the MC error can be written as a sum of TD errors
\begin{align}
G_t-V(S_t)&amp;=R_{t+1}+\gamma G_{t+1}-V(S_t)+\gamma V(S_{t+1})-\gamma V(S_{t+1}) \\\\ &amp;=\delta_t+\gamma\left(G_{t+1}-V(S_{t+1})\right) \\\\ &amp;=\delta_t+\gamma\delta_{t+1}+\gamma^2\left(G_{t+2}-V(S_{t+2})\right) \\\\ &amp;=\delta_t+\gamma\delta_{t+1}+\gamma^2\delta_{t+2}+\dots+\gamma^{T-t-1}\delta_{T-1}+\gamma^{T-t}\left(G_T-V(S_T)\right) \\\\ &amp;=\delta_t+\gamma\delta_{t+1}+\gamma^2\delta_{t+2}+\dots+\gamma^{T-t-1}\delta_{T-1}+\gamma^{T-t}(0-0) \\\\ &amp;=\sum_{k=t}^{T-1}\gamma^{k-t}\delta_k
\end{align}

#### Advantages over MC &amp; DP
{: #adv-over-mc-dp}
With how TD is established, these are some advantages of its over MC and DP:
- Only experience is required.
- Can be fully incremental:
	- Can make update before knowing the final outcome.
	- Requires less memory.
	- Requires less peak computation.  


TD(0) does converge to $v_\pi$, in the mean for a sufficient small $\alpha$, and with probability of $1$ if $\alpha$ decreases according to the *stochastic approximation condition*
\begin{equation}
\sum_{n=1}^{\infty}\alpha_n(a)=\infty\hspace{1cm}\text{and}\hspace{1cm}\sum_{n=1}^{\infty}\alpha_n^2(a)&lt;\infty,
\end{equation}
where $\alpha_n(a)$ denote the step-size parameter used to process the reward received after the $n$-th selection of action $a$.  

#### Optimality of TD(0)
{: #opt-td0}
Under batch training, TD(0) converges to the optimal maximum likelihood estimate. The convergence and optimality proofs can be found in this [paper](#td-convergence).
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-04-08/random_walk_batch_updating.png&quot; alt=&quot;TD(0) vs constant-alpha MC&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 1&lt;/b&gt;: Performance of TD(0) and constant-$\alpha$ MC under batch training on the random walk task. The code can be found &lt;span markdown=&quot;1&quot;&gt;[here](https://github.com/trunghng/reinforcement-learning-an-introduction-imp/blob/main/chapter-6/random-walk.py)&lt;/span&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

### TD Control
We begin solving the control problem with an on-policy TD method. Recall that in on-policy methods, we evaluate or improve the policy $\pi$ used to make decision.

#### Sarsa
As mentioned in [MC methods]({% post_url 2021-08-21-monte-carlo-in-rl %}#mc-est-action-value), when the model is not available, we have to learn an action-value function rather than a state-value function. Or in other words, we need to estimate $q_\pi(s,a)$ for the current policy $\pi$ and $\forall s,a$. Thus, instead of considering transitions from state to state in order to learn the value of states, we now take transitions from state-action pair to state-action pair into account so as to learn the value of state-action pairs.  

Similarly, we&apos;ve got the TD update for the action-value function case:
\begin{equation}
Q(S_t,A_t)\leftarrow Q(S_t,A_t)+\alpha\left[R_{t+1}+\gamma Q(S_{t+1},A_{t+1})-Q(S_t,A_t)\right]\tag{3}\label{3}
\end{equation}
This update is done after every transition from a non-terminal state $S_t$ to its successor $S_{t+1}$
\begin{equation}
\left(S_t,A_t,R_{t+1},S_{t+1},A_{t+1}\right)
\end{equation}
And if $S_{t+1}$ is terminal (i.e., $S_{t+1}=S_T$), then $Q(S_{t+1},A_{t+1})=0$. The name **Sarsa** of the method is taken based on acronym of the quintuple.  

As usual when working on on-policy control problem, we apply the idea of [GPI]({% post_url 2021-07-25-dp-in-mdp %}#gpi):
\begin{equation}
\pi_0\overset{\small \text{E}}{\rightarrow}q_{\pi_0}\overset{\small \text{I}}{\rightarrow}\pi_1\overset{\small \text{E}}{\rightarrow}q_{\pi_1}\overset{\small \text{I}}{\rightarrow}\pi_2\overset{\small \text{E}}{\rightarrow}\dots\overset{\small \text{I}}{\rightarrow}\pi_\*\overset{\small \text{E}}{\rightarrow}q_\*
\end{equation}
However this time, instead, we use it with TD methods. Which is, we continually estimate $q_\pi$ for the behavior policy $\pi$, and at the same time change $\pi$ toward greediness w.r.t $q_\pi$. That gives us the following pseudocode of the Sarsa control algorithm
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-04-08/sarsa.png&quot; alt=&quot;Sarsa&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

#### Q-learning
{: #q-learning}
We now turn our move to an off-policy method, which evaluates or improves a policy different from that used to generate the data.  
The method we are talking about is called **Q-learning**, which was first introduced by [Watkins](#q-learning-watkins), in which the update on $Q$-value has the form:
\begin{equation}
Q(S_t,A_t)\leftarrow Q(S_t,A_t)+\alpha\left[R_{t+1}+\gamma\max_a Q(S_{t+1},a)-Q(S_t,A_t)\right]\tag{4}\label{4}
\end{equation}
In this case, the learned action-value function, $Q$, directly approximates optimal action-value function $q_*$, independent of the policy being followed. Down below is pseudocode of the Q-learning.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-04-08/q-learning.png&quot; alt=&quot;Q-learning&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

##### Example: Cliffwalking - Sarsa vs Q-learning
{: #eg-cliffwalking}
(This example is taken from *Example 6.6, Reinforcement Learning: An Introduction book*.)
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-04-08/cliff-walking-eg.png&quot; alt=&quot;Cliff Walking example&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 500px&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
Say that we have an agent in a gridworld, which is an undiscounted, episodic task described by the above image. Start and goal states are denoted as &quot;S&quot; and &quot;G&quot; respectively. Agent can take up, down, left or right action. All the actions lead to a reward of $-1$, except for cliff region, into which stepping gives a reward of $-100$. We will be solving this problem with Q-learning and Sarsa with $\varepsilon$-greedy action selection, for $\varepsilon=0.1$.

**Solution code**  
The source code can be found [here](https://github.com/trunghng/reinforcement-learning-an-introduction-imp/blob/main/chapter-6/cliff_walking.py).  

&lt;button type=&quot;button&quot; class=&quot;collapsible&quot; id=&quot;codeP1&quot;&gt;Click to show the code&lt;/button&gt;
&lt;div class=&quot;codePanel&quot; id=&quot;codeP1data&quot; markdown=&quot;1&quot;&gt;
&lt;br&gt;
We begin by importing necessary packages we will be using

```python
import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm
```
Our first step is to define the environment, gridworld with a cliff, which is constructed by height, width, cliff region, start state, goal state, actions and rewards.
```python
class GridWorld:

    def __init__(self, height, width, start_state, goal_state, cliff):
        &apos;&apos;&apos;
        Initialization function

        Params
        ------
        height: int
            gridworld&apos;s height
        width: int
            gridworld&apos;s width
        start_state: [int, int]
            gridworld&apos;s start state
        goal_state: [int, int]
            gridworld&apos;s goal state
        cliff: list&lt;[int, int]&gt;
            gridworld&apos;s cliff region
    	&apos;&apos;&apos;
        self.height = height
        self.width = width
        self.start_state = start_state
        self.goal_state = goal_state
        self.cliff = cliff
        self.actions = [(-1, 0), (1, 0), (0, 1), (0, -1)]
        self.rewards = {&apos;cliff&apos;: -100, &apos;non-cliff&apos;: -1}
```
The gridworld also needs some helper functions. `is_terminal()` function checks whether the current state is the goal state; `take_action()` takes an state and action as inputs and returns next state and corresponding reward while `get_action_idx()` gives us the index of action from action list. Putting all these functions inside `GridWorld`&apos;s body, we have:
```python
    def is_terminal(self, state):
        &apos;&apos;&apos;
        Whether state @state is the goal state

        Params
        ------
        state: [int, int]
            current state
        &apos;&apos;&apos;
        return state == self.goal_state


    def take_action(self, state, action):
        &apos;&apos;&apos;
        Take action @action at state @state

        Params
        ------
        state: [int, int]
            current state
        action: (int, int)
            action taken

        Return
        ------
        (next_state, reward): ([int, int], int)
            a tuple of next state and reward
        &apos;&apos;&apos;
        next_state = [state[0] + action[0], state[1] + action[1]]
        next_state = [max(0, next_state[0]), max(0, next_state[1])]
        next_state = [min(self.height - 1, next_state[0]), min(self.width - 1, next_state[1])]
        if next_state in self.cliff:
            reward = self.rewards[&apos;cliff&apos;]
            next_state = self.start_state
        else:
            reward = self.rewards[&apos;non-cliff&apos;]
        return next_state, reward


    def get_action_idx(self, action):
        &apos;&apos;&apos;
        Get index of action in action list

        Params
        ------
        action: (int, int)
            action
        &apos;&apos;&apos;
        return self.actions.index(action)
```
Next, we define the $\varepsilon$-greedy function used by our methods in `epsilon_greedy()` function.
```python
def epsilon_greedy(grid_world, epsilon, Q, state):
    &apos;&apos;&apos;
    Choose action according to epsilon-greedy policy

    Params:
    -------
    grid_world: GridWorld
    epsilon: float
    Q: np.ndarray
        action-value function
    state: [int, int]
        current state

    Return
    ------
    action: (int, int)
    &apos;&apos;&apos;
    if np.random.binomial(1, epsilon):
        action_idx = np.random.randint(len(grid_world.actions))
        action = grid_world.actions[action_idx]
    else:
        values = Q[state[0], state[1], :]
        action_idx = np.random.choice([action_ for action_, value_ 
            in enumerate(values) if value_ == np.max(values)])
        action = grid_world.actions[action_idx]
    return action
```
It&apos;s time for our main course, Q-learning and Sarsa.
```python
def q_learning(Q, grid_world, epsilon, alpha, gamma):
    &apos;&apos;&apos;
    Q-learning

    Params
    ------
    Q: np.ndarray
        action-value function
    grid_world: GridWorld
    epsilon: float
    alpha: float
        step size
    gamma: float
        discount factor
    &apos;&apos;&apos;
    state = grid_world.start_state
    rewards = 0

    while not grid_world.is_terminal(state):
        action = epsilon_greedy(grid_world, epsilon, Q, state)
        next_state, reward = grid_world.take_action(state, action)
        rewards += reward
        action_idx = grid_world.get_action_idx(action)
        Q[state[0], state[1], action_idx] += alpha * (reward + gamma * \
            np.max(Q[next_state[0], next_state[1], :]) - Q[state[0], state[1], action_idx])
        state = next_state

    return rewards

def sarsa(Q, grid_world, epsilon, alpha, gamma):
    &apos;&apos;&apos;
    Sarsa

    Params
    ------
    Q: np.ndarray
        action-value function
    grid_world: GridWorld
    epsilon: float
    alpha: float
        step size
    gamma: float
        discount factor
    &apos;&apos;&apos;
    state = grid_world.start_state
    action = epsilon_greedy(grid_world, epsilon, Q, state)
    rewards = 0

    while not grid_world.is_terminal(state):
        next_state, reward = grid_world.take_action(state, action)
        rewards += reward
        next_action = epsilon_greedy(grid_world, epsilon, Q, next_state)
        action_idx = grid_world.get_action_idx(action)
        next_action_idx = grid_world.get_action_idx(next_action)
        Q[state[0], state[1], action_idx] += alpha * (reward + gamma * Q[next_state[0], \
            next_state[1], next_action_idx] - Q[state[0], state[1], action_idx])
        state = next_state
        action = next_action

    return rewards
```

And lastly, wrapping everything together in the main function, we have
```python
if __name__ == &apos;__main__&apos;:
    height = 4
    width = 13
    start_state = [3, 0]
    goal_state = [3, 12]
    cliff = [[3, x] for x in range(1, 12)]
    grid_world = GridWorld(height, width, start_state, goal_state, cliff)
    n_runs = 50
    n_eps = 500
    epsilon = 0.1
    alpha = 0.5
    gamma = 1
    Q = np.zeros((height, width, len(grid_world.actions)))
    rewards_q_learning = np.zeros(n_eps)
    rewards_sarsa = np.zeros(n_eps)

    for _ in tqdm(range(n_runs)):
        Q_q_learning = Q.copy()
        Q_sarsa = Q.copy()

        for ep in range(n_eps):
            rewards_q_learning[ep] += q_learning(Q_q_learning, grid_world, epsilon, alpha, gamma)
            rewards_sarsa[ep] += sarsa(Q_sarsa, grid_world, epsilon, alpha, gamma)

    rewards_q_learning /= n_runs
    rewards_sarsa /= n_runs

    plt.plot(rewards_q_learning, label=&apos;Q-Learning&apos;)
    plt.plot(rewards_sarsa, label=&apos;Sarsa&apos;)
    plt.xlabel(&apos;Episodes&apos;)
    plt.ylabel(&apos;Sum of rewards during episode&apos;)
    plt.ylim([-100, 0])
    plt.legend()

    plt.savefig(&apos;./cliff_walking.png&apos;)
    plt.close()
```
&lt;/div&gt;  

This is our result after completing running the code.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-04-08/cliff_walking.png&quot; alt=&quot;Q-learning vs Sarsa on Cliff walking&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 500px&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

#### Expected Sarsa
{: #exp-sarsa}
In the update \eqref{4} of Q-learning, rather than taking the maximum over next state-action pairs, we use the expected value to consider how likely each action is under the current policy. That means, we instead have the following update rule for $Q$-value:
\begin{align}
Q(S_t,A_t)&amp;\leftarrow Q(S_t,A_t)+\alpha\Big[R_{t+1}+\gamma\mathbb{E}\_\pi\big[Q(S_{t+1},A_{t+1}\vert S_{t+1})\big]-Q(S_t,A_t)\Big] \\\\ &amp;\leftarrow Q(S_t,A_t)+\alpha\Big[R_{t+1}+\gamma\sum_a\pi(a|S_{t+1})Q(S_{t+1}|a)-Q(S_t,A_t)\Big]
\end{align}
However, given the next state, $S_{t+1}$, this algorithms move *deterministically* in the same direction as Sarsa moves in *expectation*. Thus, this method is also called **Expected Sarsa**.  

Expected Sarsa performs better than Sarsa since it eliminates the variance due to the randomization in selecting $A_{t+1}$. Which also means that it takes expected Sarsa more resource than Sarsa.

#### Double Q-learning
{: #double-q-learning}

##### Maximization Bias
{: #max-bias}
Consider a set of $M$ random variables $X=\\{X_1,\dots,X_M\\}$. Say that we are interested in maximizing expected value of the r.v.s in $X$:
\begin{equation}
\max_{i=1,\dots,M}\mathbb{E}(X_i)\tag{5}\label{5}
\end{equation}
This value can be approximated by constructing approximations for $\mathbb{E}(X_i)$ for all $i$. Let
\begin{equation}
S=\bigcup_{i=1}^{M}S_i
\end{equation}
denote a set of samples, where $S_i$ is the subset containing samples for the variables $X_i$, and assume that the samples in $S_i$ are i.i.d. Unbiased estimates for the expected values can be obtained by computing the sample average for each variable:
\begin{equation}
\mathbb{E}(X_i)=\mathbb{E}(\mu_i)\approx\mu_i(S)\doteq\frac{1}{\vert S_i\vert}\sum_{s\in S_i}s,
\end{equation}
where $\mu_i$ is an estimator for variable $X_i$. This approximation is unbiased since every sample $s\in S_i$ is an unbiased estimate for the value of $\mathbb{E}(X_i)$. Thus, \eqref{5} can be approximated by:
\begin{equation}
\max_{i=1,\dots,M}\mathbb{E}(X_i)=\max_{i=1,\dots,M}\mathbb{E}(\mu_i)\approx\max_{i=1,\dots,M}\mu_i(S)\tag{6}\label{6}
\end{equation}
Let $f_i$, $F_i$ denote the PDF and CDF of $X_i$ and $f_i^\mu, F_i^\mu$ denote the PDF and CDF of $\mu_i$ respectively. Hence we have that
\begin{align}
\mathbb{E}(X_i)&amp;=\int_{-\infty}^{\infty}x f_i(x)\,dx;\hspace{0.5cm}F_i(x)=P(X_i\leq x)=\int_{-\infty}^{\infty}f_i(x)\,dx \\\\ \mathbb{E}(\mu_i)&amp;=\int_{-\infty}^{\infty}x f_i^\mu(x)\,dx;\hspace{0.5cm}F_i^\mu(x)=P(\mu_i\leq x)=\int_{-\infty}^{\infty}f_i^\mu(x)\,dx
\end{align}
With these notations, considering the maximal estimator $\mu_i$, which is distributed by some PDF $f_{\max}^{\mu}$, we have:
\begin{align}
F_{\max}^{\mu}&amp;\doteq P(\max_i \mu_i\leq x) \\\\ &amp;=P(\mu_1\leq x;\dots;\mu_M\leq x) \\\\ &amp;=\prod_{i=1}^{M}P(\mu_i\leq x) \\\\ &amp;=\prod_{i=1}^{M}F_i^\mu(x)
\end{align}
The value $\max_i\mu_i(S)$ is an unbiased estimate of $\mathbb{E}(\max_i\mu_i)$, which is given by
\begin{align}
\mathbb{E}\left(\max_i\mu_i\right) &amp;=\int_{-\infty}^{\infty}x f_{\max}^{\mu}(x)\,dx \\\\ &amp;=\int_{-\infty}^{\infty}x\frac{d}{dx}\left(\prod_{i=1}^{M}F_i^\mu(x)\right)\,dx \\\\ &amp;=\sum_{i=1}^M\int_{-\infty}^{\infty}f_i^\mu(x)\prod_{j\neq i}^{M}F_i^\mu(x)\,dx
\end{align}
However, as can be seen in \eqref{5}, the order of expectation and maximization is the other way around. This leads to the result that $\max_i\mu_i(S)$ is a biased estimate of $\max_i\mathbb{E}(X_i)$

##### A Solution
{: #sol}
The reason why maximization bias happens is we are using the same samples to decide which action is the best (highest reward one) and also to estimate its action-value. To overcome this situation, Hasselt (2010) proposed an alternative method that uses two set of estimators instead, $\mu^A=\\{\mu_1^A,\dots,\mu_M^A\\}$ and $\mu^B=\\{\mu_1^B,\dots,\mu_M^B\\}$. The method is thus also called **double estimators**. 

Specifically, we use these two sets to learn two independent estimates, called $Q^A$ and $Q^B$, each is an estimate of the true value $q(a)$, for all $a\in\mathcal{A}$. 

&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-04-08/double-q-learning.png&quot; alt=&quot;Double Q-learning&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;


## $\boldsymbol{n}$-step TD
{: #n-step-td}
From the definition of *one-step TD*, we can formalize the idea into a more general, **n-step TD**. Once again, first off, we will be considering the prediction problem.


### $\boldsymbol{n}$-step TD Prediction
{: #n-step-td-prediction}
Recall that in *one-step TD*, the update is based on the next reward, bootstrapping[^2] from the value of the state at one step later. In particular,
the target of the update is $R_{t+1}+\gamma V_t(S_{t+1})$, which we are going to denote as $G_{t:t+1}$, or *one-step return*:
\begin{equation}
G_{t:t+1}\doteq R_{t+1}+\gamma V_t(S_{t+1})
\end{equation}
where $V_t:\mathcal{S}\to\mathbb{R}$ is the estimate at time step $t$ of $v_\pi$. Thus, rather than taking into account one step later, in *two-step TD*, it makes sense to consider the rewards in two steps further, combined with the value function of the state at two step later. In other words, the target of two-step update is the *two-step return*:
\begin{equation}
G_{t:t+2}\doteq R_{t+1}+\gamma R_{t+2}+\gamma^2 V_{t+1}(S_{t+2})
\end{equation}
Similarly, the target of $n$-step update is the *$n$-step return*:
\begin{equation}
G_{t:t+n}\doteq R_{t+1}+\gamma R_{t+2}+\dots+\gamma^{n-1}R_{t+n}+\gamma^n V_{t+n-1}(S_{t+n})
\end{equation}
for all $n,t$ such that $n\geq 1$ and $0\leq t\&lt;T-n$. If $t+n\geq T$, then all the missing terms are taken as zero, and the *n-step return* defined to be equal to the full return:
\begin{equation}
G_{t:t+n}=G_t\doteq R_{t+1}+\gamma R_{t+2}+\gamma^2 R_{t+3}+\dots+\gamma^{T-t-1}R_T,\tag{7}\label{7}
\end{equation}
which is the target of the Monte Carlo update.  

Hence, the **$\boldsymbol{n}$-step TD** method can be defined as:
\begin{equation}
V_{t+n}(S_t)\doteq V_{t+n-1}(S_t)+\alpha\left[G_{t:t+n}-V_{t+n-1}(S_t)\right],
\end{equation}
for $0\leq t\&lt;T$, while the values for all other states remain unchanged: $V_{t+n}(s)=V_{t+n-1}(s),\forall s\neq S_t$. Pseudocode of the algorithm is given right below.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-04-08/n-step-td.png&quot; alt=&quot;n-step TD&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

From \eqref{7} combined with this definition of *$n$-step TD* method, it is easily seen that by changing the value of $n$ from $1$ to $\infty$, we obtain a corresponding spectrum ranging from *one-step TD method* to *Monte Carlo method*.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-04-08/n-step-td-diagram.png&quot; alt=&quot;Backup diagram of n-step TD&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 450px; height: 370px&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 2&lt;/b&gt;: The backup diagram of $n$-step TD methods&lt;/figcaption&gt;
&lt;/figure&gt;

#### Example: Random Walk
{: #eg-random-walk}
(This example is taken from *Example 7.1, Reinforcement Learning: An Introduction book*; the random process image is created based on the figure from [Singd &amp; Sutton](#random_walk)).  

Suppose we have a random process as following
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-04-08/random_process.png&quot; alt=&quot;Random process&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 620px; height: 120px&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
Specifically, the reward is zero everywhere except the transitions into terminal states: the transition from State 2 to State 1 (with reward of $-1$) and the transition from State 20 to State 21 (with reward of $1$). The discount factor, $\gamma$, is $1$. The initial value estimates are $0$ for all states. We will implement $n$-step TD method for $n\in\\{1,2,4,\dots,512\\}$ and step size $\alpha\in\\{0,0.2,0.4,\dots,1\\}$. The walk starts at State 10. 

**Solution code**  
The source code can be found [here](https://github.com/trunghng/reinforcement-learning-an-introduction-imp/blob/main/chapter-7/random_walk.py).  

&lt;button type=&quot;button&quot; class=&quot;collapsible&quot; id=&quot;codeP2&quot;&gt;Click to show the code&lt;/button&gt;
&lt;div class=&quot;codePanel&quot; id=&quot;codeP2data&quot; markdown=&quot;1&quot;&gt;
&lt;br&gt;
As usual, we need these packages for our implementation.

```python
import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm
```
First off, we need to define our environment, the random walk process. The `is_terminal()` function is used to check whether the state considered is a terminal state, while the `take_action()` function itself returns the next state and corresponding reward given the current state and the action taken.
```python
class RandomWalk:
    &apos;&apos;&apos;
    Random walk environment
    &apos;&apos;&apos;

    def __init__(self, n_states, start_state):
        self.n_states = n_states
        self.states = np.arange(1, n_states + 1)
        self.start_state = start_state
        self.end_states = [0, n_states + 1]
        self.actions = [-1, 1]
        self.action_prob = 0.5
        self.rewards = [-1, 0, 1]


    def is_terminal(self, state):
        &apos;&apos;&apos;
        Whether state @state is an end state

        Params
        ------
        state: int
            current state
        &apos;&apos;&apos;
        return state in self.end_states


    def take_action(self, state, action):
        &apos;&apos;&apos;
        Take action @action at state @state

        Params
        ------
        state: int
            current state
        action: int
            action taken

        Return
        ------
        (next_state, reward): (int, int)
            a tuple of next state and reward
        &apos;&apos;&apos;
        next_state = state + action
        if next_state == 0:
            reward = self.rewards[0]
        elif next_state == self.n_states + 1:
            reward = self.rewards[2]
        else:
            reward = self.rewards[1]
        return next_state, reward
```
To calculate the RMSE, we need to compute the true value of states, which can be achieved with the help of `get_true_value()` function. Here we apply Bellman equations to calculate the true value of states.
```python
def get_true_value(random_walk, gamma):
    &apos;&apos;&apos;
    Calculate true value of @random_walk by Bellman equations

    Params
    ------
    random_walk: RandomWalk
    gamma: float
        discount factor
    &apos;&apos;&apos;
    P = np.zeros((random_walk.n_states, random_walk.n_states))
    r = np.zeros((random_walk.n_states + 2, ))
    true_value = np.zeros((random_walk.n_states + 2, ))
    
    for state in random_walk.states:
        next_states = []
        rewards = []

        for action in random_walk.actions:
            next_state = state + action
            next_states.append(next_state)

            if next_state == 0:
                reward = random_walk.rewards[0]
            elif next_state == random_walk.n_states + 1:
                reward = random_walk.rewards[2]
            else:
                reward = random_walk.rewards[1]
            rewards.append(reward)

        for state_, reward_ in zip(next_states, rewards):
            if not random_walk.is_terminal(state_):
                P[state - 1, state_ - 1] = random_walk.action_prob * 1
                r[state_] = reward_
        
    u = np.zeros((random_walk.n_states, ))
    u[0] = random_walk.action_prob * 1 * (-1 + gamma * random_walk.rewards[0])
    u[-1] = random_walk.action_prob * 1 * (1 + gamma * random_walk.rewards[2])

    r = r[1:-1]
    true_value[1:-1] = np.linalg.inv(np.identity(random_walk.n_states) - gamma * P).dot(0.5 * (P.dot(r) + u))
    true_value[0] = true_value[-1] = 0

    return true_value
```
In this random walk experiment, we simply use random policy as our action selection.
```python
def random_policy(random_walk):
    &apos;&apos;&apos;
    Choose an action randomly

    Params
    ------
    random_walk: RandomWalk
    &apos;&apos;&apos;
    return np.random.choice(random_walk.actions)
```
Now it is time to implement our algorithm.
```python
def n_step_temporal_difference(V, n, alpha, gamma, random_walk):
    &apos;&apos;&apos;
    n-step TD

    Params
    ------
    V: np.ndarray
        value function
    n: int
        number of steps
    alpha: float
        step size
    random_walk: RandomWalk
    &apos;&apos;&apos;
    state = random_walk.start_state
    states = [state]

    T = float(&apos;inf&apos;)
    t = 0
    rewards = [0] # dummy reward to save the next reward as R_{t+1}

    while True:
        if t &lt; T:
            action = random_policy(random_walk)
            next_state, reward = random_walk.take_action(state, action)
            states.append(next_state)
            rewards.append(reward)
            if random_walk.is_terminal(next_state):
                T = t + 1
        tau = t - n + 1 # updated state&apos;s time
        if tau &gt;= 0:
            G = 0 # return
            for i in range(tau + 1, min(tau + n, T) + 1):
                G += np.power(gamma, i - tau - 1) * rewards[i]
            if tau + n &lt; T:
                G += np.power(gamma, n) * V[states[tau + n]]
            if not random_walk.is_terminal(states[tau]):
                V[states[tau]] += alpha * (G - V[states[tau]])
        t += 1
        if tau == T - 1:
            break
        state = next_state
```
As usual, we are going illustrate our result in the main function.
```python
if __name__ == &apos;__main__&apos;:
    n_states = 19
    start_state = 10
    gamma = 1
    random_walk = RandomWalk(n_states, start_state)
    true_value = get_true_value(random_walk, gamma)

    episodes = 10
    runs = 100
    ns = np.power(2, np.arange(0, 10))
    alphas = np.arange(0, 1.1, 0.1)

    errors = np.zeros((len(ns), len(alphas)))
    for n_i, n in enumerate(ns):
        for alpha_i, alpha in enumerate(alphas):
            for _ in tqdm(range(runs)):
                V = np.zeros(random_walk.n_states + 2)
                for _ in range(episodes):
                    n_step_temporal_difference(V, n, alpha, gamma, random_walk)
                    rmse = np.sqrt(np.sum(np.power(V - true_value, 2) / random_walk.n_states))
                    errors[n_i, alpha_i] += rmse

    errors /= episodes * runs

    for i in range(0, len(ns)):
        plt.plot(alphas, errors[i, :], label=&apos;n = %d&apos; % (ns[i]))
    plt.xlabel(r&apos;$\alpha$&apos;)
    plt.ylabel(&apos;Average RMS error&apos;)
    plt.ylim([0.25, 0.55])
    plt.legend()
    plt.savefig(&apos;./random_walk.png&apos;)
    plt.close()
```
&lt;/div&gt;

This is our result after completing running the code.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-04-08/random_walk.png&quot; alt=&quot;Random Walk with n-step TD&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 500px&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

### $\boldsymbol{n}$-step TD Control
{: #n-step-td-control}
Similarly, we can apply $n$-step TD methods to control task. In particular, we will combine the idea of $n$-step update with Sarsa, a control method we previously have defined above.

#### $\boldsymbol{n}$-step Sarsa
{: #n-step-sarsa}
As usual, to apply our method to control problem, rather than taking into account states, we instead consider state-action pairs $s,a$ in order to learn the value functions, $\,q_\pi(s,a)$, of them.  
Recall that the target in *one-step Sarsa* update is
\begin{equation}
G_{t:t+1}\doteq R_{t+1}+\gamma Q_t(S_{t+1},A_{t+1})
\end{equation}
Similar to what we have done in the previous part of [$n$-step TD Prediction](#n-step-td-prediction), we can redefine the new target of our $n$-step update
\begin{equation}
G_{t:t+n}\doteq R_{t+1}+\gamma R_{t+2}+\dots+\gamma^{n-1} R_{t+n}+\gamma^n Q_{t+n-1}(S_{t+n},A_{t+n}),
\end{equation}
for $n\geq 0,0\leq t\&lt;T-n$, with $G_{t:t+n}\doteq G_t$ if $t+n\geq T$. The **$\boldsymbol{n}$-step Sarsa** is then can be defined as:
\begin{equation}
Q_{t+n}(S_t,A_t)\doteq Q_{t+n-1}(S_t,A_t)+\alpha\left[G_{t:t+n}-Q_{t+n-1}(S_t,A_t)\right],\hspace{1cm}0\leq t\&lt;T,
\end{equation}
while the values of all other state-action pairs remain unchanged: $Q_{t+n}(s,a)=Q_{t+n-1}(s,a)$, for all $s,a$ such that $s\neq S_t$ or $a\neq A_t$.  

From this definition of $n$-step Sarsa, we can easily derive the multiple step version of Expected Sarsa, called **$\boldsymbol{n}$-step Expected Sarsa**.
\begin{equation}
Q_{t+n}(S_t,A_t)\doteq Q_{t+n-1}(S_t,A_t)+\alpha\left[G_{t:t+n}-Q_{t+n-1}(S_t,A_t)\right],\hspace{1cm}0\leq t\&lt;T,
\end{equation}
where the target of the update is defined as:
\begin{equation}
G_{t:t+n}\doteq R_{t+1}+\gamma R_{t+2}+\dots+\gamma^{n-1}R_{t+n}+\gamma^n\bar{V}\_{t+n-1}(S_{t+n}),\hspace{1cm}t+n\&lt;T,\tag{8}\label{8}
\end{equation}
with $G_{t:t+n}=G_t$ for $t+n\geq T$, where $\bar{V}\_t(s)$ is the *expected approximate value* of state $s$, using the estimated action value at time $t$, under the target policy $\pi$:
\begin{equation}
\bar{V}\_t(s)\doteq\sum_a\pi(a|s)Q_t(s,a),\hspace{1cm}\forall s\in\mathcal{S}
\end{equation}
If $s$ is terminal, then its expected approximate value is defined to be zero.  

Pseudocode of the $n$-step Sarsa algorithm is given right below.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-04-08/n-step-sarsa.png&quot; alt=&quot;n-step Sarsa&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

When taking the value of $n$ from $1$ to $\infty$, similarly, we also obtain a corresponding spectrum ranging from *one-step Sarsa* to *Monte Carlo*.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-04-08/n-step-td-state-action-diagram.png&quot; alt=&quot;Backup diagram of n-step TD for state-action values&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 570px; height: 370px&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 3&lt;/b&gt;: The backup diagram of $n$-step methods for state-action values&lt;/figcaption&gt;
&lt;/figure&gt;

### Off-policy $\boldsymbol{n}$-step TD
{: #off-policy-n-step-td}
Recall that off-policy methods are ones that learn the value function of a *target policy*, $\,\pi$, while follows a *behavior policy*, $\,b$. In this section, we will be considering an off-policy $n$-step TD, or in specifically, $n$-step TD using **Importance Sampling**[^3].

#### $\boldsymbol{n}$-step TD with Importance Sampling
{: #n-step-td-is}
In $n$-step methods, returns are constructed over $n$ steps, so we are interested in the relative probability of just those $n$ actions. Thus, by weighting updates by *importance sampling ratio*, $\,\rho_{t:t+n-1}$, which is the relative probability under the two policies $\pi$ and $b$ of taking $n$ actions from $A_t$ to $A_{t+n-1}$:
\begin{equation}
\rho_{t:h}\doteq\prod_{k=t}^{\min(h,T-1)}\frac{\pi(A_k|S_k)}{b(A_k|S_k)},
\end{equation}
we can get the **off-policy $\boldsymbol{n}$-step TD** method.
\begin{equation}
V_{t+n}(S_t)\doteq V_{t+n-1}(S_t)+\alpha\rho_{t:t+n-1}\left[G_{t:t+n}-V_{t+n-1}(S_t)\right],\hspace{1cm}0\leq t\&lt;T
\end{equation}
Similarly, we have the **off-policy $\boldsymbol{n}$-step Sarsa** method.
\begin{equation}
Q_{t+n}(S_t,A_t)\doteq Q_{t+n-1}(S_t,A_t)+\alpha\rho_{t:t+n-1}\left[G_{t:t+n}-Q_{t+n-1}(S_t,A_t)\right],\hspace{0.5cm}0\leq t \&lt;T\tag{9}\label{9}
\end{equation}
The **off-policy $\boldsymbol{n}$-step Expected Sarsa** uses the same update as \eqref{9} except that it uses $\rho_{t+1:t+n-1}$ as its importance sampling ratio instead of $\rho_{t+1:t+n}$ and also has \eqref{8} as its target.  

Here is pseudocode of the off-policy $n$-step Sarsa.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-04-08/off-policy-n-step-sarsa.png&quot; alt=&quot;Off-policy n-step Sarsa&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

#### $\boldsymbol{n}$-step Tree Backup
{: #n-step-tree-backup}

The idea of tree-backup update is to start with the target of the one-step update, which is defined as the first reward plus the discounted estimated value of the next state. This estimated value is computed as the weighted sum of estimated action values. Each weight corresponding to an action is proportional to its probability of occurrence. In particular, the target of one-step tree-backup update is: 
\begin{equation}
G_{t:t+1}\doteq R_{t+1}+\gamma\sum_a\pi(a|S_{t+1})Q_t(S_{t+1},a),\hspace{1cm}t\&lt;T-1
\end{equation}
which is the same as that of Expected Sarsa. With two-step update, for a certain action $A_{t+1}$ taken according to the behavior policy, $\,b$ (i.e.,$\,b(A_{t+1}|S_{t+1})=1$), one step later, the estimated value of the next state similarly now, can be computed as:
\begin{equation}
\pi(A_{t+1}|S_{t+1})\Big(R_{t+2}+\gamma\pi(a|S_{t+2})Q_{t+1}(S_{t+2},a)\Big)
\end{equation}
The target of two-step update, which also is defined as sum of the first reward received plus the discounted estimated value of the next state therefore, can be computed as
\begin{align}
G_{t:t+2}&amp;\doteq R_{t+1}+\gamma\sum_{a\neq A_{t+1}}\pi(a|S_{t+1})Q_{t+1}(S_{t+1},a) \\\\ &amp;\hspace{1cm}+\gamma\pi(A_{t+1}|S_{t+1})\Big(R_{t+2}+\gamma\pi(a|S_{t+2})Q_{t+1}(S_{t+2},a)\Big) \\\\&amp;=R_{t+1}+\gamma\sum_{a\neq A_{t+1}}\pi(a|S_{t+1})Q_{t+1}(S_{t+1},a)+\gamma\pi(A_{t+1}|S_{t+1})G_{t+1:t+2},
\end{align}
for $t\&lt;T-2$. Hence, the target of the $n$-step tree-backup update recursively can be defined as:
\begin{equation}
G_{t:t+n}\doteq R_{t+1}+\gamma\sum_{a\neq A_{t+1}}\pi(a|S_{t+1})Q_{t+n-1}(S_{t+1},a)+\gamma\pi(A_{t+1}|S_{t+1})G_{t+1:t+n}
\end{equation}
for $t\&lt;T-1,n\geq 2$. The $n$-step tree-backup update can be illustrated through the following diagram
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-04-08/3-step-tree-backup.png&quot; alt=&quot;3-step tree-backup&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 110px; height: 375px&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 4&lt;/b&gt;: The backup diagram of 3-step tree-backup&lt;/figcaption&gt;
&lt;/figure&gt;

With this definition of the target, we now can define our **$\boldsymbol{n}$-step tree-backup** method as:
\begin{equation}
Q_{t+n}(S_t,A_t)\doteq Q_{t+n-1}(S_t,A_t)+\alpha\Big[G_{t:t+n}-Q_{t+n-1}(S_t,A_t)\Big],\hspace{1cm}0\leq t\&lt;T
\end{equation}
while the values of all other state-action pairs remain unchanged: $Q_{t+n}(s,a)=Q_{t+n-1}(s,a)$, for all $s,a$ such that $s\neq S_t$ or $a\neq A_t$. Pseudocode of the n-step tree-backup algorithm is given below.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2022-04-08/n-step-tree-backup.png&quot; alt=&quot;n-step tree-backup&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

#### $\boldsymbol{n}$-step $Q(\sigma)$
{: #n-step-q-sigma}


## References
[1] Richard S. Sutton &amp; Andrew G. Barto. [Reinforcement Learning: An Introduction](https://mitpress.mit.edu/books/reinforcement-learning-second-edition)  

[2] &lt;span id=&apos;td-convergence&apos;&gt;Sutton, R.S. [Learning to predict by the methods of temporal differences](https://doi.org/10.1007/BF00115009). Mach Learn 3, 9–44 (1988).&lt;/span&gt;  

[3] &lt;span id=&apos;q-learning-watkins&apos;&gt;Chris Watkins. [Learning from Delayed Rewards](https://www.researchgate.net/publication/33784417_Learning_From_Delayed_Rewards). PhD Thesis (1989)&lt;/span&gt;  

[4] Hado Hasselt. [Double Q-learning](https://papers.nips.cc/paper/2010/hash/091d584fced301b442654dd8c23b3fc9-Abstract.html). NIPS 2010  

[5] Shangtong Zhang. [Reinforcement Learning: An Introduction implementation](https://github.com/ShangtongZhang/reinforcement-learning-an-introduction)  

[6] &lt;span id=&apos;random_walk&apos;&gt;Singh, S.P., Sutton, R.S. [Reinforcement learning with replacing eligibility traces](https://doi.org/10.1007/BF00114726). Mach Learn 22, 123–158 (1996).&lt;/span&gt;  


## Footnotes
[^1]: It is a special case of [n-step TD](#n-step-td) and TD($\lambda$).
[^2]: Bootstrapping is to update estimates  of the value functions of states based on estimates of value functions of other states.
[^3]: For the definition of Importance Sampling method, you can read more in this [section]({% post_url 2021-08-21-monte-carlo-in-rl %}#is).</content><author><name>Trung H. Nguyen</name><email>trung.skipper@gmail.com</email></author><category term="artificial-intelligent" /><category term="reinforcement-learning" /><category term="artificial-intelligent" /><category term="reinforcement-learning" /><category term="td-learning" /><category term="n-step-td" /><category term="q-learning" /><category term="my-rl" /><summary type="html">So far in this series, we have gone through the ideas of dynamic programming (DP) and Monte Carlo. What will happen if we combine these ideas together? Temporal-difference (TD) learning is our answer.</summary></entry><entry><title type="html">Power Series</title><link href="http://localhost:4000/mathematics/calculus/2021/09/21/power-series.html" rel="alternate" type="text/html" title="Power Series" /><published>2021-09-21T15:40:00+07:00</published><updated>2021-09-21T15:40:00+07:00</updated><id>http://localhost:4000/mathematics/calculus/2021/09/21/power-series</id><content type="html" xml:base="http://localhost:4000/mathematics/calculus/2021/09/21/power-series.html">&gt; Recall that in the previous post, [Infinite Series of Constants]({% post_url 2021-09-06-infinite-series-of-constants %}), we mentioned a type of series called **power series** a lot. In the content of this post, we will be diving deeper into details of that series.

&lt;!-- excerpt-end --&gt;
- [Power Series](#power-series)
- [The Interval of Convergence](#int-conv)
	- [Example](#eg1)
- [Differentiation and Integration of Power Series](#dif-int-power-series)
	- [Differentiation of Power Series](#dif-power-series)
	- [Integration of Power Series](#int-power-series)
	- [Example](#eg2)
- [Taylor Series, Taylor&apos;s Formula](#taylor-series-formula)
	- [Taylor Series](#taylor-series)
	- [Taylor&apos;s Formula](#taylors-formula)
- [Operations on Power Series](#op-power-series)
	- [Multiplication](#mult)
	- [Division](#div)
	- [Substitution](#sub)
	- [Even and Odd Functions](#even-odd-funcs)
- [Uniform Convergence for Power Series](#uni-conv-power-series)
	- [Continuity of the Sum](#cont-sum)
	- [Integrating term by term](#int)
	- [Differentiating term by term](#dif)
- [References](#references)
- [Footnotes](#footnotes)

## Power Series
A **power series** is a series of the form
\begin{equation}
\sum_{n=0}^{\infty}a_nx^n=a_0+a_1x+a_2x^2+\ldots+a_nx^n+\ldots,
\end{equation}
where the coefficient $a_n$ are constants and $x$ is a variable.  

## The Interval of Convergence
{: #int-conv}
Similar to what we have done in the post of [infinite series of constants]({% post_url 2021-09-06-infinite-series-of-constants %}), we begin studying properties of power series by considering their convergence behavior.  

**Lemma 1**  
*If a power series $\sum a_nx^n$ converges at $x_1$, with $x_1\neq 0$, then it converges [absolutely]({% post_url 2021-09-06-infinite-series-of-constants %}#abs-conv) at all $x$ with $\vert x\vert&lt;\vert x_1\vert$; and if it diverges at $x_1$, then it diverges at all $x$ with $\vert x\vert&gt;\vert x_1\vert$.*  

**Proof**  
By the [$n$-th term test]({% post_url 2021-09-06-infinite-series-of-constants %}#nth-term-test), we have that if $\sum a_nx^n$ converges, then $a_nx^n\to 0$. In particular, if $n$ is sufficiently large, then $\vert a_n{x_1}^n\vert&lt;1$, and therefore
\begin{equation}
\vert a_nx^n\vert=\vert a_n{x_1}^n\vert\left\vert\dfrac{x}{x_1}\right\vert^n\&lt;r^n,\tag{1}\label{1}
\end{equation}
where $r=\vert\frac{x}{x_1}\vert$. Suppose that $\vert x\vert&lt;\vert x_1\vert$, we have
\begin{equation}
r=\left\vert\dfrac{x}{x_1}\right\vert&lt;1,
\end{equation}
which leads to the result that geometric series $\sum r^n$ converges (with the sum $\frac{1}{1-r}$). And hence, from \eqref{1} and by the [comparison test]({% post_url 2021-09-06-infinite-series-of-constants %}#comparison-test), the series $\sum\vert a_nx^n\vert$ also converges.  

Moreover, if $\sum a_n{x_1}^n$ diverges, then $\sum\vert a_n{x_1}^n\vert$ also diverges. By the [comparison test]({% post_url 2021-09-06-infinite-series-of-constants %}#comparison-test), for any $x$ such that $\vert x\vert&gt;\vert x_1\vert$, we also have that $\sum\vert a_nx^n\vert$ diverges. This leads to the divergence of $\sum a_nx^n$, because if the series $\sum a_nx^n$ converges, so does $\sum\vert a_nx^n\vert$, which contradicts to our result.  

These are some main facts about the convergence behavior of an arbitrary power series and some properties of its:
- Given a power series $\sum a_nx^n$, precisely one of the following is true:
	- The series converges only for $x=0$.
	- The series is absolutely convergent for all $x$.
	- There exists a positive real number $R$ such that the series is absolutely convergent for $\vert x\vert\&lt;R$ and divergent for $\vert x\vert&gt;R$.
- The positive real number $R$ is called **radius of convergence** of the power series: the series converges absolutely at every point of the open interval $(-R,R)$, and diverges outside the closed interval $[-R,R]$.
- The set of all $x$&apos;s for which a power series converges is called its **interval of convergence**.
- When the series converges only for $x=0$, we define $R=0$; and we define $R=\infty$ when the series converges for all $x$.
- Every power series $\sum a_nx^n$ has a radius of convergence $R$, where $0\leq R\leq\infty$, with the property that the series converges absolutely if $\vert x\vert\&lt;R$ and diverges if $\vert x\vert&gt;R$.  

### Example
{: #eg1} 
Find the interval of convergence of the series
\begin{equation}
\sum_{n=0}^{\infty}\dfrac{x^n}{n+1}=1+\dfrac{x}{2}+\dfrac{x^2}{3}+\ldots
\end{equation}

**Solution**  
In order to find the interval of convergence of a series, we begin by identifying its radius of convergence.  

Consider a power series $\sum a_nx^n$. Suppose that this limit exists, and has $\infty$ as an allowed value, we have
\begin{equation}
\lim_{n\to\infty}\dfrac{\vert a_{n+1}x^{n+1}\vert}{a_nx^n}=\lim_{n\to\infty}\left\vert\dfrac{a_{n+1}}{a_n}\right\vert.\vert x\vert=\dfrac{\vert x\vert}{\lim_{n\to\infty}\left\vert\frac{a_n}{a_{n+1}}\right\vert}=L
\end{equation}
By the [ratio test]({% post_url 2021-09-06-infinite-series-of-constants %}#ratio-test), we have $\sum a_nx^n$ converges absolutely if $L&lt;1$ and diverges in case of $L&gt;1$. Or in other words, the series converges absolutely if
\begin{equation}
\vert x\vert&lt;\lim_{n\to\infty}\left\vert\dfrac{a_n}{a_{n+1}}\right\vert,
\end{equation}
or diverges if
\begin{equation}
\vert x\vert&gt;\lim_{n\to\infty}\left\vert\dfrac{a_n}{a_{n+1}}\right\vert
\end{equation}
From the definition of radius of convergence, we can choose the radius of converge of $\sum a_nx^n$ as
\begin{equation}
R=\lim_{n\to\infty}\left\vert\dfrac{a_n}{a_{n+1}}\right\vert
\end{equation}

Back to our problem, for the series $\sum\frac{x^n}{n+1}$, we have its radius of convergence is
\begin{equation}
R=\lim_{n\to\infty}\left\vert\dfrac{a_n}{a_{n+1}}\right\vert=\lim_{n\to\infty}\dfrac{\frac{1}{n+1}}{\frac{1}{n+2}}=\lim_{n\to\infty}\dfrac{n+2}{n+1}=1
\end{equation}
At $x=1$, the series becomes the *harmonic series* $1+\frac{1}{2}+\frac{1}{3}+\ldots$, which diverges; and at $x=-1$, it is the *alternating harmonic series* $1-\frac{1}{2}+\frac{1}{3}-\ldots$, which converges. Hence, the interval of convergence of the series is $[-1,1)$.

## Differentiation and Integration of Power Series
{: #dif-int-power-series}

It is easily seen that the sum of the series $\sum_{n=0}^{\infty}a_nx^n$  is a function of $x$ since the sum depends only on $x$ for any value of $x$. Hence, we can denote this as
\begin{equation}
f(x)=\sum_{n=0}^{\infty}a_nx^n=a_0+a_1x+a_2x^2+\ldots+a_nx^n+\ldots\tag{2}\label{2}
\end{equation}
This relation between the series and the function is also expressed by saying that $\sum a_nx^n$ is a **power series expansion** of $f(x)$.  

These are some crucial facts about that relation.
- (i) The function $f(x)$ defined by \eqref{2} is continuous on the open interval $(-R,R)$.  
- (ii) The function $f(x)$ is differentiable on $(-R,R)$, and its derivative is given by the formula
\begin{equation}
f&apos;(x)=a_1+2a_2x+3a_3x^2+\ldots+na_nx^{n-1}+\ldots\tag{3}\label{3}
\end{equation}
- (iii) If $x$ is any point in $(-R,R)$, then
\begin{equation}
\int_{0}^{x}f(t)\,dt=a_0x+\dfrac{1}{2}a_1x^2+\dfrac{1}{3}a_2x^3+\ldots+\dfrac{1}{n+1}a_nx^{n+1}+\ldots\tag{4}\label{4}
\end{equation}

**Remark**  
We have that series \eqref{3} and \eqref{4} converge on the interval $(-R,R)$.  

**Proof**  
1. We begin by proving the convergence on $(-R,R)$ of \eqref{3}.  
Let $x$ be a point in the interval $(-R,R)$ and choose $\epsilon&gt;0$ so that $\vert x\vert+\epsilon\&lt;R$. Since $\vert x\vert+\epsilon$ is in the interval, $\sum\vert a_n\left(\vert x\vert+\epsilon\right)^n\vert$ converges.  
We continue by proving the inequality
\begin{equation}
\vert nx^{n-1}\vert\leq\left(\vert x\vert+\epsilon\right)^n\hspace{1cm}\forall n\geq n_0,
\end{equation}
where $\epsilon&gt;0$, $n_0$ is a positive integer.  
We have
\begin{align}
\lim_{n\to\infty}n^{1/n}&amp;=\lim_{n\to\infty} \\\\ &amp;=\lim_{n\to\infty}\exp\left(\frac{\ln n}{n}\right) \\\\ &amp;=\exp\left(\lim_{n\to\infty}\frac{\ln n}{n}\right) \\\\ &amp;={\rm e}^0=1,
\end{align}
where in the fourth step, we use the *L’Hospital theorem*[^1]. Therefore, as $n\to\infty$
\begin{equation}
n^{1/n}\vert x\vert^{1-1/n}\to\vert x\vert
\end{equation}
Then for all sufficiently large $n$&apos;s
\begin{align}
n^{1/n}\vert x\vert^{1-1/n}&amp;\leq\vert x\vert+\epsilon \\\\ \vert nx^{n-1}\vert&amp;\leq\left(\vert x\vert+\epsilon\right)^n
\end{align}
This implies that
\begin{equation}
\vert na_nx^{n-1}\vert\leq\vert a_n\left(\vert x\vert+\epsilon\right)^n\vert
\end{equation}
By the [comparison test]({% post_url 2021-09-06-infinite-series-of-constants %}#comparison-test), we have that the series $\sum\vert na_nx^{n-1}\vert$ converges, and so does $\sum na_nx^{n-1}$.  

2. Since $\sum\vert a_nx^n\vert$ converges and
\begin{equation}
\left\vert\dfrac{a_nx^n}{n+1}\right\vert\leq\vert a_nx^n\vert,
\end{equation}
the [comparison test]({% post_url 2021-09-06-infinite-series-of-constants %}#comparison-test) implies that $\sum\left\vert\frac{a_nx^n}{n+1}\right\vert$ converges, and therefore
\begin{equation}
x\sum\frac{a_nx^n}{n+1}=\sum\frac{1}{n+1}a_nx^{n+1}
\end{equation}
also converges.

### Differentiation of Power Series
{: #dif-power-series}

If we instead apply (ii) to the function $f&apos;(x)$ in \eqref{3}, then it follows that $f&apos;(x)$ is also differentiable. Doing the exact same process to $f&apos;\&apos;(x)$, we also have that $f&apos;\&apos;(x)$ is differentiable, and so on. Hence, the original $f(x)$ has derivatives of all orders, as expressed in the following statement:  

*In the interior of its interval of convergence, a power series defines an finitely differentiable function whose derivatives can be calculated by differentiating the series term by term*.
\begin{equation}
\dfrac{d}{dx}\left(\sum a_nx^n\right)=\sum\dfrac{d}{dx}(a_nx^n)
\end{equation}

### Integration of Power Series
{: #int-power-series}

Similarly, from (iii), the term-by-term integration of power series can be emphasized by writing \eqref{4} as
\begin{equation}
\int\left(\sum a_nx^n\right)\,dx=\sum\left(\int a_nx^n\,dx\right)
\end{equation}

### Example
{: #eg2}

Find a power series expansion of ${\rm e}^x$.  

**Solution**  
Since ${\rm e}^x$ is the only function that equals its own derivatives[^2] and has the value $1$ at $x=0$. To construct a power series equal to its own derivative, we use the fact that when such a series is differentiated, the degree of each term drops by $1$. We therefore want each term to be the derivative of the one that follows it.  

Starting with $1$ as the constant term, the next should be $x$, then $\frac{1}{2}x^2$, then $\frac{1}{2.3}x^3$, and so on. This produces the series
\begin{equation}
1+x+\dfrac{x^2}{2!}+\dfrac{x^3}{3!}+\ldots+\dfrac{x^n}{n!}+\ldots,\tag{5}\label{5}
\end{equation}
which converges for all $x$ because
\begin{equation}
R=\lim_{n\to\infty}\dfrac{\frac{1}{n!}}{\frac{1}{(n+1)!}}=\lim_{n\to\infty}(n+1)=\infty
\end{equation}
We have constructed the series \eqref{5} so that its sum is unchanged by differentiated and has the value $1$ at $x=0$. Therefore, for all $x$,
\begin{equation}
{\rm e}^x=1+x+\dfrac{x^2}{2!}+\dfrac{x^3}{3!}+\ldots+\dfrac{x^n}{n!}+\ldots
\end{equation}

## Taylor Series, Taylor&apos;s Formula
{: #taylor-series-formula}

### Taylor Series
Assume that $f(x)$ is the sum of a power series with positive radius of convergence
\begin{equation}
f(x)=\sum_{n=0}^{\infty}a_nx^n=a_0+a_1x+a_2x^2+\ldots,\hspace{1cm}R&gt;0\tag{6}\label{6}
\end{equation}
By the results obtained from previous section, differentiating \eqref{6} term by term we have
\begin{align}
f^{(1)}(x)&amp;=a_1+2a_2x+3a_3x^2+\ldots \\\\ f^{(2)}(x)&amp;=1.2a_2+2.3a_3x+3.4a_4x^2+\ldots \\\\ f^{(3)}(x)&amp;=1.2.3a_3+2.3.4a_4x+3.4.5a_5x^2+\ldots
\end{align}
and in general,
\begin{equation}
f^{(n)}(x)=n!a_n+A(x),\tag{7}\label{7}
\end{equation}
where $A(x)$ contains $x$ as a factor.  

Since these series expansions of the derivatives are valid on the open interval $(-R,R)$, putting $x=0$ in \eqref{7} we obtain
\begin{equation}
f^{(n)}(0)=n!a_n
\end{equation}
so
\begin{equation}
a_n=\dfrac{f^{(n)}(0)}{n!}
\end{equation}
Putting this result in \eqref{6}, our series becomes
\begin{equation}
f(x)=f(0)+f^{(1)}(0)x+\dfrac{f^{(2)}(0)}{2!}x^2+\ldots+\dfrac{f^{(n)}(0)}{n!}x^n+\ldots\tag{8}\label{8}
\end{equation}
This power series is called **Taylor series** of $f(x)$ [at $x=0$], which is named after the person who introduced it, Brook Taylor.  

If we use the convention that $0!=1$, then \eqref{8} can be written as
\begin{equation}
f(x)=\sum_{n=0}^{\infty}\dfrac{f^{(n)}(0)}{n!}x^n
\end{equation}
The numbers $a_n=\frac{f^{(n)}(0)}{n!}$ are called the **Taylor coefficients** of $f(x)$.  

**Remark**  
Given a function $f(x)$ that is infinitely differentiable in some interval containing the point $x=0$, we have already examined the possibility of expanding this function as a power series in $x$. More generally, if $f(x)$ is infinitely differentiable in some interval containing the point $x=a$, is there any possibility for the power series expansion of $f(x)$ in $x-a$ instead of $x$?  
\begin{equation}
f(x)=\sum_{n=0}^{\infty}a_n(x-a)^n=a_0+a_1(x-a)+a_2(x-a)^2+\ldots
\end{equation}
Let $w=x-a$, and $g(w)=f(x)$, we have that $g^{(n)}(0)=f^{(n)}(a)$. Thus, the Taylor series of $f(x)$ in power of $x-a$ (or at $x=a$) is
\begin{align}
f(x)&amp;=\sum_{n=0}^{\infty}\dfrac{f^{(n)}(a)}{n!}(x-a)^n \\\\ &amp;=f(a)+f^{(1)}(a)(x-a)+\dfrac{f^{(2)}(a)}{2!}(x-a)^2+\ldots+\dfrac{f^{(n)}(a)}{n!}(x-a)^n+\ldots\tag{9}\label{9}
\end{align}

### Taylor&apos;s Formula
{: #taylors-formula}
If we break off the Taylor series on the right side of \eqref{8} at the term containing $x^n$ and define the *remainder* $R_n(x)$ by the equation
\begin{equation}
f(x)=f(0)+f^{(1)}(0)x+\dfrac{f^{(2)}(0)}{2!}x^2+\ldots+\dfrac{f^{(n)}(0)}{n!}x^n+R_n(x),\tag{10}\label{10}
\end{equation}
then the Taylor series on the right side of \eqref{8} converges to the function $f(x)$ as $n$ tends to infinity precisely when
\begin{equation}
\lim_{n\to\infty}R_n(x)=0
\end{equation}
Since $R_n(x)$ contains $x^{n+1}$ as a factor, we can define a function $S_n(x)$ by writing
\begin{equation}
R_n(x)=S_n(x)x^{n+1}
\end{equation}
for $x\neq 0$. Next, we keep $x$ fixed and define a function $F(t)$ for $0\leq t\leq x$ (or $x\leq t\leq 0$) by writing
\begin{multline}
F(t)=f(x)-f(t)-f^{(1)}(t)(x-t)-\dfrac{f^{(2)}(t)}{2!}(x-t)^2-\ldots \\\\ -\dfrac{f^{(n)}(t)}{n!}(x-t)^n-S_n(x)(x-t)^{n+1}
\end{multline}
It is easily seen that $F(x)=0$. Also, from equation \eqref{10}, we have that $F(0)=0$. Then by the *Mean Value Theorem*[^3], $F&apos;(c)=0$ for some constant $c$ between $0$ and $x$.  

By differentiating $F(t)$ w.r.t $t$, and evaluate it at $t=c$, we have
\begin{equation}
F&apos;(c)=-\dfrac{f^{(n+1)}(c)}{n!}(x-c)^n+S_n(x)(n+1)(x-c)^n=0
\end{equation}
so
\begin{equation}
S_n(x)=\dfrac{f^{(n+1)}(c)}{(n+1)!}
\end{equation}
and
\begin{equation}
R_n(x)=S_n(x)x^{n+1}=\dfrac{f^{(n+1)}(c)}{(n+1)!}x^{n+1}
\end{equation}
which makes \eqref{10} become
\begin{equation}
f(x)=f(0)+f^{(1)}(0)x+\dfrac{f^{(2)}(0)}{2!}x^2+\ldots+\dfrac{f^{(n)}(0)}{n!}x^n+\dfrac{f^{(n+1)}(c)}{(n+1)!}x^{n+1},
\end{equation}
where $c$ is some number between $0$ and $x$. This equation is called **Taylor&apos;s formula with derivative remainder**.  

Moreover, with this formula we can rewrite \eqref{9} as
\begin{multline}
f(x)=f(a)+f^{(1)}(a)(x-a)+\dfrac{f^{(2)}(a)}{2!}(x-a)^2+\ldots \\\\ +\dfrac{f^{(n)}(a)}{n!}(x-a)^n+\dfrac{f^{(n+1)}(a)}{(n+1)!}(x-a)^{n+1},\tag{11}\label{11}
\end{multline}
where $c$ is some number between $a$ and $x$.  

The polynomial part of \eqref{11}
\begin{multline}
\sum_{j=0}^{n}\dfrac{f^{(j)}(a)}{j!}(x-a)^j=f(a)+f^{(1)}(a)(x-a) \\\\ +\dfrac{f^{(2)}(a)}{2!}(x-a)^2+\ldots+\dfrac{f^{(n)}(a)}{n!}(x-a)^n
\end{multline}
is called the **nth-degree Taylor polynomial at** $x=a$.  

On the other hand, the remainder part of \eqref{11}
\begin{equation}
R_n(x)=\dfrac{f^{(n+1)}(a)}{(n+1)!}(x-a)^{n+1}
\end{equation}
is often called **Lagrange&apos;s remainder formula**.  

**Remark**  
It is worth remarking that power series expansions are *unique*. This means that if a function $f(x)$ can be expressed as a sum of a power series by *any method*, then this series must be the Taylor series of $f(x)$.

## Operations on Power Series
{: #op-power-series}

### Multiplication
{: #mult}
Suppose we are given two power series expansions
\begin{align}
f(x)&amp;=\sum a_nx^n=a_0+a_1x+a_2x^2+a_3x^3+\ldots\tag{12}\label{12} \\\\ g(x)&amp;=\sum b_nx^n=b_0+b_1x+b_2x^2+b_3x^3+\ldots\tag{13}\label{13}
\end{align}
both valid on $(-R,R)$. If we multiply these two series term by term, we obtain the power series
\begin{multline}
a_0b_0+(a_0b_1+a_1b_0)x+(a_0b_2+a_1b_1+a_2b_0)x^2 \\\\ +(a_0b_3+a_1b_2+a_2b_1+a_3b_0)x^3+\ldots
\end{multline}
Briefly, we have multiplied \eqref{12} and \eqref{13} to obtain
\begin{equation}
f(x)g(x)=\sum_{n=0}^{\infty}\left(\sum_{k=0}^{n}a_kb_{n-k}\right)x^n\tag{14}\label{14}
\end{equation}
By the **Theorem 10** from [Absolute vs Conditionally Convergence]({% post_url 2021-09-06-infinite-series-of-constants %}#abs-vs-cond), we have that this product of the series \eqref{12} and \eqref{13} actually converges on the interval $(-R,R)$ to the product of the functions $f(x)$ and $g(x)$, as indicated by \eqref{14}.

### Division
{: #div}
With the two series \eqref{12} and \eqref{13}, we have
\begin{equation}
\dfrac{\sum a_nx^n}{\sum b_nx^n}=\left(\sum a_nx^n\right).\left(\dfrac{1}{\sum b_nx^n}\right)
\end{equation}
This suggests us that if we can expand $\frac{1}{\sum b_nx^n}$ in a power series with positive radius of convergence $\sum c_nx^n$, and multiply this series by $\sum a_nx^n$, we can compute the division of our two series $\sum a_nx^n$ and $\sum b_nx^n$.  

To do the division properly, it is necessary to assume that $b_0\neq0$ (for the case $x=0$). Moreover, without any loss of generality, we may assume that $b_0=1$, because with the assumption that $b_0\neq0$, we simply factor it out
\begin{equation}
\dfrac{1}{b_0+b_1x+b_2x^2+\ldots}=\dfrac{1}{b_0}.\dfrac{1}{1+\frac{b_1}{b_0}x+\frac{b_2}{b_0}x^2+\ldots}
\end{equation}

We begin by determining the $c_n$&apos;s. Since $\frac{1}{\sum b_nx^n}=\sum c_nx^n$, then $(\sum b_nx^n)(\sum c_nx^n)=1$, so
\begin{multline}
b_0c_0+(b_0c_1+b_1c_0)x+(b_0c_2+b_1c_1+b_2c_0)x^2+\ldots \\\\ +(b_0c_n+b_1c_{n-1}+\ldots+b_nc_0)x^n+\ldots=1,
\end{multline}
and since $b_0=1$, we can determine the $c_n$&apos;s recursively
\begin{align}
c_0&amp;=1 \\\\ c_1&amp;=-b_1c_0 \\\\ c_2&amp;=-b_1c_1-b_2c_0 \\\\ &amp;\vdots \\\\ c_n&amp;=-b_1c_{n-1}-b_2c_{n-2}-\ldots-b_nc_0 \\\\ &amp;\vdots
\end{align}
Now our work reduces to proving that the power series $\sum c_nx^n$ with these coefficients has positive radius of convergence, and for this it suffices to show that the series converges for at least one nonzero $x$.  

Let $r$ be any number such that $0\&lt;r\&lt;R$, so that $\sum b_nr^n$ converges. Then there exists a constant $K\geq 1$ with the property that $\vert b_nr^n\vert\leq K$ or $\vert b_n\vert\leq\frac{K}{r^n}$ for all $n$. Therefore,
\begin{align}
\vert c_0\vert&amp;=1\leq K, \\\\ \vert c_1\vert&amp;=\vert b_1c_0\vert=\vert b_1\vert\leq \dfrac{K}{r}, \\\\ \vert c_2\vert&amp;\leq\vert b_1c_1\vert+\vert b_2c_0\vert\leq\dfrac{K}{r}.\dfrac{K}{r}+\dfrac{K}{r^2}.K=\dfrac{2K^2}{r^2}, \\\\ \vert c_3\vert&amp;\leq\vert b_1c_2\vert+\vert b_2c_1\vert+\vert b_3c_0\vert\leq\dfrac{K}{r}.\dfrac{2K^2}{r^2}+\dfrac{K}{r^2}.\dfrac{K}{r}+\dfrac{K}{r^3}.K \\\\ &amp;\hspace{5.3cm}\leq(2+1+1)\dfrac{K^3}{r^3}=\dfrac{4K^3}{r^3}=\dfrac{2^2K^3}{r^3},
\end{align}
since $K^2\leq K^3$ since $K\geq1$. In general,
\begin{align}
\vert c_n\vert&amp;\leq\vert c_1b_{n-1}\vert+\vert c_2b_{n-2}\vert+\ldots+\vert b_nc_0\vert \\\\ &amp;\leq\dfrac{K}{r}.\dfrac{2^{n-2}K^{n-1}}{r^{n-1}}+\dfrac{K}{r^2}.\dfrac{2^{n-3}K^{n-2}}{r^{n-2}}+\ldots+\dfrac{K}{r^n}.K \\\\ &amp;\leq(2^{n-2}+2^{n-3}+\ldots+1+1)\dfrac{K^n}{r^n}=\dfrac{2^{n-1}K^n}{r^n}\leq\dfrac{2^nK^n}{r^n}
\end{align}
Hence, for any $x$ such that $\vert x\vert&lt;\frac{r}{2K}$, we have that the series $\sum c_nx^n$ converges absolutely, and therefore converges, or in other words, $\sum c_nx^n$ has nonzero radius of convergence.

### Substitution
{: #sub}
If a power series
\begin{equation}
f(X)=a_0+a_1x+a_2x^2+\ldots\tag{15}\label{15}
\end{equation}
converges for $\vert x\vert\&lt;R$ and if $\vert g(x)\vert\&lt;R$, then we can find $f(g(x))$ by substituting $g(x)$ for $x$ in \eqref{15}.  

Suppose $g(x)$ is given by a power series,
\begin{equation}
g(x)=b_0+b_1x+b_2x^2+\ldots,\tag{16}\label{16}
\end{equation}
therefore,
\begin{align}
f(g(x))&amp;=a_0+a_1g(x)+a_2g(x)^2+\ldots \\\\ &amp;=a_0+a_1(b+0+b_1x+\ldots)+a_2(b_0+b_1x+\ldots)^2+\ldots
\end{align}
The power series formed in this way converges to $f(g(x))$ whenever \eqref{16} is absolutely convergent and $\vert g(x)\vert\&lt;R$.

### Even and Odd Functions
{: #even-odd-funcs}
A function $f(x)$ defined on $(-R,R)$ is said to be **even** if
\begin{equation}
f(-x)=f(x),
\end{equation}
and **odd** if
\begin{equation}
f(-x)=-f(x)
\end{equation}
Then if $f(x)$ is an even function, then its Taylor series has the form
\begin{equation}
\sum_{n=0}^{\infty}a_{2n}x^{2n}=a_0+a_2x^2+a_4x^4+\ldots
\end{equation}
and if $f(x)$ is an odd function, then its Taylor series has the form
\begin{equation}
\sum_{n=0}^{\infty}a_{2n+1}x^{2n+1}=a_1x+a_3x^3+a_5x^5+\ldots
\end{equation}
since if $f(x)=\sum_{n=0}^{\infty}a_nx^n$ is even, then $\sum_{n=0}^{\infty}a_nx^n=\sum_{n=0}^{\infty}(-1)^na_nx^n$, so by the uniqueness of the Taylor series expansion, we have that $a_n=(-1)^na_n$; similarly, $a_n=(-1)^{n+1}a_n$ if $f(x)$ is an odd function.

## Uniform Convergence for Power Series
{: #uni-conv-power-series}
Consider a power series $\sum a_nx^n$ with positive radius of convergence $R$, and let $f(x)$ be its sum.  

In the [section](#dif-int-power-series) above, we stated that $f(x)$ is continuous and differentiable on $(-R,R)$, and we can differentiate and integrate it term by term. So let&apos;s prove these statements!  

Let $S_n(x)$ be the $n$-th partial sum of the series, so that
\begin{equation}
S_n(x)=\sum_{i=0}^{n}a_ix^i=a_0+a_1x+a_2x^2+\ldots+a_nx^n
\end{equation}
Similar to what we did in [Taylor&apos;s formula](#taylors-formula), we write
\begin{equation}
f(x)=S_n(x)+R_n(x)
\end{equation}
Thus, the remainder
\begin{equation}
R_n(x)=a_{n+1}x^{n+1}+a_{n+2}x^{n+2}+\ldots
\end{equation}

For each $x$ in the interval of convergence, we know that $R_n(x)\to0$ as $n\to\infty$; that is, for any given $\epsilon&gt;0$, and for an integer $n_0$ large enough, we have
\begin{equation}
\vert R_n(x)\vert&lt;\epsilon\hspace{1cm}n\geq n_0,\tag{17}\label{17}
\end{equation}
This is true for each $x$ individually, and is an equivalent way of expressing the fact that $\sum a_nx^n$ converges to $f(x)$.  

Moreover, for every $x$ in the given a closed interval $\vert x\vert\leq\vert x_1\vert\&lt;R$, we have
\begin{align}
\vert R_n(x)\vert&amp;=\left\vert a_{n+1}x^{n+1}+a_{n+2}x^{n+2}+\ldots\right\vert \\\\ &amp;\leq\left\vert a_{n+1}x^{n+1}\right\vert+\left\vert a_{n+2}x^{n+2}\right\vert+\ldots \\\\ &amp;\leq\left\vert a_{n+1}{x_1}^{n+1}\right\vert+\left\vert a_{n+2}{x_1}^{n+2}\right\vert+\ldots
\end{align}
Because of the [absolute convergence]({% post_url 2021-09-06-infinite-series-of-constants %}#abs-conv) of $\sum a_n{x_1}^n$, the last sum can be made $&lt;\epsilon$ by taking $n$ large enough, $n\geq n_0$. Therefore, we have that \eqref{17} holds for all $x$ inside the closed interval $\vert x\vert\leq\vert x_1\vert$ inside the interval of convergence $(-R,R)$.  

Or in other words, $R_n(x)$ can be made small *independently of $x$ in the given closed interval* $\vert x\vert\leq\vert x_1\vert$, which is equivalent to saying that the series $\sum a_nx^n$ is **uniformly convergent** in this interval[^4].

### Continuity of the Sum
{: #cont-sum}
In order to prove that $f(x)$ is continuous on $(-R,R)$, it suffices to prove that $f(x)$ is continuous at each point $x_0$ in the interval of convergence.  

Consider a closed subinterval $\vert x\vert\leq\vert x_1\vert\&lt;R$ containing $x_0$ in its interior. If $\epsilon&gt;0$ is given, then by uniform convergence we can find an $n$ such that $\vert R_n(x)\vert&lt;\epsilon$ for all $x$&apos;s in the subinterval.  

Since the polynomial $S_n(x)$ is continuous at $x_0$, we can find $\delta&gt;0$ small that $\vert x-x_0\vert&lt;\delta$ implies $x$ lies in the subinterval and $\vert S_n(x)-S_n(x_0)\vert&lt;\epsilon$. Putting these conditions together we find that $\vert x-x_0\vert&lt;\delta$ implies
\begin{align}
\vert f(x)-f(x_0)\vert&amp;=\left\vert S_n(x)+R_n(x)-\left(S_n(x_0)+R_n(x_0)\right)\right\vert \\\\ &amp;=\left\vert\left(S_n(x)-S_n(x_0)\right)+R_n(x)-R_n(x_0)\right\vert \\\\ &amp;\leq\left\vert S_n(x)-S_n(x_0)\right\vert+\left\vert R_n(x)\right\vert+\left\vert R_n(x_0)\right\vert \\\\ &amp;&lt;\epsilon+\epsilon+\epsilon=3\epsilon
\end{align}
which proves the continuity of $f(x)$ at $x_0$.

### Integrating term by term
{: #int}
With what we have just proved that $f(x)=\sum a_nx^n$ is continuous on $(-R,R)$, we can therefore integrate this function between $a$ and $b$ that lie inside the interval
\begin{equation}
\int_{a}^{b}f(x)\,dx=\int_{a}^{b}\left(\sum a_nx^n\right)\,dx
\end{equation}
We need to prove that the right side of this equation can be integrated term by term, which is
\begin{equation}
\int_{a}^{b}f(x)\,dx=\int_{a}^{b}\left(\sum a_nx^n\right)\,dx=\sum\int_{a}^{b}a_nx^n\,dx\tag{18}\label{18}
\end{equation}
In order to prove this, we begin by observing that $S_n(x)$ is a polynomial, and for that reason it is continuous. Thus, all there of the functions in
\begin{equation}
f(x)=S_n(x)+R_n(x)
\end{equation}
are continuous on $(-R,R)$. This allows us to write
\begin{equation}
\int_{a}^{b}f(x)\,dx=\int_{a}^{b}S_n(x)\,dx+\int_{a}^{b}R_n(x)\,dx
\end{equation}
Moreover, we can integrate $S_n(x)$ term by term
\begin{align}
\int_{a}^{b}S_n(x)\,dx&amp;=\int_{a}^{b}\left(a_0+a_1x+a_2x^2+\ldots+a_nx^n\right)\,dx \\\\ &amp;=\int_{a}^{b}a_0\,dx+\int_{a}^{b}a_1x\,dx+\int_{a}^{b}a_2x^2\,dx+\ldots+\int_{a}^{b}a_nx^n\,dx
\end{align}
To prove \eqref{18}, it therefore suffices to show that as $n\to\infty$
\begin{equation}
\int_{a}^{b}R_n(x)\,dx\to 0
\end{equation}
By uniform convergence, if $\epsilon&gt;0$ is given and $\vert x\vert\leq\vert x_1\vert\&lt;R$ is a closed subinterval of $(-R,R)$ that contains both $a,b$, then $\vert R_n(x)\vert&lt;\epsilon$ for all $x$ in the subinterval and $n$ large enough. Hence,
\begin{equation}
\left\vert\int_{a}^{b}R_n(x)\,dx\right\vert\leq\int_{a}^{b}\left\vert R_n(x)\right\vert\,dx&lt;\epsilon\vert b-a\vert
\end{equation}
for any $n$ large enough, which proves our statement.  

As a special case of \eqref{18}, we take the limits $0$ and $x$ instead of $a$ and $b$, and obtain
\begin{align}
\int_{a}^{b}f(t)\,dt&amp;=\sum\dfrac{1}{n+1}a_nx^{n+1} \\\\ &amp;=a_0x+\dfrac{1}{2}a_1x^2+\dfrac{1}{3}a_2x^3+\ldots+\dfrac{1}{n+1}a_nx^{n+1}+\ldots\tag{19}\label{19}
\end{align}

### Differentiating term by term
{: #dif}
We now prove that the function $f(x)$ is not only continuous but also differentiable on $(-R,R)$, and that its derivative can be calculated by differentiating term by term
\begin{equation}
f&apos;(x)=\sum na_nx^{n-1}
\end{equation}
It is easily seen that the series on right side of this equation is exact the series on the right side of \eqref{3}, which is convergent on $(-R,R)$ as we proved. If we denote its sum by $g(x)$
\begin{equation}
g(x)=\sum na_nx^{n-1}=a_1+2a_2x+3a_3x^2+\ldots+na_nx^{n-1}+\ldots,
\end{equation}
then \eqref{19} tells us that
\begin{align}
\int_{0}^{x}g(t)\,dt&amp;=a_1x+a_2x^2+a_3x^3+\ldots \\\\ &amp;=f(x)-a_0
\end{align}
Since the left side of this has a derivative, so does the right side, and by differentiating we obtain
\begin{equation}
f&apos;(x)=g(x)=\sum na_nx^{n-1}
\end{equation}

## References
[1] George F.Simmons. [Calculus With Analytic Geometry - 2nd Edition](https://www.amazon.com/Calculus-Analytic-Geometry-George-Simmons/dp/0070576424)  

[2] Marian M. [A Concrete Approach to Classical Analysis](https://www.springer.com/gp/book/9780387789323)  

[3] MIT 18.01. [Single Variable Calculus](https://ocw.mit.edu/courses/mathematics/18-01-single-variable-calculus-fall-2006/)  


## Footnotes
[^1]: **Theorem** (*L’Hospital*)  
	*Assume $f$ and $g$ are real and differentiable on $]a,b[$ and $g&apos;(x)\neq 0$ for all $x\in]a,b[$, where $-\infty\leq a&lt;b\leq\infty$. Suppose as $x\to a$,
	\begin{equation}
	\dfrac{f&apos;(x)}{g&apos;(x)}\to A\,(\in[-\infty,\infty])
	\end{equation}
	If as $x\to a$, $f(x)\to 0$ and $g(x)\to 0$ or if $g(x)\to+\infty$ as $x\to a$, then
	\begin{equation}
	\dfrac{f(x)}{g(x)}\to A
	\end{equation}
	as $x\to a$.*  

[^2]: **Proof**  
	Consider the function $f(x)=a^x$.  
	Using the definition of the derivative, we have
	\begin{align}
	\dfrac{d}{dx}f(x)&amp;=\lim_{h\to 0}\dfrac{f(x+h)-f(x)}{h} \\\\ &amp;=\lim_{h\to 0}\dfrac{a^{x+h}-a^x}{h} \\\\ &amp;=a^x\lim_{h\to 0}\dfrac{a^h-1}{h}
	\end{align}
	Therefore,
	\begin{equation}
	\lim_{h\to 0}\dfrac{a^h-1}{h}=1
	\end{equation}
	then, let $n=\frac{1}{h}$, we have
	\begin{equation}
	a=\lim_{h\to 0}\left(1+\dfrac{1}{h}\right)^{1/h}=\lim_{n\to\infty}\left(1+\dfrac{1}{n}\right)^n={\rm e}
	\end{equation}
	Thus, $f(x)=a^x={\rm e}^x$. Every function $y=c{\rm e}^x$ also satisfies the differential equation $\frac{dy}{dx}=y$, because
	\begin{equation}
	\dfrac{dy}{dx}=\dfrac{d}{dx}c{\rm e}^x=c\dfrac{d}{dx}{\rm e}^x=c{\rm e}^x=y
	\end{equation}  
	The rest of our proof is to prove that these are only functions that are unchanged by differentiation.  
	To prove this, suppose $f(x)$ is any function with that property. By the quotient rule,
	\begin{equation}
	\dfrac{d}{dx}\dfrac{f(x)}{e^x}=\dfrac{f&apos;(x)e^x-e^x f(x)}{e^{2x}}=\dfrac{e^x f(x)-e^x f(x)}{e^{2x}}=0
	\end{equation}
	which implies that
	\begin{equation}
	\dfrac{f(x)}{e^x}=c,
	\end{equation}
	for some constant $c$, and so $f(x)=ce^x$.  

[^3]: **Theorem** (*Mean Value Theorem*)  
	*If a function $f(x)$ is continuous on the closed interval $[a,b]$ and differentiable in the open interval $(a,b)$, then there exists at least one number $c$ between $a$ and $b$ with the property that*
	\begin{equation}
	f&apos;(c)=\frac{f(b)-f(a)}{b-a}
	\end{equation}  

[^4]: We will talk more about uniform convergence in the post of sequences.</content><author><name>Trung H. Nguyen</name><email>trung.skipper@gmail.com</email></author><category term="mathematics" /><category term="calculus" /><category term="mathematics" /><category term="calculus" /><category term="series" /><category term="power-series" /><category term="taylor-series" /><category term="random-stuffs" /><summary type="html">Recall that in the previous post, Infinite Series of Constants, we mentioned a type of series called power series a lot. In the content of this post, we will be diving deeper into details of that series.</summary></entry><entry><title type="html">Infinite Series of Constants</title><link href="http://localhost:4000/mathematics/calculus/2021/09/06/infinite-series-of-constants.html" rel="alternate" type="text/html" title="Infinite Series of Constants" /><published>2021-09-06T11:20:00+07:00</published><updated>2021-09-06T11:20:00+07:00</updated><id>http://localhost:4000/mathematics/calculus/2021/09/06/infinite-series-of-constants</id><content type="html" xml:base="http://localhost:4000/mathematics/calculus/2021/09/06/infinite-series-of-constants.html">&gt; No idea what to say yet :D

&lt;!-- excerpt-end --&gt;
- [Infinite Series](#infinite-series)
	- [Examples](#examples)
- [Convergent Sequences](#convergent-sequences)
	- [Sequences](#sequences)
	- [Limits of Sequences](#lim-seq)
- [Convergent and Divergent Series](#conv-div-series)
	- [$n$-th term test](#nth-term-test)
- [General Properties of Convergent Series](#gen-props-conv-series)
- [Series of Nonnegative terms. Comparison tests](#series-nonneg-ct)
	- [Comparison test](#comparison-test)
	- [Limit comparison test](#limit-comparison-test)
- [The Integral test. Euler&apos;s constant](#int-test-euler-c)
	- [Integral test](#integral-test)
	- [Euler&apos;s constant](#euler-c)
- [The Ratio test. Root test](#ratio-root)
	- [Ratio test](#ratio-test)
	- [Root test](#root-test)
	- [The Extended Ratio tests of Raabe and Gauss](#extended-ratio-test)
		- [Kummer&apos;s theorem](#kummers-theorem)
		- [Raabe&apos;s test](#raabes-test)
		- [Gauss&apos;s test](#gausss-test)
- [The Alternating Series test. Absolute Convergence](#alt-test-abs-conv)
	- [Alternating Series](#alt-series)
	- [Alternating Series test](#alt-series-test)
	- [Absolute Convergence](#abs-conv)
- [Absolute vs. Conditionally Convergence](#abs-vs-cond)
- [Dirichlet&apos;s test](#dirichlets-test)
	- [Abel&apos;s partial summation formula](#abel-part-sum)
	- [Dirichlet&apos;s test](#d-test)
- [References](#references)
- [Footnotes](#footnotes)


## Infinite Series
An **infinite series**, or simply a **series**, is an expression of the form
\begin{equation}
a_1+a_2+\dots+a_n+\dots=\sum_{n=1}^{\infty}a_n
\end{equation}

### Examples
1. *Infinite decimal*
\begin{equation}
.a_1a_2\ldots a_n\ldots=\dfrac{a_1}{10}+\dfrac{a_2}{10^2}+\ldots+\dfrac{a_n}{10^n}+\ldots,
\end{equation}
where $a_i\in\\{0,1,\dots,9\\}$.  

2. *Power series expansion*[^1]
- Geometric series
\begin{equation}
\dfrac{1}{1-x}=\sum_{n=0}^{\infty}x^n=1+x+x^2+x^3+\dots,\hspace{1cm}\vert x\vert&lt;1
\end{equation}
- Exponential function
\begin{equation}
{\rm e}^x=\sum_{n=0}^{\infty}\dfrac{x^n}{n!}=1+x+\dfrac{x^2}{2!}+\dfrac{x^3}{3!}+\ldots
\end{equation}
- Sine and cosine formulas
\begin{align}
\sin x&amp;=\sum_{n=0}^{\infty}\dfrac{(-1)^n x^{2n+1}}{(2n+1)!}=x-\dfrac{x^3}{3!}+\dfrac{x^5}{5!}-\dfrac{x^7}{7!}+\ldots \\\\ \cos x&amp;=\sum_{n=0}^{\infty}\dfrac{(-1)^n x^{2n}}{(2n)!}=1-\dfrac{x^2}{2!}+\dfrac{x^4}{4!}-\dfrac{x^6}{6!}+\ldots
\end{align}

## Convergent Sequences

### Sequences
If to each positive integer $n$ there corresponds a definite number $x_n$, then the $x_n$&apos;s are said to form a **sequence** (denoted as $\\{x_n\\}$)
\begin{equation}
x_1,x_2,\dots,x_n,\dots
\end{equation}
We call the numbers constructing a sequence its terms, where $x_n$ is the $n$-th term.  

A sequence $\\{x_n\\}$ is said to be *bounded* if there exists $A, B$ such that $A\leq x_n\leq B, \forall n$. $A, B$ respectively are called *lower bound*, *upper bound* of the sequence. A sequence that is not bounded is said to be *unbounded*.

### Limits of Sequences
{: #lim-seq}
A sequence $\\{x_n\\}$ is said to have a number $L$ as **limit** if for each $\epsilon&gt;0$, there exists a positive integer $n_0$ that
\begin{equation}
\vert x_n-L\vert&lt;\epsilon\hspace{1cm}n\geq n_0
\end{equation}
We say that $x_n$ *converges to* $L$ *as* $n$ *approaches infinite* ($x_n\to L$ as $n\to\infty$) and denote this as
\begin{equation}
\lim_{n\to\infty}x_n=L
\end{equation}
- A sequence is said to **converge** or to be **convergent** if it has a limit.  
- A convergent sequence is bounded, but not all bounded sequences are convergent.
- If $x_n\to L,y_n\to M$, then
\begin{align}
&amp;\lim(x_n+y_n)=L+M \\\\ &amp;\lim(x_n-y_n)=L-M \\\\ &amp;\lim x_n y_n=LM \\\\ &amp;\lim\dfrac{x_n}{y_n}=\dfrac{L}{M}\hspace{1cm}M\neq0
\end{align}
- An *increasing* (or *decreasing*) sequence converges if and only if it is bounded.

## Convergent and Divergent Series
{: #conv-div-series}
Recall from the previous sections that if $a_1,a_2,\dots,a_n,\dots$ is a *sequence* of numbers, then
\begin{equation}
\sum_{n=1}^{\infty}a_n=a_1+a_2+\ldots+a_n+\ldots\tag{1}\label{1}
\end{equation}
is called an *infinite series*. We begin by establishing the sequence of *partial sums*
\begin{align}
s_1&amp;=a_1 \\\\ s_2&amp;=a_1+a_2 \\\\ &amp;\,\vdots \\\\ s_n&amp;=a_1+a_2+\dots+a_n \\\\ &amp;\,\vdots
\end{align}
The series \eqref{1} is said to be **convergent** if the sequences $\\{s_n\\}$ converges. And if $\lim s_n=s$, then we say that \eqref{1} converges to $s$, or that $s$ is the sum of the series.
\begin{equation}
\sum_{n=1}^{\infty}a_n=s
\end{equation}
If the series does not converge, we say that it **diverges** or is **divergent**, and no sum is assigned to it.

**Examples** (*harmonic series*)  
Let&apos;s consider the convergence of *harmonic series*
\begin{equation}
\sum_{n=1}^{\infty}\frac{1}{n}=1+\frac{1}{2}+\frac{1}{3}+\ldots\tag{2}\label{2}
\end{equation}
Let $m$ be a positive integer and choose $n&gt;2^{m+1}$. We have
\begin{align}
s_n&amp;&gt;1+\frac{1}{2}+\frac{1}{3}+\frac{1}{4}+\dots+\frac{1}{2^{m+1}} \\\\ &amp;=\left(1+\frac{1}{2}\right)+\left(\frac{1}{3}+\frac{1}{4}\right)+\left(\frac{1}{5}+\ldots+\frac{1}{8}\right)+\ldots+\left(\frac{1}{2^m+1}+\ldots+\frac{1}{2^{m+1}}\right) \\\\ &amp;&gt;\frac{1}{2}+2.\frac{1}{4}+4.\frac{1}{8}+\ldots+2^m.\frac{1}{2^{m+1}} \\\\ &amp;=(m+1)\frac{1}{2}
\end{align}
This proves that $s_n$ can be made larger than the sum of any number of $\frac{1}{2}$&apos;s and therefore as large as we please, by taking $n$ large enough, so the $\\{s_n\\}$ are unbounded, which leads to that \eqref{2} is a divergent series.
\begin{equation}
\sum_{n=1}^{\infty}\frac{1}{n}=1+\frac{1}{2}+\frac{1}{3}+\ldots=\infty
\end{equation}


The simplest general principle that is useful to study the convergence of a series is the **$\mathbf{n}$-th term test**.

### $\mathbf{n}$-th term test
{: #nth-term-test}
If the series $\\{a_n\\}$ converges, then $a_n\to 0$ as $n\to\infty$; or equivalently, if $\neg(a_n\to0)$ as $n\to\infty$, then the series must necessarily diverge.  

**Proof**  
When $\\{a_n\\}$ converges, as $n\to\infty$ we have
\begin{equation}
a_n=s_n-s_{n-1}\to s-s=0
\end{equation}
This result shows that $a_n\to 0$ is a necessary condition for convergence. However, it is not a sufficient condition; i.e., it does not imply the convergence of the series when $a_n\to 0$ as $n\to\infty$.

## General Properties of Convergent Series
{: #gen-props-conv-series}
- Any finite number of 0&apos;s can be inserted or removed anywhere in a series without affecting its convergence behavior or its sum (in case it converges).
- When two convergent series are added term by term, the resulting series converges to the expected sum; i.e., if $\sum_{n=1}^{\infty}a_n=s$ and $\sum_{n=1}^{\infty}b_n=t$, then
\begin{equation}
\sum_{n=1}^{\infty}(a_n+b_n)=s+t
\end{equation}
	- **Proof**  
	Let $\\{s_n\\}$ and $\\{t_n\\}$ respectively be the sequences of partial sums of $\sum_{n=1}^{\infty}a_n$ and $\sum_{n=1}^{\infty}b_n$. As $n\to\infty$ we have
	\begin{align}
	(a_1+b_1)+(a_2+b_2)+\dots+(a_n+b_n)&amp;=\sum_{i=1}^{n}a_i+\sum_{i=1}^{n}b_i \\\\ &amp;=s_n+t_n\to s+t
	\end{align}
- Similarly, $\sum_{n=1}^{\infty}(a_n-b_n)=s-t$ and $\sum_{n=1}^{\infty}ca_n=cs$ for any constant $c$.
- Any finite number of terms can be added or subtracted at the beginning of a convergent series without disturbing its convergence, and the sum of various series are related in the expected way.
	- **Proof**  
	If $\sum_{n=1}^{\infty}a_n=s$, then
	\begin{equation}
	\lim_{n\to\infty}(a_0+a_1+a_2+\dots+a_n)=\lim_{n\to\infty} a_0+\lim_{n\to\infty}(a_1+a_2+\dots+a_n)=a_0+s
	\end{equation}

## Series of Nonnegative terms. Comparison Tests
{: #series-nonneg-ct}
The easiest infinite series to work with are those whose terms are all nonnegative numbers. The reason, as we saw in the above [section](#conv-div-series), is that if $a_n\geq0$, then the series $\sum a_n$ converges if and only if its sequence $\\{s_n\\}$ of partial sums is bounded (since $s_{n+1}=s_n+a_{n+1}$).  

Thus, in order to establish the convergence of a series of nonnegative terms, it suffices to show that its terms approach zero fast enough, or at least as fast as the terms of a known convergent series of nonnegative terms to keep the partial sums bounded.

### Comparison test
If $0\leq a_n\leq b_n$, then
- $\sum a_n$ converges if $\sum b_n$ converges.
- $\sum b_n$ diverges if $\sum a_n$ diverges.  

**Proof**  
If $s_n, t_n$ respectively are the partial sums of $\sum a_n,\sum b_n$, then
\begin{equation}
0\leq s_n=\sum_{i=1}^{n}a_i\leq\sum_{i=1}^{n}b_i=t_n
\end{equation}
Then if $\\{t_n\\}$ is bounded, then so is $\\{s_n\\}$; and if $\\{s_n\\}$ is unbounded, then so is $\\{t_n\\}$.  

**Example**  
Consider convergence behavior of two series
\begin{equation}
\sum_{n=1}^{\infty}\frac{1}{2^n+1};\hspace{2cm}\sum_{n=1}^{\infty}\frac{1}{\ln n}
\end{equation}
The first series converges, because
\begin{equation}
\frac{1}{2^n+1}&lt;\frac{1}{2^n}
\end{equation}
and $\sum_{n=1}^{\infty}\frac{1}{2^n}=1$, which is a convergent series. At the same time, the second series diverges, since
\begin{equation}
\frac{1}{n}\leq\frac{1}{\ln n}
\end{equation}
and $\sum_{n=1}^{\infty}\frac{1}{n}$ diverges.  

One thing worth remarking is that the condition $0\leq a_n\leq b_n$ for the comparison test need not hold for all $n$, but only for all $n$ from some point on.  

The comparison test is simple, but in some cases where it is difficult to establish the necessary inequality between the n-th terms of the two series. And since limits are often easier to work with than inequalities, we have the following test.

### Limit comparison test
If $\sum a_n, \sum b_n$ are series with positive terms such that
\begin{equation}
\lim_{n\to\infty}\frac{a_n}{b_n}=1\tag{3}\label{3}
\end{equation}
then either both series converge or both series diverge.  

**Proof**  
we observe that \eqref{3} implies that for all sufficient large $n$, we have
\begin{align}
\frac{1}{2}&amp;\leq\frac{a_n}{b_n}\leq 2 \\\\ \text{or}\hspace{1cm}\frac{1}{2}b_n&amp;\leq a_n\leq 2b_n
\end{align}
which leads to the fact that $\sum a_n$ and $\sum b_n$ have the same convergence behavior.  

The condition \eqref{3} can be generalized by
\begin{equation}
\lim_{n\to\infty}\frac{a_n}{b_n}=L,
\end{equation}
where $0\&lt;L&lt;\infty$.  

**Example** ($p$*-series*)  
Consider the convergence behavior of the series
\begin{equation}
\sum_{n=1}^{\infty}\dfrac{1}{n^p}=1+\dfrac{1}{2^p}+\dfrac{1}{3^p}+\dfrac{1}{4^p}+\ldots,\tag{4}\label{4}
\end{equation}
where $p$ is a positive constant.  

If $p\leq 1$, then $n^p\leq n$ or $\frac{1}{n}\leq\frac{1}{n^p}$. Thus, by comparison with the harmonic series $\sum\frac{1}{n}$, we have that \eqref{4} diverges.   

If $p&gt;1$, let $n$ be given and choose $m$ so that $n&lt;2^m$. Then
\begin{align}
s_n&amp;\leq s_{2^m-1} \\\\ &amp;=1+\left(\dfrac{1}{2^p}+\dfrac{1}{3^p}\right)+\left(\dfrac{1}{4^p}+\ldots+\dfrac{1}{7^p}\right)+\ldots+\left[\dfrac{1}{(2^{m-1})^p}+\ldots+\dfrac{1}{(2^m-1)^p}\right] \\\\ &amp;\leq 1+\dfrac{2}{2^p}+\dfrac{4}{4^p}+\ldots+\dfrac{2^{m-1}}{(2^{m-1})^p}
\end{align}
Let $a=\frac{1}{2^{p-1}}$, then $a&lt;1$ since $p&gt;1$, and
\begin{equation}
s_n\leq 1+a+a^2+\ldots+a^{m-1}=\dfrac{1-a^m}{1-a}&lt;\dfrac{1}{1-a}
\end{equation}
which proves that $\\{s_n\\}$ has an upper bound. Thus \eqref{4} converges.  

**Theorem 1**  
*If a convergent series of nonnegative terms is rearranged in any manner, then the resulting series also converges and has the same sum.*  

**Proof**  
Consider two series $\sum a_n$ and $\sum b_n$, where $\sum a_n$ is a convergent series of nonnegative terms and $\sum b_n$ is formed form $\sum a_n$ by rearranging its terms.  

Let $p$ be a positive integer and consider the $p$-partial sum $t_p=b_1+\ldots+b_p$ of $\sum b_n$. Since each $b$ is some $a$, then there exists an $m$ such that each term in $t_p$ is one of the terms in $s_m=a_1+\ldots+a_m$. This shows us that $t_p\leq s_m\leq s$. Thus, $\sum b_n$ converges to a sum $t\leq s$.  

On the other hand, $\sum a_n$ is also a rearrangement of $\sum b_n$, so by the same procedure, similarly we have that $s\leq t$, and therefore $t=s$.


## The Integral test. Euler&apos;s constant
{: #int-test-euler-c}
In this section, we will be going through a more detailed class of infinite series with nonnegative terms which is those whose terms form a decreasing sequence of positive numbers.  

We begin by considering a series
\begin{equation}
\sum_{n=1}^{\infty}a_n=a_1+a_2+\ldots+a_n+\ldots
\end{equation}
whose terms are positive and decreasing. Suppose $a_n=f(n)$, as shown is ***Figure 1***.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-09-06/integral-test.png&quot; alt=&quot;integral test&quot; width=&quot;500px&quot; height=&quot;230px&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 1&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

On the left of this figure we see that the rectangles of areas $a_1,a_2,\dots,a_n$ have a greater combined area than the area under the curve from $x=1$ to $x=n+1$, so
\begin{equation}
a_1+a_2+\dots+a_n\geq\int_{1}^{n+1}f(x)\,dx\geq\int_{1}^{n}f(x)\,dx\tag{5}\label{5}
\end{equation}
On the right side of the figure, the rectangles lie under the curve, which makes
\begin{align}
a_2+a_3+\dots+a_n&amp;\leq\int_{1}^{n}f(x)\,dx \\\\ a_1+a_2+\dots+a_n&amp;\leq a_1+\int_{1}^{n}f(x)\,dx\tag{6}\label{6}
\end{align}
Putting \eqref{5} and \eqref{6} together we have
\begin{equation}
\int_{1}^{n}f(x)\,dx\leq a_1+a_2+\dots+a_n\leq a_1+\int_{1}^{n}f(x)\,dx\tag{7}\label{7}
\end{equation}
The result we obtained in \eqref{7} allows us to establish the **integral test**.

### Integral test

If $f(x)$ is a positive decreasing function for $x\geq1$ such that $f(n)=a_n$ for each positive integer $n$, then the series and integral
\begin{equation}
\sum_{n=1}^{\infty}a_n;\hspace{2cm}\int_{1}^{\infty}f(x)\,dx
\end{equation}
converge or diverge together.  

The integral test holds for any interval of the form $x\geq k$, not just for $x\geq 1$.  

**Example** (*Abel&apos;s series*)  
Let&apos;s consider the convergence behavior of the series
\begin{equation}
\sum_{n=2}^{\infty}\frac{1}{n\ln n}\tag{8}\label{8}
\end{equation}
By the integral test, we have that \eqref{8} diverges, because
\begin{equation}
\sum_{2}^{\infty}\frac{dx}{x\ln x}=\lim_{b\to\infty}\int_{2}^{b}\frac{dx}{x\ln x}=\lim_{b\to\infty}\left(\ln\ln x\Big|\_{2}^{b}\right)=\lim_{b\to\infty}\left(\ln\ln b-\ln\ln 2\right)=\infty
\end{equation}
More generally, if $p&gt;0$, then
\begin{equation}
\sum_{n=2}^{\infty}\frac{1}{n(\ln n)^p}
\end{equation}
converges if $p&gt;1$ and diverges if $0\&lt;p\leq 1$. For if $p\neq 1$, we have
\begin{align}
\int_{2}^{\infty}\frac{dx}{x(\ln x)^p}&amp;=\lim_{b\to\infty}\int_{2}^{b}\frac{dx}{x(\ln x)^p} \\\\ &amp;=\lim_{b\to\infty}\left[\dfrac{(\ln x)^{1-p}}{1-p}\Bigg|\_2^b\right] \\\\ &amp;=\lim_{b\to\infty}\left[\dfrac{(\ln b)^{1-p}-(\ln 2)^{1-p}}{1-p}\right]
\end{align}
exists if and only if $p&gt;1$.

### Euler&apos;s constant
{: #euler-c}
From \eqref{7} we have that
\begin{equation}
0\leq a_1+a_2+\ldots+a_n-\int_{1}^{n}f(x)\,dx\leq a_1
\end{equation}
Denoting $F(n)=a_1+a_2+\ldots+a_n-\int_{1}^{n}f(x)\,dx$, the above expression becomes
\begin{equation}
0\leq F(n)\leq a_1
\end{equation}
Moreover, $\\{F(n)\\}$ is a decreasing sequence, because
\begin{align}
F(n)-F(n+1)&amp;=\left[a_1+a_2+\ldots+a_n-\int_{1}^{n}f(x)\,dx\right]-\left[a_1+a_2+\ldots+a_{n+1}-\int_{1}^{n+1}f(x)\,dx\right] \\\\ &amp;=\int_{n}^{n+1}f(x)\,dx-a_{n+1}\geq 0
\end{align}
where the last step can be seen by observing the right side of ***Figure 1***.  

Since any decreasing sequence of nonnegative numbers converges, we have that
\begin{equation}
L=\lim_{n\to\infty}F(n)=\lim_{n\to\infty}\left[a_1+a_2+\ldots+a_n-\int_{1}^{n}f(x)\,dx\right]\tag{9}\label{9}
\end{equation}
exists and satisfies the inequalities $0\leq L\leq a_1$.  

Let $a_n=\frac{1}{n}$ and $f(x)=\frac{1}{x}$, the last quantity in \eqref{9} becomes
\begin{equation}
\lim_{n\to\infty}\left(1+\dfrac{1}{2}+\ldots+\dfrac{1}{n}-\ln n\right)\tag{10}\label{10}
\end{equation}
since
\begin{equation}
\int_{1}^{n}\dfrac{dx}{x}=\ln x\Big|\_1^n=\ln n
\end{equation}
The value of the limit \eqref{10} is called **Euler&apos;s constant** (denoted as $\gamma$).
\begin{equation}
\gamma=\lim_{n\to\infty}\left(1+\dfrac{1}{2}+\ldots+\dfrac{1}{n}-\ln n\right)
\end{equation}

## The Ratio test. Root test
{: #ratio-root}

### Ratio test
If $\sum a_n$ is a series of positive terms such that
\begin{equation}
\lim_{n\to\infty}\dfrac{a_{n+1}}{a_n}=L,\tag{11}\label{11}
\end{equation}
then
1. if $L&lt;1$, the series *converges*.
2. if $L&gt;1$, the series *diverges*.
3. if $L=1$, the test is *inconclusive*.

**Proof**  
1. Let $L&lt;1$ and choose any number $r$ such that $L\&lt;r&lt;1$. From \eqref{11}, we have that there exists an $n_0$ such that
\begin{align}
\dfrac{a_{n+1}}{a_n}&amp;\leq r=\dfrac{r^{n+1}}{r_n},\hspace{1cm}\forall n\geq n_0 \\\\ \dfrac{a_{n+1}}{r^{n+1}}&amp;\leq\dfrac{a_n}{r^n},\hspace{2cm}\forall n\geq n_0
\end{align}
which means that $\\{\frac{a_n}{r^n}\\}$ is a decreasing sequence for $n\geq n_0$; in particular, $\frac{a_n}{r^n}\leq\frac{a_{n_0}}{r^{n_0}}$ for $n\geq n_0$. Thus, if we let $K=\frac{a_{n_0}}{r^{n_0}}$, then we get
\begin{equation}
a_n\leq Kr^n,\hspace{1cm}\forall n\geq n_0\tag{12}\label{12}
\end{equation}
However, $\sum Kr^n$ converges since $r&lt;1$. Hence, by the [comparison test](#comparison-test), \eqref{12} implies that $\sum a_n$ converges.  

2. When $L&gt;1$, we have that $\frac{a_{n+1}}{a_n}\geq 1$, or equivalently $a_{n+1}\geq a_n$, for all $n\geq n_0$, for some constant $n_0$. That means $\neg(a_n\to 0)$ as $n\to\infty$ (since $\sum a_n$ is a series of positive terms).  
By the [$n$-th term test](#nth-term-test), we know that the series diverges.  

3. Consider the $p$-series $\sum\frac{1}{n^p}$. For all values of $p$, as $n\to\infty$ we have
\begin{equation}
\dfrac{a_{n+1}}{a_n}=\dfrac{n^p}{(n+1)^p}=\left(\dfrac{n}{n+1}\right)^p\to 1
\end{equation}
As in the above example, we have that this series converges if $p&gt;1$ and diverges if $p\leq 1$.

### Root test
If $\sum a_n$ is a series of nonnegative terms such that
\begin{equation}
\lim_{n\to\infty}\sqrt[n]{a_n}=L,\tag{13}\label{13}
\end{equation}
then
1. if $L&lt;1$, the series *converges*.
2. if $L&gt;1$, the series *diverges*.
3. if $L=1$, the test is *inconclusive*.

**Proof**
1. Let $L&lt;1$ and $r$ is any number such that $L\&lt;r&lt;1$. From \eqref{13}, we have that there exist $n_0$ such that
\begin{align}
\sqrt[n]{a_n}&amp;\leq r&lt;1,\hspace{1cm}\forall n\geq n_0 \\\\ a_n&amp;\leq r^n&gt;1,\hspace{1cm}\forall n\geq n_0
\end{align}
And since the geometric series $\sum r^n$ converges, we clearly have that $\sum a_n$ also converges.  

2. If $L&gt;1$, then $\sqrt[n]{a_n}\geq 1$ for all $n\geq n_0$, for some $n_0$, so $a_n\geq 1$ for all $n\geq n_0$. That means as $n\to\infty$, $\neg(a_n\to 0)$. Therefore, by the [$n$-th term test](#nth-term-test), we have that the series diverges.  

3. For $L=1$, we provide 2 examples. One is the divergent series $\sum\frac{1}{n}$ and the other is the convergent series $\sum\frac{1}{n^2}$ (since $\sqrt[n]{n}\to 1$ as $n\to\infty$).

### The Extended Ratio tests of Raabe and Gauss
{: #extended-ratio-test}

#### Kummer&apos;s theorem
{: #kummers-theorem}

**Theorem 2** (*Kummer&apos;s*)  
*Assume that $a_n&gt;0,b_n&gt;0$ and $\sum\frac{1}{b_n}$ diverges. If
\begin{equation}
\lim\left(b_n-\dfrac{a_{n+1}}{a_n}.b_{n+1}\right)=L,\tag{14}\label{14}
\end{equation}
then $\sum a_n$ converges if $L&gt;0$ and diverges if $L&lt;0$.*  

**Proof**  
- If $L&gt;0$, then there exists $h$ such that $L&gt;h&gt;0$. From \eqref{14}, for some positive integer $n_0$ we have
\begin{align}
b_n-\dfrac{a_{n+1}}{a_n}.b_{n+1}&amp;\geq h&gt;0,\hspace{1cm}\forall n\geq n_0 \\\\ a_n b_n-a_{n+1}b_{n+1}&amp;\geq ha_n&gt;0,\hspace{1cm}\forall n\geq n_0\tag{15}\label{15}
\end{align}
Hence, $\\{a_n b_n\\}$ is a decreasing sequence of positive numbers for $n\geq n_0$, so $K=\lim a_n b_n$ exists.  
Moreover, we have that
\begin{equation}
\sum_{n=n_0}^{\infty}a_nb_n-a_{n+1}b_{n+1}=a_{n_0}b_{n_0}-\lim_{n\to\infty}a_nb_n=a_{n_0}b_{n_0}-K
\end{equation}
Therefore, by \eqref{15} and the [comparison test](#comparison-test), we can conclude that $\sum ha_n$ converges, which means that $\sum a_n$ also converges.  

- If $L&lt;0$, for some positive integer $n_0$ we have
\begin{equation}
a_nb_n-a_{n+1}b_{n+1}\leq 0,\hspace{1cm}\forall n\geq n_0
\end{equation}
Hence, $\\{a_nb_n\\}$ is a increasing sequence of positive number for all $n\geq n_0$, for some positive integer $n_0$. This also means for all $n\geq n_0$,
\begin{align}
a_nb_n&amp;\geq a_{n_0}b_{n_0} \\\\ a_n&amp;\geq (a_{n_0}b_{n_0}).\dfrac{1}{b_n}
\end{align}
Therefore $\sum a_n$ diverges (since $\sum\frac{1}{b_n}$ diverges).  

#### Raabe&apos;s test
{: #raabes-test}

**Theorem 3** (*Raabe&apos;s test*)  
*If $a_n&gt;0$ and
\begin{equation}
\dfrac{a_{n+1}}{a_n}=1-\dfrac{A}{n}+\dfrac{A_n}{n},
\end{equation}
where $A_n\to 0$, then $\sum a_n$ converges if $A&gt;1$ and diverges if $A&lt;1$.*  

**Proof**  
Take $n=b_n$ in *Kummber&apos;s theorem*. Then
\begin{align}
\lim\left(b_n-\dfrac{a_{n+1}}{a_n}.b_{n+1}\right)&amp;=\lim\left[n-\left(1-\dfrac{A}{n}+\dfrac{A_n}{n}\right)(n+1)\right] \\\\ &amp;=\lim\left[-1+\dfrac{A(n+1)}{n}-\dfrac{A_n(n+1)}{n}\right] \\\\ &amp;=A-1
\end{align}
and by *Kummer&apos;s theorem* we have that $\sum a_n$ converges if $A&gt;1$ and diverges if $A&lt;1$.  

*Raabe&apos;s test* can be formulated as followed: If $a_n&gt;0$ and
\begin{equation}
\lim n\left(1-\dfrac{a_{n+1}}{a_n}\right)=A,
\end{equation}
then $\sum a_n$ converges if $A&gt;1$ and diverges if $A&lt;1$.  

When $A=1$ in *Raabe&apos;s test*, we turn to **Gauss&apos;s test**

#### Gauss&apos;s test
{: #gausss-test}

**Theorem 4**  
*If $a_n&gt;0$ and
\begin{equation}
\dfrac{a_{n+1}}{a_n}=1-\dfrac{A}{n}+\dfrac{A_n}{n^{1+c}},
\end{equation}
where $c&gt;0$ and $A_n$ is bounded as $n\to\infty$, then $\sum a_n$ converges if $A&gt;1$ and diverges if $A\leq 1$.*  

**Proof**  
- If $A\neq 1$, the statement follows exactly from *Raabe&apos;s test*, since $\frac{A_n}{n^c}\to 0$ as $n\to\infty$.  

- If $A=1$, we begin by taking $b_n=n\ln n$ in *Kummer&apos;s theorem*. Then
\begin{align}
\lim\left(b_n-\dfrac{a_{n+1}}{a_n}.b_{n+1}\right)&amp;=\lim\left[n\ln n-\left(1-\dfrac{1}{n}+\dfrac{A_n}{n^{1+c}}\right)(n+1)\ln(n+1)\right] \\\\ &amp;=\lim\left[n\ln n-\dfrac{n^2-1}{n}\ln(n+1)-\dfrac{n+1}{n}.\dfrac{A_n\ln(n+1)}{n^c}\right] \\\\ &amp;=\lim\left[n\ln\left(\dfrac{n}{n+1}\right)+\dfrac{\ln(n+1)}{n}-\dfrac{n+1}{n}.\dfrac{A_n\ln(n+1)}{n^c}\right] \\\\ &amp;=-1+0-0=-1&lt;0,
\end{align}
where in fourth step we use the *Stolz–Cesàro theorem*[^2]. Therefore, by *Kummer&apos;s theorem*, we have that the series is divergent.  

**Theorem 5** (*Gauss&apos;s test*)  
*If $a_n&gt;0$ and
\begin{equation}
\dfrac{a_{n+1}}{a_n}=\dfrac{n^k+\alpha n^{k-1}+\ldots}{n^k+\beta n^{k-1}+\ldots},\tag{16}\label{16}
\end{equation}
then $\sum a_n$ converges if $\beta-\alpha&gt;1$ and diverges if $\beta-\alpha\leq 1$.*  

**Proof**  
If the quotient on the right of \eqref{16} is worked out by long division, we get
\begin{equation}
\dfrac{a_{n+1}}{a_n}=1-\dfrac{\beta-\alpha}{n}+\dfrac{A_n}{n^2},
\end{equation}
where $A_n$ is a quotient of the form
\begin{equation}
\dfrac{\gamma n^{k-2}+\ldots}{n^{k-2}+\ldots}
\end{equation}
and is therefore clearly bounded as $n\to\infty$. The statement now follows from **Theorem 4** with $c=1$.

## The Alternating Series test. Absolute Convergence
{: #alt-test-abs-conv}
Previously, we have been working with series of positive terms and nonnegative terms. It&apos;s time to consider series with both positive and negative terms. The simplest are those whose terms are alternatively positive and negative.

### Alternating Series
{: #alt-series}
**Alternating series** is series with the form
\begin{equation}
\sum_{n=1}^{\infty}(-1)^{n+1}a_n=a_1-a_2+a_3-a_4+\ldots,\tag{17}\label{17}
\end{equation}
where $a_n$&apos;s are all positive numbers.  

From the definition of alternating series, we establish **alternating series test**.

### Alternating Series test
{: #alt-series-test}
If the alternating series \eqref{17} has the property that
1. $a_1\geq a_2\geq a_3\geq\ldots$
2. $a_n\to 0$ as $n\to\infty$  

then $\sum a_n$ converges.  

**Proof**  
On the one hand, we have that a typical even partial sum $s_{2n}$ can be written as
\begin{equation}
s_{2n}=(a_1-a_2)+(a_3-a_4)+\ldots+(a_{2n-1}-a_{2n}),
\end{equation}
where each expression in parentheses is nonnegative since $\\{a_n\\}$ is a decreasing sequence. Hence, we also have that $s_{2n}\leq s_{2n+2}$, which leads to the result that the even partial sums form an increasing sequence.  

Moreover, we can also display $s_{2n}$ as
\begin{equation}
s_{2n}=a_1-(a_2-a_3)-(a_4-a_5)-\ldots-(a_{2n-2}-a_{2n-1})-a_{2n},
\end{equation}
where each expression in parentheses once again is nonnegative. Thus, we have that $s_{2n}\leq a_1$, so ${s_{2n}}$ has an upper bound. Since every bounded increasing sequence converges, there exists a number $s$ such that
\begin{equation}
\lim_{n\to\infty}s_{2n}=s
\end{equation}

On the other hand, the odd partial sums approach the same limit, because
\begin{align}
s_{2n+1}&amp;=a_1-a_2+a_3-a_4+\ldots-a_{2n}+a_{2n+1} \\\\ &amp;=s_{2n}+a_{2n+1}
\end{align}
and therefore
\begin{equation}
\lim_{n\to\infty}s_{2n+1}=\lim_{n\to\infty}s_{2n}+\lim_{n\to\infty}a_{2n+1}=s+0=s
\end{equation}
Since both sequence of even sums and sequence of odd partial sums converges to $s$ as $n$ tends to infinity, this shows us that $\\{s_n\\}$ also converges to $s$, and therefore the alternating series \eqref{17} converges to the sum $s$.

### Absolute Convergence
{: #abs-conv}
A series $\sum a_n$ is said to be **absolutely convergent** if $\sum\vert a_n\vert$ converges.  

These are some properties of absolute convergence.
1. Absolute convergence implies convergence.
- **Proof**  
Suppose that $\sum a_n$ is an absolutely convergent series, or $\sum\vert a_n\vert$ converges. We have that
\begin{equation}
0\leq a_n+\vert a_n\vert\leq 2\vert a_n\vert
\end{equation}
And since $\sum 2\vert a_n\vert$ converges, by [comparison test](#comparison-test), we also have that $\sum(a_n+\vert a_n\vert)$ converges.  
Since both $\sum\vert a_n\vert$ and $\sum(a_n+\vert a_n\vert)$ converge, so does their difference, which is $\sum a_n$.  
&lt;br/&gt;

2. A convergent series that is not absolutely convergent is said to be **conditionally convergent**.
- Any conditionally convergent series can be made to converge to any given number as its sum, or even to diverge, by *suitably changing the order of its terms without changing the terms themselves* (check out **Theorem 8** to see the proof).
- On the other hand, any absolutely convergent series can be rearranged in any manner without changing its convergence behavior or its sum (check out **Theorem 7** to see the proof).

## Absolute vs Conditionally Convergence
{: #abs-vs-cond}
**Theorem 6**  
*Consider a series $\sum a_n$ and define $p_n$ and $q_n$ by
\begin{align}
p_n&amp;=\dfrac{\vert a_n\vert+a_n}{2} \\\\ q_n&amp;=\dfrac{\vert a_n\vert-a_n}{2}
\end{align}
If $\sum a_n$ converges conditionally, then both $\sum p_n$ and $\sum q_n$ diverges.  
If $\sum a_n$ converges absolutely, then $\sum p_n$ and $\sum q_n$ both converge and the sums of these series are related by the equation*
\begin{equation}
\sum a_n=\sum p_n-\sum q_n
\end{equation}

**Proof**  
From the formulas of $p_n$ and $q_n$, we have
\begin{align}
a_n&amp;=p_n-q_n\tag{18}\label{18} \\\\ \vert a_n\vert&amp;=p_n+q_n\tag{19}\label{19}
\end{align}
- We begin by proving the first statement.  
When $\sum a_n$ converges, from \eqref{18}, we have $\sum p_n$ and $\sum q_n$ both must have the same convergence behavior (i.e., converge or diverge at the same time).  
If they both converge, then from \eqref{19}, we have that $\sum\vert a_n\vert$ converges, contrary to the hypothesis, so $\sum p_n$ and $\sum q_n$ are both divergent.  

- To prove the second statement, we assume that $\sum\vert a_n\vert$ converges. We have
\begin{equation}
p_n=\dfrac{\vert a_n\vert+a_n}{2}\leq\dfrac{2\vert a_n\vert}{2}=\vert a_n\vert
\end{equation}
which shows us that $\sum p_n$ converges. Similarly, for $q_n$, we have
\begin{equation}
q_n=\dfrac{\vert a_n\vert-a_n}{2}\leq\dfrac{2\vert a_n\vert}{2}=\vert a_n\vert
\end{equation}
which also lets us obtain that $\sum q_n$ converges.  
Therefore
\begin{equation}
\sum p_n-\sum q_n=\sum(p_n-q_n)=\sum a_n
\end{equation}
&lt;br/&gt;

**Theorem 7**  
*If $\sum a_n$ is an absolutely convergent series with sum $s$, and if $a_n$&apos;s are rearranged in any way to from a new series $\sum b_n$, then this new series is also absolutely convergent with sum $s$.*  

**Proof**  
Since $\sum\vert a_n\vert$ is a convergent series of nonnegative terms with sum $s$ and since the $b_n$&apos;s are just the $a_n$&apos;s in a different order, it follows from **Theorem 1** that $\sum\vert b_n\vert$ also converges to $s$, and therefore $\sum b_n$ is absolutely convergent with sum $t$, for some positive $t$.  

**Theorem 6** allows us to write
\begin{equation}
s=\sum a_n=\sum p_n-\sum q_n
\end{equation}
and
\begin{equation}
t=\sum b_n=\sum P_n-\sum Q_n
\end{equation}
where each of the series on the right is convergent and consists of nonnegative. But the $P_n$&apos;s and $Q_n$&apos;s are simply the $p_n$&apos;s and $q_n$&apos;s in a different order. Hence, by **Theorem 1**, we have $\sum P_n=\sum p_n$ and $\sum Q_n=\sum q_n$. And therefore, $t=s$.  
&lt;br/&gt;

**Theorem 8** (*Riemann&apos;s rearrangement theorem*)  
*Let $\sum a_n$ be a conditionally convergent series. Then its terms can be rearranged to yield a convergent series whose sum is an arbitrary preassigned number, or a series that diverges to $\infty$, or a series that diverges to $-\infty$.*

**Proof**  
Since $\sum a_n$ converges conditionally, we begin by using **Theorem 6** to form the two divergent series of nonnegative terms $\sum p_n$ and $\sum q_n$.
- To prove the first statement, let $s$ be any number and construct a rearrangement of the given series as follows. Start by writing down $p$&apos;s in order until the partial sum
\begin{equation}
p_1+p_2+\ldots+p_{n_1}
\end{equation}
is first $\geq s$; next we continue with $-q$&apos;s until the total partial sum
\begin{equation}
p_1+p_2+\ldots+p_{n_1}-q_1-q_2-\ldots-q_{m_1}
\end{equation}
is first $\leq s$; then we continue with $p$&apos;s until the total partial sum
\begin{equation}
p_1+\ldots+p_{n_1}-q_1-\ldots-q_{m_1}+p_{n_1+1}+\ldots+p_{n_2}
\end{equation}
is first $\geq s$; and so on.  
The possibility of each of these steps is guaranteed by the divergence of $\sum p_n$ and $\sum q_n$; and the resulting rearrangement of $\sum a_n$ converges to $s$ because $p_n\to 0$ and $q_n\to 0$.  

- In order to make the rearrangement diverge to $\infty$, it suffices to write down enough $p$&apos;s to yield
\begin{equation}
p_1+p_2+\ldots+p_{n_1}\geq 1,
\end{equation}
then to insert $-q_1$, and then to continue with $p$&apos;s until
\begin{equation}
p_1+\ldots+p_{n_1}-q_1+p_{n_1+1}+\ldots+p_{n_2}\geq 2,
\end{equation}
then to insert $-q_2$, and so on.  
We can produce divergence to $-\infty$ by a similar construction.  

One of the principal application of **Theorem 7** relates to the *multiplication of series*.  

If we multiply two series
\begin{align}
\sum_{n=0}^{\infty}a_n&amp;=a_0+a_1+\ldots+a_n+\ldots\tag{20}\label{20} \\\\ \sum_{n=0}^{\infty}b_n&amp;=b_0+b_1+\ldots+b_n+\ldots\tag{21}\label{21}
\end{align}
by forming all possible product $a_i b_j$ (as in the case of finite sums), then we obtain the following doubly infinite array
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-09-06/series-mult.png&quot; alt=&quot;series multiplication&quot; width=&quot;300px&quot; height=&quot;210px&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 2&lt;/b&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

There are various ways of arranging these products into a single infinite series, of which two are important. The first one is to group them by diagonals, as indicated in the arrows in **Figure 2**:
\begin{equation}
a_0b_0+(a_0b_1+a_1b_1)+(a_0b_2+a_1b_1+a_2b_0)+\ldots\tag{22}\label{22}
\end{equation}
This series can be defined as $\sum_{n=0}^{\infty}c_n$, where
\begin{equation}
c_n=a_0b_n+a_1b_{n-1}+\ldots+a_nb_0
\end{equation}

It is called the *product* (or *Cauchy product*) of the two series $\sum a_n$ and $\sum b_n$.  

The second crucial method of arranging these products into a series is by squares, as shown in **Figure 2**:
\begin{equation}
a_0b_0+(a_0b_1+a_1b_1+a_1b_0)+(a_0b_2+a_1b_2+a_2b_2+a_2b_1+a_2b_0)+\ldots\tag{23}\label{23}
\end{equation}
The advantage of this arrangement is that the $n$-th partial sum $s_n$ of \eqref{23} is given by
\begin{equation}
s_n=(a_0+a_1+\ldots+a_n)(b_0+b_1+\ldots+b_n)\tag{24}\label{24}
\end{equation}
&lt;br/&gt;

**Theorem 9**  
*If the two series \eqref{20} and \eqref{21} have nonnegative terms and converges to $s$ and $t$, then their product \eqref{22} converges to $st$.*  

**Proof**  
It is clear from \eqref{24} that \eqref{23} converges to $st$. Let&apos;s denote the series \eqref{22} and \eqref{23} without parenthesis by $(22&apos;)$ and $(23&apos;)$.  

We have the series $(23&apos;)$ of nonnegative terms still converges to $st$ because, for if $m$ is an integer such that $n^2\leq m\leq (n+1)^2$, then the $m$-th partial sum of $(23&apos;)$ lies between $s_{n-1}$ and $s_n$, and both of these converge to $st$.  

By **Theorem 7**, the terms of $(23&apos;)$ can be rearranged to yield $(22&apos;)$ without changing the sum $st$; and when parentheses are suitably inserted, we see that \eqref{8} converges to $st$.  

We now extend **Theorem 9** to the case of absolute convergence.  
&lt;br/&gt;

**Theorem 10**  
*If the series $\sum_{n=0}^{\infty}a_n$ and $\sum_{n=0}^{\infty}b_n$ are absolutely convergent, with sum $s$ and $t$, then their product
\begin{multline}
\sum_{n=0}^{\infty}(a_0b_n+a_1b_{n-1}+\ldots+a_nb_0)=a_0b_0+(a_0b_1+a_1b_0)\,+ \\\\ (a_0b_2+a_1b_1+a_2b_0)+\ldots+(a_0b_n+a_1b_{n-1}+\ldots+a_nb_0)+\ldots\tag{25}\label{25}
\end{multline}
is absolutely convergent, with sum $st$.*  

**Proof**  
The series $\sum_{n=0}^{\infty}\vert a_n\vert$ and $\sum_{n=0}^{\infty}\vert b_n\vert$ are convergent and have nonnegative terms. So by the **Theorem 9** above, their product
\begin{multline}
\vert a_0\vert\vert b_0\vert+\vert a_0\vert\vert b_1\vert+\vert a_1\vert\vert b_0\vert+\ldots+\vert a_0\vert\vert b_n\vert+\vert a_1\vert\vert b_{n-1}\vert+\ldots+\vert a_n\vert\vert b_0\vert+\ldots \\\\ =\vert a_0b_0\vert+\vert a_0b_1\vert+\vert a_1b_0\vert+\ldots+\vert a_0b_n\vert+\vert a_1b_{n-1}\vert+\ldots+\vert a_nb_0\vert+\ldots\tag{26}\label{26}
\end{multline}
converges, and therefore the series
\begin{equation}
a_0b_0+a_0b_1+a_1b_0+\ldots+a_0b_n+\ldots+a_nb_0+\ldots\tag{27}\label{27}
\end{equation}
is absolutely convergent. It follows from **Theorem 7** that the sum of \eqref{27} will not change if we rearrange its terms and write it as
\begin{equation}
a_0b_0+a_0b_1+a_1b_1+a_1b_0+a_0b_2+a_1b_2+a_2b_2+a_2b_1+a_2b_0+\ldots\tag{28}\label{28}
\end{equation}
We now observe that the sum of the first $(n+1)^2$ terms of \eqref{28} is
\begin{equation}
(a_0+a_1+\ldots+a_n)(b_0+b_1+\ldots+b_n),
\end{equation}
so it is clear that \eqref{28}, and with it \eqref{27}, converges to $st$.  

Thus, \eqref{25} also converges to $st$, since \eqref{25} is retrieved by suitably inserted parentheses in \eqref{27}.  

Moreover, we also have
\begin{equation}
\vert a_0b_n+a_1b_{n-1}+\ldots+a_nb_0\vert\leq\vert a_0b_n\vert+\vert a_1b_{n-1}\vert+\ldots+\vert a_nb_0\vert
\end{equation}
and the series
\begin{equation}
\vert a_0b_0\vert+(\vert a_0b_1\vert+\vert a_1b_0\vert)+\ldots+(\vert a_0b_n\vert+\ldots+\vert a_nb_0\vert)+\ldots
\end{equation}
obtained from \eqref{26} by inserting parentheses. By the [comparison test](#comparison-test), \eqref{25} converges absolutely.  

Hence, we can conclude that \eqref{25} is absolutely convergent, with sum $st$.  
&lt;br/&gt;

We have already gone through convergence tests applied only to series of positive (or nonnegative) terms. Let&apos;s end this lengthy post with the alternating series test. ^^!

## Dirichlet&apos;s test
{: #dirichlets-test}

### Abel&apos;s partial summation formula
{: #abel-part-sum}
Consider series $\sum_{n=1}^{\infty}a_n$, sequence $\\{b_n\\}$. If $s_n=a_1+a_2+\ldots+a_n$, then
\begin{equation}
a_1b_1+a_2b_2+\ldots+a_nb_n=s_1(b_1-b_2)+s_2(b_2-b_3)+\ldots+s_{n-1}(b_{n-1}-b_n)+s_nb_n\tag{29}\label{29}
\end{equation}

**Proof**  
Since $a_1=s_1$ and $a_n=s_n-s_{n-1}$ for $n&gt;1$, we have
\begin{align}
a_1b_1&amp;=s_1b_1 \\\\ a_2b_2&amp;=s_2b_2-s_1b_2 \\\\ a_3b_3&amp;=s_3b_3-s_2b_3 \\\\ &amp;\vdots \\\\ a_nb_n&amp;=s_nb_n-s_{n-1}b_n
\end{align}
On adding these equations, and grouping suitably, we obtain \eqref{29}.

### Dirichlet&apos;s test
{: #d-test}
*If the series $\sum_{n=1}^{\infty}a_n$ has bounded partial sums, and if $\\{b_n\\}$ is a decreasing sequence of positive numbers such that $b_n\to 0$, then the series
\begin{equation}
\sum_{n=1}^{\infty}a_nb_n=a_1b_1+a_2b_2+\ldots+a_nb_n+\ldots\tag{30}\label{30}
\end{equation}
converges*.  

**Proof**  
Let $S_n=a_1b_1+a_2b_2+\ldots+a_nb_n$ denote the $n$-th partial sum of \eqref{30}, then \eqref{29} tells us that
\begin{equation}
S_n=T_n+s_nb_n,
\end{equation}
where
\begin{equation}
T_n=s_1(b_1-b_2)+s_2(b_2-b_3)+\ldots
\end{equation}
Since ${s_n}$ is bounded there exists a positive constant $m$ such that $\vert s_n\vert\leq m,\forall n$, so $\vert s_nb_n\vert\leq mb_n$. And since $b_n\to 0$, we have that $s_nb_n\to 0$ as $n\to\infty$.  

Moreover, since $\\{b_n\\}$ is a decreasing sequence of positive numbers, we have that
\begin{equation}
\begin{aligned}
\vert s_1(b_1-b_2)\vert+\vert s_2(b_3-b_3)\vert+\ldots&amp;\,+\vert s_{n-1}(b_{n-1}-b_n)\vert \\\\ &amp;\leq m(b_1-b_2)+m(b_2-b_3)+\ldots+m(b_{n-1}-b_n) \\\\ &amp;=m(b_1-b_n)\leq mb_1
\end{aligned}
\end{equation}
which implies that $T_n=s_1(b_1-b_2)+s_2(b_2-b_3)+\ldots$ converges absolutely, and thus, it converges to a sum $t$. Therefore
\begin{equation}
\lim_{n\to\infty}S_n=\lim_{n\to\infty}T_n+s_nb_n=\lim_{n\to\infty}T_n+\lim_{n\to\infty}s_nb_n=t+0=t
\end{equation}
which lets us conclude that the series \eqref{30} converges.

## References
[1] George F.Simmons. [Calculus With Analytic Geometry - 2nd Edition](https://www.amazon.com/Calculus-Analytic-Geometry-George-Simmons/dp/0070576424)  

[2] Marian M. [A Concrete Approach to Classical Analysis](https://www.springer.com/gp/book/9780387789323)  

[3] MIT 18.01. [Single Variable Calculus](https://ocw.mit.edu/courses/mathematics/18-01-single-variable-calculus-fall-2006/)  

## Footnotes
[^1]: We will be going through power series in more detailed in another [post]({% post_url 2021-09-21-power-series %}).
[^2]: **Theorem** (*Stolz–Cesaro*)  
	*Let $\\{a_n\\}$ be a sequence of real numbers and $\\{b_n\\}$ be a strictly monotone and divergent sequence. Then
	\begin{equation}
	\lim_{n\to\infty}\dfrac{a_{n+1}-a_n}{b_{n+1}-b_n}=L\hspace{1cm}(\in\left[-\infty,+\infty\right])
	\end{equation}
	implies
	\begin{equation}
	\lim_{n\to\infty}\dfrac{a_n}{b_n}=L
	\end{equation}*</content><author><name>Trung H. Nguyen</name><email>trung.skipper@gmail.com</email></author><category term="mathematics" /><category term="calculus" /><category term="mathematics" /><category term="calculus" /><category term="series" /><category term="random-stuffs" /><summary type="html">No idea what to say yet :D</summary></entry><entry><title type="html">Monte Carlo Methods in Reinforcement Learning</title><link href="http://localhost:4000/artificial-intelligent/reinforcement-learning/2021/08/21/monte-carlo-in-rl.html" rel="alternate" type="text/html" title="Monte Carlo Methods in Reinforcement Learning" /><published>2021-08-21T13:03:00+07:00</published><updated>2021-08-21T13:03:00+07:00</updated><id>http://localhost:4000/artificial-intelligent/reinforcement-learning/2021/08/21/monte-carlo-in-rl</id><content type="html" xml:base="http://localhost:4000/artificial-intelligent/reinforcement-learning/2021/08/21/monte-carlo-in-rl.html">&gt; Recall that in the previous post, [**Dynamic Programming Algorithms for Solving Markov Decision Processes**]({% post_url 2021-07-25-dp-in-mdp %}), we made an assumption about the complete knowledge of the environment. With **Monte Carlo** methods, we only require *experience* - sample sequences of states, actions, and rewards from simulated or real interaction with an environment.

&lt;!-- excerpt-end --&gt;
- [Monte Carlo Methods](#mc-methods)
- [Monte Carlo Methods in Reinforcement Learning](#mc-rl)
	- [Monte Carlo Prediction](#mc-prediction)
		- [First-visit MC vs. every-visit MC](#first-mc-every-mc)
	- [Monte Carlo Control](#mc-control)
		- [Monte Carlo Estimation of Action Values](#mc-est-action-value)
			- [Exploring Starts](#es)
		- [Monte Carlo Policy Iteration](#mc-policy-iteration)
	- [On-policy Monte Carlo Control](#on-policy-mc-control)
	- [Off-policy Monte Carlo Prediction](#off-policy-mc-pred)
		- [Assumption of Coverage](#coverage)
		- [Importance Sampling](#is)
		- [Off-policy Monte Carlo Prediction via Importance Sampling](#is-off-policy)
		- [Incremental Implementation for Off-policy MC Prediction using IS](#imp-off-policy-is)
			- [Incremental Method](#incremental-method)
			- [Applying to Off-policy MC Prediction using IS](#applying-off-policy-is)
	- [Off-policy Monte Carlo Control](#off-policy-mc-control)
		- [Example - Racetrack](#example)
	- [Discounting-aware Importance Sampling](#discounting-aware-is)
	- [Per-decision Importance Sampling](#per-decision-is)
- [References](#references)
- [Footnotes](#footnotes)



## Monte Carlo Methods[^1]
{: #mc-methods}
**Monte Carlo**, named after a casino in Monaco, simulates complex probabilistic events using simple random events, such as tossing a pair of dice to simulate the casino&apos;s overall business model.

&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-08-21/mc-pi.gif&quot; alt=&quot;monte carlo method&quot; width=&quot;480&quot; height=&quot;360px&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 1&lt;/b&gt;: Using Monte Carlo method to approximate the value of $\pi$. The code can be found &lt;span markdown=&quot;1&quot;&gt;[here](https://github.com/trunghng/maths-visualization/blob/main/monte-carlo/monte_carlo_pi.py)&lt;/span&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;br/&gt;

Monte Carlo methods have been used in several different tasks:
1. Simulating a system and its probability distribution $\pi(x)$
\begin{equation}
x\sim\pi(x)
\end{equation}
2. Estimating a quantity through Monte Carlo integration
\begin{equation}
c=\mathbb{E}\_\pi\left[f(x)\right]=\int\pi(x)f(x)\,dx
\end{equation}
3. Optimizing a target function to find its modes (maxima or minima)
\begin{equation}
x^\*=\arg\max\pi(x)
\end{equation}
4. Learning a parameters from a training set to optimize some loss functions, such as the maximum likelihood estimation from a set of examples $\\{x_i,i=1,2,\dots,M\\}$
\begin{equation}
\Theta^\*=\arg\max\sum_{i=1}^{M}\log p(x_i;\Theta)
\end{equation}
5. Visualizing the energy landscape of a target function


## Monte Carlo Methods in Reinforcement Learning
{: #mc-rl}
Monte Carlo (MC) methods are ways of solving the reinforcement learning problem based on averaging sample returns. Here, we define Monte Carlo methods only for episodic tasks. Or in other words, they learn from complete episodes of experience.

### Monte Carlo Prediction[^2]
{: #mc-prediction}
Since the value of a state $v_\pi(s)=\mathbb{E}\_\pi\left[G_t|S_t=s\right]$ is defined as the expectation of the return when the process is started from the given state $s$, an obvious way of estimating this value from experience is to compute observed mean returns after visits to that state. As more returns are observed, the average should converge to the expected value. This is an instance of the so-called *Monte Carlo method*.  

In particular, suppose we wish to estimate $v_\pi(s)$ given a set of episodes obtained by following $\pi$ and passing through $s$. Each time state $s$ appears in an episode, we call it a *visit* to $s$. There are two types of Monte Carlo methods:
- *First-visit MC method*
	- estimates $v_\pi(s)$ as the average of the returns that have followed the *first visit* to $s$.
	- We call the first time $s$ is visited in an episode the *first visit* to $s$.
- *Every-visit MC method*
	- estimates $v_\pi(s)$ as the average of the returns that have followed all visits to to $s$.  

The sample mean return for state $s$ is:
\begin{equation}
v_\pi(s)=\dfrac{\sum_{t=1}^{T}𝟙\left(S_t=s\right)G_t}{\sum_{t=1}^{T}𝟙\left(S_t=s\right)},
\end{equation}
where $𝟙(\cdot)$ is an indicator function. In the case of *first-visit MC*, $𝟙\left(S_t=s\right)$ returns $1$ only in the first time $s$ is encountered in an episode. And for *every-visit MC*, $𝟙\left(S_t=s\right)$ gives value of $1$ every time $s$ is visited.  

Here is pseudocode of the *first-visit MC prediction*, for estimating $V\approx v_\pi$
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-08-21/mc-prediction.png&quot; alt=&quot;iterative policy evaluation pseudocode&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

#### First-visit MC vs. every-visit MC
{: #first-mc-every-mc}
Both methods converge to $v_\pi(s)$ as the number of visits (or first visits) to $s$ goes to infinity. Each average is itself an unbiased estimate, and the standard deviation of its error falls as $\frac{1}{\sqrt{n}}$, where $n$ is the number of returns averaged.

&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-08-21/first-visit-every-visit.png&quot; alt=&quot;first-visit MC vs every-visit MC&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 2&lt;/b&gt;: Summary of Statistical Results comparing first-visit and every-visit MC method&lt;/figcaption&gt;
&lt;/figure&gt;&lt;br/&gt;

### Monte Carlo Control[^3]
{: #mc-control}

#### Monte Carlo Estimation of Action Values
{: #mc-est-action-value}
When model is not available, it is particular useful to estimate *action values* rather than *state values* (which alone are insufficient to determine a policy). We must explicitly estimate the value of each action in order for the values to be useful in suggesting a policy. Thus, one of our primary goals for MC methods is to estimate $q_\*$. To achieve this, we first consider the policy evaluation problem for action values.  

Similar to when using MC method to estimate $v_\pi(s)$, we can use both first-visit MC and every-visit MC to approximate the value of $q_\pi(s,a)$. The only thing we need to keep in mind is, in this case, we work with visits to a state-action pair rather than to a state. Likewise, we define two types of MC methods for estimating $q_\pi(s,a)$:
- *First-visit MC method*
	- estimates $q_\pi(s,a)$ as the average of the returns following the first time in each episode that the state $s$ was visited and the action $a$ was selected
- *Every-visit MC method*
	- estimates $q_\pi(s,a)$ as the average of the returns that have followed all the visits to state-action pair $(s,a)$.  

##### Exploring Starts
{: #es}
However, here we must exercise *exploration*. Because many state-action pairs may never be visited, and if $\pi$ is a deterministic policy, then returns of only single one action for each state will be observed. That leads to the consequence that the other actions will not be evaluated since there are no returns to average.  

There is one way to achieve this, which is called *exploring starts* - an assumption that assumes the episodes *start in a state-action pair*, and that every pair has a *nonzero* probability of being selected as the start. This assumption assures that all state-action pairs will be visited an infinite number of times in the limit of an infinite number of episodes.

#### Monte Carlo Policy Iteration
{: #mc-policy-iteration}
To learn the optimal policy by MC, we apply the idea of [GPI]({% post_url 2021-07-25-dp-in-mdp %}#gpi):
\begin{equation}
\pi_0\overset{\small \text{E}}{\rightarrow}q_{\pi_0}\overset{\small \text{I}}{\rightarrow}\pi_1\overset{\small \text{E}}{\rightarrow}q_{\pi_1}\overset{\small \text{I}}{\rightarrow}\pi_2\overset{\small \text{E}}{\rightarrow}\dots\overset{\small \text{I}}{\rightarrow}\pi_\*\overset{\small \text{E}}{\rightarrow}q_\*
\end{equation}
In particular,
1. *Policy evaluation* (denoted as $\overset{\small\text{E}}{\rightarrow}$): estimates action value function $q_\pi(s,a)$ using the episode generated from $s, a$, following by current policy $\pi$
\begin{equation}
q_\pi(s,a)=\dfrac{\sum_{t=1}^{T}𝟙\left(S_t=s,A_t=a\right)G_t}{\sum_{t=1}^{T}𝟙\left(S_t=s,A_t=a\right)}
\end{equation}
2. *Policy improvement* (denoted as $\overset{\small\text{I}}{\rightarrow}$): makes the policy *greedy* with the current value function (action value function in this case)
\begin{equation}
\pi(s)\doteq\arg\max_{a\in\mathcal{A(s)}} q(s,a)
\end{equation}
The policy improvement can be done by constructing each $\pi_{k+1}$ as the greedy policy w.r.t $q_{\pi_k}$ because
\begin{align}
q_{\pi_k}\left(s,\pi_{k+1}(s)\right)&amp;=q_{\pi_k}\left(s,\arg\max_a q_{\pi_k}(s,a)\right) \\\\ &amp;=\max_a q_{\pi_k}(s,a) \\\\ &amp;\geq q_{\pi_k}\left(s,\pi_k(s)\right) \\\\ &amp;\geq v_{\pi_k}(s)
\end{align}
Therefore, by the [policy improvement theorem]({% post_url 2021-07-25-dp-in-mdp %}#policy-improvement), we have that $\pi_{k+1}\geq\pi_k$.  
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-08-21/gpi.png&quot; alt=&quot;GPI&quot; width=&quot;150&quot; height=&quot;150px&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 3&lt;/b&gt;: MC policy iteration&lt;/figcaption&gt;
&lt;/figure&gt;&lt;br/&gt;
To solve this problem with Monte Carlo policy iteration, in the 1998 version of &apos;&apos;*Reinforcement Learning: An Introduction*&quot;, authors of the book introduced **Monte Carlo ES** (MCES), for Monte Carlo with *Exploring Starts*.  

In MCES, value function is approximated by simulated returns and a greedy policy is selected at each iteration. Although MCES does not converge to any sub-optimal policy, the convergence to optimal fixed point is still an open question. For solutions in particular settings, you can check out some results like Tsitsiklis (2002), Chen (2018), Liu (2020).  
Down below is pseudocode of the Monte Carlo ES.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-08-21/mces.png&quot; alt=&quot;monte carlo es pseudocode&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

### On-policy Monte Carlo Control[^4]
{: #on-policy-mc-control}
In the previous section, we used the assumption of [exploring starts](#es) (ES) to design a Monte Carlo control method called MCES. In this part, without making that impractical assumption, we will be talking about another Monte Carlo control method.  

In *on-policy control methods*, the policy is generally *soft* (i.e., $\pi(a|s)&gt;0,\forall s\in\mathcal{S},a\in\mathcal{A(s)}$, but gradually shifted closer and closer to a deterministic optimal policy). We can not simply improve the policy by following a greedy policy, since no exploration will take place. Then to get rid of ES, we use the on-policy MC method with $\varepsilon$-*greedy* policies, e.g, most of the time they choose an action that maximal estimated action value, but with probability of $\varepsilon$ they instead select an action at random. Specifically,
- $Pr(\small\textit{non-greedy action})=\dfrac{\varepsilon}{\vert\mathcal{A(s)}\vert}$
- $Pr(\small\textit{greedy action})=1-\varepsilon+\dfrac{\varepsilon}{\vert\mathcal{A(s)}\vert}$  

The $\varepsilon$-greedy policies are examples of $\varepsilon$-*soft* policies, defined as ones for which $\pi(a\vert s)\geq\frac{\varepsilon}{\vert\mathcal{A(s)}\vert}$ for all states and actions, for some $\varepsilon&gt;0$. Among $\varepsilon$-soft policies, $\varepsilon$-greedy policies are in some sense those that closest to greedy.  

We have that any $\varepsilon$-greedy policy w.r.t $q_\pi$ is an *improvement* over any $\varepsilon$-soft policy is assured by the [policy improvement theorem]({% post_url 2021-07-25-dp-in-mdp %}#policy-improvement).  

**Proof**  
Let $\pi&apos;$ be the $\varepsilon$-greedy. The conditions of the policy improvement theorem apply because for any $s\in\mathcal{S}$, we have:
\begin{align}
q_\pi\left(s,\pi&apos;(s)\right)&amp;=\sum_a\pi&apos;(a|s)q_\pi(s,a) \\\\ &amp;=\dfrac{\varepsilon}{\vert\mathcal{A}(s)\vert}\sum_a q_\pi(s,a)+(1-\varepsilon)\max_a q_\pi(s,a) \\\\ &amp;\geq\dfrac{\varepsilon}{\vert\mathcal{A(s)}\vert}\sum_a q_\pi(s,a)+(1-\varepsilon)\sum_a\dfrac{\pi(a|s)-\frac{\varepsilon}{\vert\mathcal{A}(s)\vert}}{1-\varepsilon}q_\pi(s,a) \\\\ &amp;=\dfrac{\varepsilon}{\vert\mathcal{A}(s)\vert}\sum_a q_\pi(s,a)+\sum_a\pi(a|s)q_\pi(s,a)-\dfrac{\varepsilon}{\vert\mathcal{A}(s)\vert}\sum_a q_\pi(s,a) \\\\ &amp;=v_\pi(s)
\end{align}
(In the third step, we use the fact that the latter $\sum$ is a weighted average over $q_\pi(s,a)$). Thus, by the theorem, $\pi&apos;\geq\pi$. The equality holds when both $\pi&apos;$ and $\pi$ are optimal policies among the $\varepsilon$-soft ones.  

Pseudocode of the complete algorithm is given below.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-08-21/on-policy-mc-control.png&quot; alt=&quot;monte carlo es pseudocode&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

### Off-policy Monte Carlo Prediction[^5]
{: #off-policy-mc-pred}
When working with control methods, we have to solve a dilemma about *exploitation* and *exploration*. In other words, we have to evaluate a policy from episodes generated by following an exploratory policy.  

A straightforward way to solve this problem is to use two different policies, one that is learned about and becomes the optimal policy, and one that is more exploratory and is used to generate behavior. The policy is being learned about is called the *target policy*, whereas *behavior policy* is the one which is used to generate behavior.  

In this section, we will be considering the off-policy method on prediction task, on which both target (denoted as $\pi$) and behavior (denoted as $b$) policies are fixed and given. Particularly, we wish to estimate $v_\pi$ or $q_\pi$ from episodes retrieved from following another policy $b$, where $\pi\neq b$.  

#### Assumption of Coverage
{: #coverage}
In order to use episodes from $b$ to estimate values for $\pi$, we require that every action taken under $\pi$ is also taken, at least occasionally, under $b$. That means, we assume that $\pi(a|s)&gt;0$ implies $b(s|a)&gt;0$, which leads to a result that $b$ must be stochastic, while $\pi$ may be deterministic since $\pi\neq b$. This is the assumption of **coverage**.

#### Importance Sampling
{: #is}
Let $X$ be a variable (or set of variables) that takes on values in some space $\textit{Val}(X)$. **Importance sampling** (IS) is a general approach for estimating the expectation of a function $f(x)$ relative to some distribution $P(X)$, typically called the *target distribution*. We can estimate this expectation by generating samples $x[1],\dots,x[M]$ from $P$, and then estimating
\begin{equation}
\mathbb{E}\_P\left[f\right]\approx\dfrac{1}{M}\sum_{m=1}^{M}f(x[m])
\end{equation}
In some cases, it might be impossible or computationally very expensive to generate samples from $P$, we instead prefer to generate samples from a different distribution, $Q$, known as the *proposal distribution* (or *sampling distribution*).
1. **Unnormalized Importance Sampling**  
If we generate samples from $Q$ instead of $P$, we cannot simply average the $f$-value of the samples generated. We need to adjust our estimator to compensate for the incorrect sampling distribution. The most obvious way of adjusting our estimator is based on the observation that
\begin{align}
\mathbb{E}\_{P(X)}\left[f(X)\right]&amp;=\sum_x f(x)P(x) \\\\ &amp;=\sum_x Q(x)f(x)\dfrac{P(x)}{Q(x)} \\\\ &amp;=\mathbb{E}\_{Q(X)}\left[f(X)\dfrac{P(X)}{Q(X)}\right]\tag{1}\label{1}
\end{align}
Based on this observation \eqref{1}, we can use the standard estimator for expectations relative to $Q$. We generate a set of sample $\mathcal{D}=\\{x[1],\dots,x[M]\\}$ from $Q$, and then estimate:
\begin{equation}
\hat{\mathbb{E}}\_\mathcal{D}(f)=\dfrac{1}{M}\sum_{m=1}^{M}f(x[m])\dfrac{P(x[m])}{Q(x[m])}\tag{2}\label{2},
\end{equation}
where $\hat{\mathbb{E}}$ denotes empirical expectation. We call this estimator the **unnormalized importance sampling estimator**, this method is also often called **unweighted importance sampling**. The factor $\frac{P(x[m])}{Q(x[m])}$ (denoted as $w(x[m])$) can be viewed as a correction weight to the term $f(x[m])$, which we would have used had $Q$ been our target distribution.  

2. **Normalized Importance Sampling**  
In many situations, we have that $P$ is known only up to a normalizing constant $Z$. Particularly, what we have access to is a distribution $\tilde{P}(X)=ZP(X)$.  
Thus, rather than to define the weights relative to $P$ as above, we define:
\begin{equation}
w(X)\doteq\dfrac{\tilde{P}(X)}{Q(X)}
\end{equation}
We have that the weight $w(X)$ is a random variable, and has expected value equal to $Z$:
\begin{equation}
\mathbb{E}\_{Q(X)}\left[w(X)\right]=\sum_x Q(x)\dfrac{\tilde{P}(x)}{Q(x)}=\sum_x\tilde{P}(x)=Z
\end{equation}
Hence, this quantity is the normalizing constant of the distribution $\tilde{P}$. We can now rewrite \eqref{1} as:
\begin{align}
\mathbb{E}\_{P(X)}\left[f(X)\right]&amp;=\sum_x P(x)f(x) \\\\ &amp;=\sum_x Q(x)f(x)\dfrac{P(x)}{Q(x)} \\\\ &amp;=\dfrac{1}{Z}\sum_x Q(x)f(x)\dfrac{\tilde{P}(x)}{Q(x)} \\\\ &amp;=\dfrac{1}{Z}\mathbb{E}\_{Q(X)}\left[f(X)w(X)\right] \\\\ &amp;=\dfrac{\mathbb{E}\_{Q(X)}\left[f(X)w(X)\right]}{\mathbb{E}\_{Q(X)}\left[w(X)\right]}\tag{3}\label{3}
\end{align}
We can use an empirical estimator for both the numerator and denominator. Given $M$ samples $\mathcal{D}=\\{x[1],\dots,x[M]\\}$ from $Q$, we can estimate:
\begin{equation}
\hat{\mathbb{E}}\_\mathcal{D}(f)=\dfrac{\sum_{m=1}^{M}f(x[m])w(x[m])}{\sum_{m=1}^{M}w(x[m])}\tag{4}\label{4}
\end{equation}
We call this estimator the **normalized importance sampling estimator** (or **weighted importance sampling estimator**).

#### Off-policy Monte Carlo Prediction via Importance Sampling
{: #is-off-policy}
We apply IS to off-policy learning by weighting returns according to the relative probability of their trajectories occurring under the target and behavior policies, called the *importance sampling ratio* (which we denoted as $w$ as above, but now we change the notation to $\rho$ in order to follows the book).  

The probability of the subsequent state-action trajectory, $A_t,S_{t+1},A_{t+1},\dots,S_T$, occurring under any policy $\pi$ given starting state $s$ is:
\begin{align}
Pr(A_t,S_{t+1},\dots,S_T|S_t,A_{t:T-1}\sim\pi)&amp;=\pi(A_t|S_t)p(S_{t+1}|S_t,A_t)\dots p(S_T|S_{T-1},A_{T-1}) \\\\ &amp;=\prod_{k=t}^{T-1}\pi(A_k|S_k)p(S_{k+1}|S_k,A_k)
\end{align}
Thus, the importance sampling ratio as we defined is:
\begin{equation}
\rho_{t:T-1}\doteq\dfrac{\prod_{k=t}^{T-1}\pi(A_k|S_k)p(S_{k+1}|S_t,A_t)}{\prod_{k=t}^{T-1}b(A_k|S_k)p(S_{k+1}|S_t,A_t)}=\prod_{k=1}^{T-1}\dfrac{\pi(A_k|S_k)}{b(A_k|S_k)}
\end{equation}
which depends only on the two policies and the sequence, not on the MDP.  

Since $v_b(s)=\mathbb{E}\left[G_t|S_t=s\right]$, then we have
\begin{equation}
\mathbb{E}\left[\rho_{t:T-1}G_t|S_t=s\right]=v_\pi(s)
\end{equation}
To estimate $v_\pi(s)$, we simply scale the returns by the ratios and average the results:
\begin{equation}
V(s)\doteq\dfrac{\sum_{t\in\mathcal{T}(s)}\rho_{t:T(t)-1}G_t}{\vert\mathcal{T}(s)\vert},\tag{5}\label{5}
\end{equation}
where $\mathcal{T}(s)$ is the set of all states in which $s$ is visited (only for every-visit). For a first-visit,$\mathcal{T}(s)$ would only include time steps that were first visits to $s$ within their episodes. $T(t)$ denotes the first time of termination following time $t$, and $G_t$ denotes the return after $t$ up through $T(t)$.  

When importance sampling is done as simple average in this way, we call it **ordinary importance sampling** (OIS) (which corresponds to **unweighted importance sampling** in the previous section).  

And the one corresponding to **weighted importance sampling** (WIS), which uses a weighted average, is defined as:
\begin{equation}
V(s)\doteq\dfrac{\sum_{t\in\mathcal{T}(s)}\rho_{t:T(t)-1}G_t}{\sum_{t\in\mathcal{T}(s)}\rho_{t:T(t)-1}},\tag{6}\label{6}
\end{equation}
or zero if the denominator is zero.


#### Incremental Implementation for Off-policy MC Prediction using IS
{: #imp-off-policy-is}

##### Incremental Method
{: #incremental-method}
**Incremental method** is a way of updating averages with small, constant computation required to process each new reward instead of maintaining a record of all the rewards and then performing this computation whenever the estimated value was needed. It follows the general rule:
\begin{equation}
NewEstimate\leftarrow OldEstimate+StepSize\left[Target-OldEstimate\right]
\end{equation}

##### Applying to Off-policy MC Prediction using IS
{: #applying-off-policy-is}
In ordinary IS, the returns are scaled by the IS ratio $\rho_{t:T(t)-1}$, then simply averaged, as in \eqref{5}. Thus, it&apos;s easy to apply incremental method to OIS.  

For WIS, as in the equation \eqref{6}, we have to form a weighted average of the returns, and a slightly different incremental incremental algorithm is required.
Suppose we have a sequence of returns $G_1,G_2,\dots,G_{n-1}$, all starting in the same state and each with a corresponding random weight $W_i$ (e.g., $W_i=\rho_{t_i:T(t_i)}$). We wish to form the estimate
\begin{equation}
V_n\doteq\dfrac{\sum_{k=1}^{n-1}W_kG_k}{\sum_{k=1}^{n-1}W_k},\hspace{1cm}n\geq2
\end{equation}
and keep it up-to-date as we obtain a single additional return $G_n$. In addition to keeping track of $V_n$, we must maintain for each state the cumulative sum $C_n$ of the weights given to the first $n$ returns. The update rule for $V_n$ is
\begin{equation}
V_{n+1}\doteq V_n+\dfrac{W_n}{C_n}\big[G_n-V_n\big],\hspace{1cm}n\geq1,
\end{equation}
and
\begin{equation}
C_{n+1}\doteq C_n+W_{n+1},
\end{equation}
where $C_0=0$. And here is pseudocode of our algorithm.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-08-21/off-policy-mc-prediction.png&quot; alt=&quot;off-policy MC prediction pseudocode&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

### Off-policy Monte Carlo Control
{: #off-policy-mc-control}
Similarly, we develop the algorithm for off-policy MC control, based on GPI and WIS, for estimating $\pi_\*$ and $q_\*$, which is shown below.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-08-21/off-policy-mc-control.png&quot; alt=&quot;off-policy MC control pseudocode&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

The target policy $\pi\approx\pi_*$ is the greedy policy w.r.t $Q$, which is an estimate of $q_\pi$. The behavior policy, $b$, can be anything, but in order to assure convergence of $\pi$ to the optimal policy, an infinite number of returns must be obtained for each pair of state and action. This can be guaranteed by choosing $b$ to be $\varepsilon$-soft.  

The policy $\pi$ converges to optimal at all encountered states even though actions are selected according to a different soft policy $b$, which may change between or even within episodes.

#### Example - Racetrack
{: #example}
(This example is taken from *Exercise 5.12*, *Reinforcement Learning: An Introduction* book.)  

**Problem**  
Consider driving a race car around a turn like that shown in ***Figure 4***. You want to go as fast as possible, but not so fast as to run off the track. In our simplified racetrack, the car is at one of a discrete set of grid positions, the cells in the diagram. The velocity is also discrete, a number of grid cells moved horizontally and vertically per time step. The actions are increments to the velocity components. Each may be changed by +1, -1, or 0 in each step, for a total of nine (3 x 3) actions. Both velocity components are restricted to be nonnegative and less than 5, and they cannot both be zero except at the starting line. Each episode begins in one of the randomly selected start states with both velocity components zero and ends when the car crosses the finish line. The rewards are -1 for each step until the car crosses the finish line. If the car hits the track boundary, it is moved back to a random position on the starting line, both velocity components are reduced to zero, and the episode continues. Before updating the car&apos;s location at each time step, check to see if the projected path of the car intersects the track boundary. If it intersects the finish line, the episode ends; if it intersects anywhere else, the car is considered to have hit the track boundary and is sent back to the starting line. To make the task more challenging, with probability 0.1 at each time step the velocity increments are both zero, independently of the intended increments. Apply a Monte Carlo control method to this task to compute the optimal policy from each starting state. Exhibit several trajectories following the optimal policy (but turn the noise off for these trajectories).
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-08-21/racetrack.png&quot; alt=&quot;racetrack&quot; width=&quot;200&quot; height=&quot;300px&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 4&lt;/b&gt;: A turn for the racetrack task&lt;/figcaption&gt;
&lt;/figure&gt;&lt;br/&gt;

**Solution code**  
The source code can be found [here](https://github.com/trunghng/reinforcement-learning-an-introduction-imp/blob/main/chapter-5/racetrack.py).  

&lt;button type=&quot;button&quot; class=&quot;collapsible&quot; id=&quot;codeP&quot;&gt;Click to show the code&lt;/button&gt;
&lt;div class=&quot;codePanel&quot; id=&quot;codePdata&quot; markdown=&quot;1&quot;&gt;
&lt;br&gt;
We begin by importing some useful packages.

```python
import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm
```

Next, we define our environment
```python
class RaceTrack:

	def __init__(self, grid):
		self.NOISE = 0
		self.MAX_VELOCITY = 4
		self.MIN_VELOCITY = 0
		self.starting_line = []
		self.track = None
		self.car_position = None
		self.actions = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,0],[0,1],[1,-1],[1,0],[1,1]]
		self._load_track(grid)
		self._generate_start_state()
		self.velocity = np.array([0, 0], dtype=np.int16)


	def reset(self):
		self._generate_start_state()
		self.velocity = np.array([0, 0], dtype=np.int16)


	def get_state(self):
		return self.car_position.copy(), self.velocity.copy()


	def _generate_start_state(self):
		index = np.random.choice(len(self.starting_line))
		self.car_position = np.array(self.starting_line[index])


	def take_action(self, action):
		if self.is_terminal():
			return 0
		self._update_state(action)
		return -1


	def _update_state(self, action):
		# update velocity
		# with probability of 0.1, keep the velocity unchanged
		if not np.random.binomial(1, 0.1):
			self.velocity += np.array(action, dtype=np.int16)
			self.velocity = np.minimum(self.velocity, self.MAX_VELOCITY)
			self.velocity = np.maximum(self.velocity, self.MIN_VELOCITY)

		# update car position
		for tstep in range(0, self.MAX_VELOCITY + 1):
			t = tstep / self.MAX_VELOCITY
			position = self.car_position + np.round(self.velocity * t).astype(np.int16)

			if self.track[position[0], position[1]] == -1:
				self.reset()
				return
			if self.track[position[0], position[1]] == 2:
				self.car_position = position
				self.velocity = np.array([0, 0], dtype=np.int16)
				return
		self.car_position = position


	def _load_track(self, grid):
		y_len, x_len = len(grid), len(grid[0])
		self.track = np.zeros((x_len, y_len), dtype=np.int16)
		for y in range(y_len):
			for x in range(x_len):
				pt = grid[y][x]
				if pt == &apos;W&apos;:
					self.track[x, y] = -1
				elif pt == &apos;o&apos;:
					self.track[x, y] = 1
				elif pt == &apos;-&apos;:
					self.track[x, y] = 0
				else:
					self.track[x, y] = 2
		# rotate the track in order to sync the track with actions
		self.track = np.fliplr(self.track)
		for y in range(y_len):
			for x in range(x_len):
				if self.track[x, y] == 0:
					self.starting_line.append((x, y))

	def is_terminal(self):
		return self.track[self.car_position[0], self.car_position[1]] == 2
```
We continue by defining our behavior policy and algorithm.
```python
def behavior_policy(track, state):
	index = np.random.choice(len(track.actions))
	return np.array(track.actions[index])


def off_policy_MC_control(episodes, gamma, grid):
	x_len, y_len = len(grid[0]), len(grid)
	Q = np.zeros((x_len, y_len, 5, 5, 3, 3)) - 40
	C = np.zeros((x_len, y_len, 5, 5, 3, 3))
	pi = np.zeros((x_len, y_len, 5, 5, 1, 2), dtype=np.int16)
	track = RaceTrack(grid)
	# for epsilon-soft greedy policy
	epsilon = 0.1

	for ep in tqdm(range(episodes)):
		track.reset()
		trajectory = []
		while not track.is_terminal():
			state = track.get_state()
			s_x, s_y = state[0][0], state[0][1]
			s_vx, s_vy = state[1][0], state[1][1]
			if not np.random.binomial(1, epsilon):
				action = pi[s_x, s_y, s_vx, s_vy, 0]
			else:
				action = behavior_policy(track, state)
			reward = track.take_action(action)
			trajectory.append([state, action, reward])
		G = 0
		W = 1
		while len(trajectory) &gt; 0:
			state, action, reward = trajectory.pop()
			G = gamma * G + reward
			sp_x, sp_y, sv_x, sv_y = state[0][0], state[0][1], state[1][0], state[1][1]
			a_x, a_y = action
			s_a = (sp_x, sp_y, sv_x, sv_y, a_x, a_y)
			C[s_a] += W
			Q[s_a] += W/C[s_a]*(G-Q[s_a])
			q_max = -1e5
			a_max = None
			for act in track.actions:
				sa_max = sp_x, sp_y, sv_x, sv_y, act[0], act[1]
				if Q[sa_max] &gt; q_max:
					q_max = Q[sa_max]
					a_max = act
			pi[sp_x, sp_y, sv_x, sv_y, 0] = a_max
			if not np.array_equal(pi[sp_x, sp_y, sv_x, sv_y, 0], action):
				break
			W *= 1/(1-epsilon+epsilon/9)
	return pi
```
And wrapping everything up with the main function.
```python
if __name__ == &apos;__main__&apos;:
	gamma = 0.9
	episodes = 10000
	grid = [&apos;WWWWWWWWWWWWWWWWWW&apos;,
          &apos;WWWWooooooooooooo+&apos;,
          &apos;WWWoooooooooooooo+&apos;,
          &apos;WWWoooooooooooooo+&apos;,
          &apos;WWooooooooooooooo+&apos;,
          &apos;Woooooooooooooooo+&apos;,
          &apos;Woooooooooooooooo+&apos;,
          &apos;WooooooooooWWWWWWW&apos;,
          &apos;WoooooooooWWWWWWWW&apos;,
          &apos;WoooooooooWWWWWWWW&apos;,
          &apos;WoooooooooWWWWWWWW&apos;,
          &apos;WoooooooooWWWWWWWW&apos;,
          &apos;WoooooooooWWWWWWWW&apos;,
          &apos;WoooooooooWWWWWWWW&apos;,
          &apos;WoooooooooWWWWWWWW&apos;,
          &apos;WWooooooooWWWWWWWW&apos;,
          &apos;WWooooooooWWWWWWWW&apos;,
          &apos;WWooooooooWWWWWWWW&apos;,
          &apos;WWooooooooWWWWWWWW&apos;,
          &apos;WWooooooooWWWWWWWW&apos;,
          &apos;WWooooooooWWWWWWWW&apos;,
          &apos;WWooooooooWWWWWWWW&apos;,
          &apos;WWooooooooWWWWWWWW&apos;,
          &apos;WWWoooooooWWWWWWWW&apos;,
          &apos;WWWoooooooWWWWWWWW&apos;,
          &apos;WWWoooooooWWWWWWWW&apos;,
          &apos;WWWoooooooWWWWWWWW&apos;,
          &apos;WWWoooooooWWWWWWWW&apos;,
          &apos;WWWoooooooWWWWWWWW&apos;,
          &apos;WWWoooooooWWWWWWWW&apos;,
          &apos;WWWWooooooWWWWWWWW&apos;,
          &apos;WWWWooooooWWWWWWWW&apos;,
          &apos;WWWW------WWWWWWWW&apos;]
	policy = off_policy_MC_control(episodes, gamma, grid)
	track_ = RaceTrack(grid)
	x_len, y_len = len(grid[0]), len(grid)
	trace = np.zeros((x_len, y_len))
	for _ in range(1000):
		state = track_.get_state()
		sp_x, sp_y, sv_x, sv_y = state[0][0], state[0][1], state[1][0], state[1][1]
		trace[sp_x, sp_y] += 1
		action = policy[sp_x, sp_y, sv_x, sv_y, 0]
		reward = track_.take_action(action)
		if track_.is_terminal():
			break
	trace = (trace &gt; 0).astype(np.float32)
	trace += track_.track
	plt.imshow(np.flipud(trace.T))
	plt.savefig(&apos;./racetrack_off_policy_control.png&apos;)
	plt.close()
```
&lt;/div&gt;
We end up with this result after running the code.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-08-21/racetrack-result.png&quot; alt=&quot;racetrack&apos;s result&quot; width=&quot;450&quot; height=&quot;400px&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 5&lt;/b&gt;: Example - Racetrack&apos;s result&lt;/figcaption&gt;
&lt;/figure&gt;&lt;br/&gt;

### Discounting-aware Importance Sampling
{: #discounting-aware-is}
Recall that in the above [section](#is), we defined the estimator for $\mathbb{E}\_P[f]$ as:
\begin{equation}
\hat{\mathbb{E}}\_\mathcal{D}(f)=\dfrac{1}{M}\sum_{m=1}^{M}f(x[m])\dfrac{P(x[m])}{Q(x[m])}
\end{equation}
This estimator is unbiased because each of the samples it averages is unbiased:
\begin{equation}
\mathbb{E}\_{Q}\left[\dfrac{P(x[m])}{Q(x[m])}f(x[m])\right]=\int_x Q(x)\dfrac{P(x)}{Q(x)}f(x)\,dx=\int_x P(x)f(x)\,dx=\mathbb{E}\_{P}\left[f(x[m])\right]
\end{equation}
This IS estimate is unfortunately often of unnecessarily high variance. To be more specific, for example, the episodes last 100 steps and $\gamma=0$. Then $G_0=R_1$ will be weighted by
\begin{equation}
\rho_{0:99}=\dfrac{\pi(A_0|S_0)}{b(A_0|S_0)}\dots\dfrac{\pi(A_{99}|S_{99})}{b(A_{99}|S_{99})}
\end{equation}
but actually, it really needs to be weighted by
$\rho_{0:1}=\frac{\pi(A_0|S_0)}{b(A_0|S_0)}$.
The other 99 factors $\frac{\pi(A_1|S_1)}{b(A_1|S_1)}\dots\frac{\pi(A_{99}|S_{99})}{b(A_{99}|S_{99})}$ are irrelevant because after the first reward, the return has already been determined. These later factors are all independent of the return and of expected value $1$; they do not change the expected update, but they add enormously to its variance. They could even make the variance *infinite* in some cases.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-08-21/inf-var.png&quot; alt=&quot;infinite variance&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 6&lt;/b&gt;: Infinite variance when using OIS (Eg5.5 - RL: An Introduction book). The code can be found &lt;span markdown=&quot;1&quot;&gt;[here](https://github.com/trunghng/reinforcement-learning-an-introduction-imp/blob/main/chapter-5/infinite-variance.py)&lt;/span&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;br/&gt;

One of the methods used to avoid this large extraneous variance is **discounting-aware IS**. The idea is to think of discounting as determining a probability of termination or, equivalently, a *degree* of partial termination.  

We begin by defining *flat partial returns*:
\begin{equation}
\bar{G}\_{t:h}\doteq R_{t+1}+R_{t+2}+\dots+R_h,\hspace{1cm}0\leq t\&lt;h\leq T,
\end{equation}
where &apos;&apos;flat&quot; denotes the absence of discounting, and &apos;&apos;partial&quot; denotes that these returns do not extend all the way to termination but instead stop at $h$, called the *horizon*. The conventional full return $G_t$ can be viewed as a *sum of flat partial returns*:
\begin{align}
G_t&amp;\doteq R_{t+1}+\gamma R_{t+2}+\gamma^2 R_{t+3}+\dots+\gamma^{T-t-1}R_T \\\\ &amp;=(1-\gamma)R_{t+1} \\\\ &amp;\hspace{0.5cm}+(1-\gamma)\gamma(R_{t+1}+R_{t+2}) \\\\ &amp;\hspace{0.5cm}+(1-\gamma)\gamma^2(R_{t+1}+R_{t+2}+R_{t+3}) \\\\ &amp;\hspace{0.7cm}\vdots \\\\ &amp;\hspace{0.5cm}+(1-\gamma)\gamma^{T-t-2}(R_{t+1}+R_{t+2}+\dots+R_{T-1}) \\\\ &amp;\hspace{0.5cm}+\gamma^{T-t-1}(R_{t+1}+R_{t+2}+\dots+R_T) \\\\ &amp;=(1-\gamma)\sum_{h=t+1}^{T-1}\left(\gamma^{h-t-1}\bar{G}\_{t:h}\right)+\gamma^{T-t-1}\bar{G}\_{t:T}
\end{align}
Now we need to scale the *flat partial returns* by an *IS ratio* that is similarly truncated. As $\bar{G}\_{t:h}$ only involves rewards up to a horizon $h$, we only need the ratio of the probabilities up to $h$. We define:
1. **Discounting-aware OIS** estimator
\begin{equation}
V(s)\doteq\dfrac{\sum_{t\in\mathcal{T}(s)}\left[(1-\gamma)\sum_{h=t+1}^{T(t)-1}\left(\gamma^{h-t-1}\rho_{t:h-1}\bar{G}\_{t:h}\right)+\gamma^{T(t)-t-1}\rho_{t:T(t)-1}\bar{G}\_{t:T(t)}\right]}{\vert\mathcal{T}(s)\vert}
\end{equation}
2. **Discounting-aware WIS** estimator
\begin{equation}
V(s)\doteq\dfrac{\sum_{t\in\mathcal{T}(s)}\left[(1-\gamma)\sum_{h=t+1}^{T(t)-1}\left(\gamma^{h-t-1}\rho_{t:h-1}\bar{G}\_{t:h}\right)+\gamma^{T(t)-t-1}\rho_{t:T(t)-1}\bar{G}\_{t:T(t)}\right]}{\sum_{t\in\mathcal{T}(s)}\left[(1-\gamma)\sum_{h=t+1}^{T(t)-1}\left(\gamma^{h-t-1}\rho_{t:h-1}\right)+\gamma^{T(t)-t-1}\rho_{t:T(t)-1}\right]}
\end{equation}
These two estimators take into account the discount rate $\gamma$ but have no effect if $\gamma=1$.

### Per-decision Importance Sampling
{: #per-decision-is}
There is another way beside discounting-aware that may be able to reduce variance, even if $\gamma=1$.  

Recall that in the off-policy estimator \eqref{5} and \eqref{6}, each term of the sum in the numerator is itself a sum:
\begin{align}
\rho_{t:T-1}G_t&amp;=\rho_{t:T-1}\left(R_{t+1}+\gamma R_{t+2}+\dots+\gamma^{T-t-1}R_T\right) \\\\ &amp;=\rho_{t:T-1}R_{t+1}+\gamma\rho_{t:T-1}R_{t+2}+\dots+\gamma^{T-t-1}\rho_{t:T-1}R_T\tag{7}\label{7}
\end{align}
We have that
\begin{equation}
\rho_{t:T-1}R_{t+k}=\dfrac{\pi(A_t|S_t)}{b(A_t|S_t)}\dots\dfrac{\pi(A_{t+k-1}|S_{t+k-1})}{b(A_{t+k-1}|S_{t+k-1})}\dots\dfrac{\pi(A_{T-1}|S_{T-1})}{b(A_{T-1}|S_{T-1})}R_{t+k}
\end{equation}
Of all these factors, only the first $k$ factors, $\frac{\pi(A_t|S_t)}{b(A_t|S_t)}\dots\frac{\pi(A_{t+k-1}|S_{t+k-1})}{b(A_{t+k-1}|S_{t+k-1})}$, and the last (the reward $R_{t+k}$) are related. All the others are for event that occurred after the reward. Moreover, we have that
\begin{equation}
\mathbb{E}\left[\dfrac{\pi(A_i|S_i)}{b(A_i|S_i)}\right]\doteq\sum_a b(a|S_i)\dfrac{\pi(a|S_i)}{b(a|S_i)}=1
\end{equation} 
Therefore, we obtain
\begin{align}
\mathbb{E}\Big[\rho_{t:T-1}R_{t+k}\Big]&amp;=\mathbb{E}\left[\dfrac{\pi(A_t|S_t)}{b(A_t|S_t)}\dots\dfrac{\pi(A_{t+k-1}|S_{t+k-1})}{b(A_{t+k-1}|S_{t+k-1})}\right]\mathbb{E}\left[\dfrac{\pi(A_k|S_k)}{b(A_k|S_k)}\right]\dots\mathbb{E}\left[\dfrac{\pi(A_{T-1}|S_{T-1})}{b(A_{T-1}|S_{T-1})}\right] \\\\ &amp;=\mathbb{E}\Big[\rho_{t:t+k-1}R_{t+k}\Big].1\dots 1 \\\\ &amp;=\mathbb{E}\Big[\rho_{t:t+k-1}R_{t+k}\Big]
\end{align}
Plug the result we just got into the expectation of \eqref{7}, we have
\begin{align}
\mathbb{E}\Big[\rho_{t:T-1}G_t\Big]&amp;=\mathbb{E}\Big[\rho_{t:T-1}R_{t+1}+\gamma\rho_{t:T-1}R_{t+2}+\dots+\gamma^{T-t-1}\rho_{t:T-1}R_T\Big] \\\\ &amp;=\mathbb{E}\Big[\rho_{t:t}R_{t+1}+\gamma\rho_{t:t+1}R_{t+2}+\dots+\gamma^{T-t-1}\rho_{t:T-1}R_T\Big] \\\\ &amp;=\mathbb{E}\Big[\tilde{G}\_t\Big],
\end{align}
where $\tilde{G}\_t=\rho_{t:T-1}R_{t+1}+\gamma\rho_{t:T-1}R_{t+2}+\dots+\gamma^{T-t-1}\rho_{t:T-1}R_T$.  

We call this idea **per-decision IS**. Hence, we develop **per-decision OIS** estimator, using $\tilde{G}\_t$:
\begin{equation}
V(s)\doteq\dfrac{\sum_{t\in\mathcal{T}(s)}\tilde{G}\_t}{\vert\mathcal{T}(s)\vert}
\end{equation}

## References
[1] Richard S. Sutton &amp; Andrew G. Barto. [Reinforcement Learning: An Introduction](https://mitpress.mit.edu/books/reinforcement-learning-second-edition)  

[2] Adrian Barbu &amp; Song-Chun Zhu. [Monte Carlo Methods](https://link.springer.com/book/10.1007/978-981-13-2971-5)  

[3] David Silver. [UCL course on RL](https://www.davidsilver.uk/teaching/)  

[4] Csaba Szepesvári. [Algorithms for Reinforcement Learning](https://www.amazon.com/Algorithms-Reinforcement-Synthesis-Artificial-Intelligence/dp/1608454924)  

[5] Singh, S.P., Sutton, R.S. [Reinforcement learning with replacing eligibility traces](https://doi.org/10.1007/BF00114726). Mach Learn 22, 123–158 (1996)  

[6] John N. Tsitsiklis. [On the Convergence of Optimistic Policy Iteration](https://www.mit.edu/~jnt/Papers/J089-02-jnt-optimistic.pdf). Journal of Machine Learning Research 3 (2002) 59–72  

[7] Yuanlong Chen. [On the convergence of optimistic policy iteration for stochastic shortest path problem](https://arxiv.org/abs/1808.08763) (2018)  

[8] Jun Liu. [On the Convergence of Reinforcement Learning with Monte Carlo Exploring Starts](https://arxiv.org/abs/2007.10916) (2020)  

[9] Daphne Koller &amp; Nir Friedman. [Probabilistic Graphical Models: Principles and Techniques](https://mitpress.mit.edu/books/probabilistic-graphical-models)  

[10] A. Rupam Mahmood, Hado P. van Hasselt, Richard S. Sutton. [Weighted importance sampling for off-policy learning with linear function approximation](https://papers.nips.cc/paper/2014/hash/be53ee61104935234b174e62a07e53cf-Abstract.html). Advances in Neural Information Processing Systems 27 (NIPS 2014)

## Footnotes
[^1]: We are gonna talk about Monte Carlo methods in more detail in another post.
[^2]: A prediction task in RL is where we are given a policy and our goal is to measure how well it performs.
[^3]: Along with prediction, a control task in RL is where the policy is not fixed, and our goal is to find the optimal policy.
[^4]: On-policy is a category of RL algorithms that attempts to evaluate or improve the policy that is used to make decisions.
[^5]: In contrast to on-policy, off-policy methods evaluate or improve a policy different from that used to generate the data.</content><author><name>Trung H. Nguyen</name><email>trung.skipper@gmail.com</email></author><category term="artificial-intelligent" /><category term="reinforcement-learning" /><category term="artificial-intelligent" /><category term="reinforcement-learning" /><category term="monte-carlo" /><category term="importance-sampling" /><category term="my-rl" /><summary type="html">Recall that in the previous post, Dynamic Programming Algorithms for Solving Markov Decision Processes, we made an assumption about the complete knowledge of the environment. With Monte Carlo methods, we only require experience - sample sequences of states, actions, and rewards from simulated or real interaction with an environment.</summary></entry><entry><title type="html">Dynamic Programming Algorithms for Solving Markov Decision Processes</title><link href="http://localhost:4000/artificial-intelligent/reinforcement-learning/2021/07/25/dp-in-mdp.html" rel="alternate" type="text/html" title="Dynamic Programming Algorithms for Solving Markov Decision Processes" /><published>2021-07-25T15:30:00+07:00</published><updated>2021-07-25T15:30:00+07:00</updated><id>http://localhost:4000/artificial-intelligent/reinforcement-learning/2021/07/25/dp-in-mdp</id><content type="html" xml:base="http://localhost:4000/artificial-intelligent/reinforcement-learning/2021/07/25/dp-in-mdp.html">&gt; In two previous posts, [**Markov Decision Process (MDP) and Bellman equations**]({% post_url 2021-06-27-mdp-bellman-eqn %}) and [**Optimal Policy Existence**]({% post_url 2021-07-10-optimal-policy-existence %}), we have known how MDPs, Bellman equations are defined and how they work. In this post, we are going to talk about how these MDPs are solved with **Dynamic Programming**.  

&lt;!-- excerpt-end --&gt;
- [What is Dynamic Programming?](#what-is-dp)
- [Dynamic Programming applied in Markov Decision Processes](#dp-in-mdps)
	- [Policy Evaluation](#policy-evaluation)
	- [Policy Improvement](#policy-improvement)
	- [Policy Iteration](#policy-iteration)
	- [Value Iteration](#value-iteration)
	- [Generalized Policy Iteration](#gpi)
	- [Example - Gambler&apos;s Problem](#example)
- [References](#references)
- [Footnotes](#footnotes)


## What is Dynamic Programming?
{: #what-is-dp}
**Dynamic Programming (DP)** is a method of simplifying a complicated problem by breaking it down into more straightforward sub-problems. Then it finds the solutions for the sub-problems, and combines them together.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-07-25/dp.png&quot; alt=&quot;dynamic programming&quot; width=&quot;360&quot; height=&quot;200px&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 1&lt;/b&gt;: Using Dynamic Programming to find the shortest path in graph&lt;/figcaption&gt;
&lt;/figure&gt;

## Dynamic Programming applied in Markov Decision Processes
{: #dp-in-mdps}
- DP is a very general method for solving problems having two properties:
    - *Optimal substructure*
    	- Principle of optimality applies.
    	- Optimal solution can be decomposed into sub-problems.
    - *Overlapping sub-problems*
    	- Sub-problems recur many times.
    	- Solutions can be cached and reused.
- MDPs satisfy both properties since:
    - Bellman equation gives recursive decomposition.
    - Value function stores and reuses solutions.
- DP assumes the model is already known.

### Policy Evaluation
Recall from the definition of [Bellman equation]({% post_url 2021-06-27-mdp-bellman-eqn %}#bellman-equations) that, for all $s\in\mathcal{S}$,
\begin{equation}
v_\pi(s)\doteq\sum_a\pi(a|s)\sum_{s&apos;,r}p(s&apos;,r|s,a)\left[r+\gamma v_\pi(s&apos;)\right]\tag{1}\label{1}
\end{equation}
If the environment&apos;s dynamics are completely known, then \eqref{1} is a system of $\vert\mathcal{S}\vert$ linear equations in $\vert\mathcal{S}\vert$ unknowns. We can use iterative methods to solve this problem.  
Consider a sequence of approximate value functions $v_0,v_1,\dots$, each mapping $\mathcal{S}^+\to\mathbb{R}$. Choosing $v_0$ arbitrarily (the terminal state, if any, must be given value 0). Using Bellman equation for $v_\pi$, we have an update rule:
\begin{align}
v_{k+1}(s)&amp;\doteq\mathbb{E}\_\pi\left[R_{t+1}+\gamma v_k(S_{k+1})\vert S_t=s\right] \\\\ &amp;=\sum_a\pi(a|s)\sum_{s&apos;,r}p(s&apos;,r|s,a)\left[r+\gamma v_k(s&apos;)\right]
\end{align}
for all $s\in\mathcal{S}$. Thanks to [Banach&apos;s fixed points theorem]({% post_url 2021-07-10-optimal-policy-existence %}#banach-fixed-pts) and as we talked in that post, we have that the sequence $\\{v_k\\}\to v_\pi$ as $k\to\infty$. This algorithm is called **iterative policy evaluation**.  
We have the backup diagram for this update.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-07-25/backup-iterative-policy-evaluation.png&quot; alt=&quot;Backup diagram for iterative policy evalution update&quot; width=&quot;360&quot; height=&quot;200px&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 2&lt;/b&gt;: Backup diagram for Iterative policy evaluation update&lt;/figcaption&gt;
&lt;/figure&gt;&lt;br/&gt;
When implementing *iterative policy evaluation*, for all $s\in\mathcal{S}$, we can use:
- one array to store the value functions, and update them &apos;&apos;in-place&quot; (*asynchronous DP*)
\begin{equation}
\color{red}{v(s)}\leftarrow\sum_a\pi(a|s)\sum_{s&apos;,r}p(s&apos;,r|s,a)\left[r+\color{red}{v(s&apos;)}\right]
\end{equation}
- two arrays in which the new value functions can be computed one by one from the old functions without the old ones being changed (*synchronous DP*)
\begin{align}
\color{red}{v_{new}(s)}&amp;\leftarrow\sum_a\pi(a|s)\sum_{s&apos;,r}p(s&apos;,r|s,a)\left[r+\color{red}{v_{old}(s&apos;)}\right]\\\\ \color{red}{v_{old}}&amp;\leftarrow\color{red}{v_{new}}
\end{align}
Here is the pseudocode of the *in-place iterative policy evaluation*, given a policy $\pi$, for estimating $V\approx v_\pi$
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-07-25/iterative-policy-evaluation.png&quot; alt=&quot;iterative policy evalution pseudocode&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
### Policy Improvement
The reason why we compute the value function for a given policy $\pi$ is to find better policies. Given the computed value function $v_\pi$ for an deterministic policy $\pi$, we already know how good it is for a state $s$ to choose action $a=\pi(s)$. Now what we are considering is, in $s$, if we instead take action $a\neq\pi$, will it be better?  
In particular, in state $s$, selecting action $a$ and thereafter following the policy $\pi$, we have:
\begin{align}
q_\pi(s,a)&amp;\doteq\mathbb{E}\left[R_{t+1}+\gamma v_\pi(S_{t+1})|S_t=s,A_t=a\right]\tag{2}\label{2} \\\\ &amp;=\sum_{s&apos;,r}p(s&apos;,r|s,a)\left[r+\gamma v_\pi(s&apos;)\right]
\end{align}
**Theorem** (*Policy improvement*)  
Let $\pi,\pi&apos;$ be any pair of deterministic policies such that, for all $s\in\mathcal{S}$,
\begin{equation}
q_\pi(s,\pi&apos;(s))\geq v_\pi(s)\tag{3}\label{3}
\end{equation}
Then $\pi&apos;\geq\pi$, which means for all $s\in\mathcal{S}$, we have $v_{\pi&apos;}(s)\geq v_\pi(s)$.  

**Proof**  
Deriving \eqref{3} combined with \eqref{2}, we have[^1]:
\begin{align}
v_\pi(s)&amp;\leq q_\pi(s,\pi&apos;(s)) \\\\ &amp;=\mathbb{E}\left[R_{t+1}+\gamma v_\pi(S_{t+1})|S_t=s,A_t=\pi&apos;(s)\right]\tag{by \eqref{2}} \\\\ &amp;=\mathbb{E}\_{\pi&apos;}\left[R_{t+1}+\gamma v_\pi(S_{t+1})|S_t=s\right] \\\\ &amp;\leq\mathbb{E}\_{\pi&apos;}\left[R_{t+1}+\gamma q_\pi(S_{t+1},\pi&apos;(S_{t+1}))|S_t=s\right]\tag{by \eqref{3}} \\\\ &amp;=\mathbb{E}\_{\pi&apos;}\left[R_{t+1}+\gamma\mathbb{E}\_{\pi&apos;}\left[R_{t+2}+\gamma v_\pi(S_{t+2})|S_{t+1},A_{t+1}=\pi&apos;(S_{t+1})\right]|S_t=s\right] \\\\ &amp;=\mathbb{E}\_{\pi&apos;}\left[R_{t+1}+\gamma R_{t+2}+\gamma^2 v_\pi(S_{t+2})|S_t=s\right] \\\\ &amp;\leq\mathbb{E}\_{\pi&apos;}\left[R_{t+1}+\gamma R_{t+2}+\gamma^2 R_{t+3}+\gamma^3 v_\pi(S_{t+3})|S_t=s\right] \\\\ &amp;\quad\vdots \\\\ &amp;\leq\mathbb{E}\_{\pi&apos;}\left[R_{t+1}+\gamma R_{t+2}+\gamma^2 R_{t+3}+\gamma^3 R_{t+4}+\dots|S_t=s\right] \\\\ &amp;=v_{\pi&apos;}(s)
\end{align}

Consider the new *greedy policy*, $\pi&apos;$, which takes the action that looks best in the short term - after one step of lookahead - according to $v_\pi$, given by
\begin{align}
\pi&apos;(s)&amp;\doteq\arg\max_a q_\pi(s,a) \\\\ &amp;=\arg\max_a\mathbb{E}\left[R_{t+1}+\gamma v_\pi(S_{t+1})|S_t=s,A_t=a\right]\tag{4}\label{4} \\\\ &amp;=\arg\max_a\sum_{s&apos;,r}p(s&apos;,r|s,a)\left[r+\gamma v_\pi(s&apos;)\right]
\end{align}
By the above theorem, we have that the greedy policy is as good as, or better than, the original policy.  
Suppose the new greedy policy, $\pi&apos;$, is as good as, but not better than, $\pi$. Or in other words, $v_\pi=v_{\pi&apos;}$. And from \eqref{4}, we have for all $s\in\mathcal{S}$,
\begin{align}
v_{\pi&apos;}(s)&amp;=\max_a\mathbb{E}\left[R_{t+1}+\gamma v_{\pi&apos;}(S_{t+1})|S_t=s,A_t=a\right] \\\\ &amp;=\max_a\sum_{s&apos;,r}p(s&apos;,r|s,a)\left[r+\gamma v_{\pi&apos;}(s&apos;)\right]
\end{align}
which is the Bellman optimality equation for action-value function. And therefore, $v_{\pi&apos;}$ must be $v_\*$. Hence, *policy improvement* must give us a strictly better policy except when the original one is already optimal[^2].

### Policy Iteration
Once we have obtained a better policy, $\pi&apos;$, by improving a policy $\pi$ using $v_\pi$, we can repeat the same process by computing $v_{\pi&apos;}$, and improve it to yield an even better $\pi&apos;&apos;$. Repeating it again and again, we get an iterative procedure to improve the policy
\begin{equation}
\pi_0\xrightarrow[]{\text{evaluation}}v_{\pi_0}\xrightarrow[]{\text{improvement}}\pi_1\xrightarrow[]{\text{evaluation}}v_{\pi_1}\xrightarrow[]{\text{improvement}}\pi_2\xrightarrow[]{\text{evaluation}}\dots\xrightarrow[]{\text{improvement}}\pi_\*\xrightarrow[]{\text{evaluation}}v_\*
\end{equation}
Each following policy is a strictly improved version of the previous one (unless it is already optimal). Because a finite MDP has only a finite number of policies, this process must converge to an optimal policy and optimal value function in a finite number of iterations.
This algorithm is called **policy iteration**. And here is the pseudocode of the policy iteration.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-07-25/policy-iteration.png&quot; alt=&quot;policy iteration pseudocode&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

### Value Iteration
When using *policy iteration*, each of its iterations involves policy evaluation, which requires multiple sweeps through the state set, and thus affects the computation performance.  
Policy evaluation step of policy iteration, in fact, can be truncated in several ways without losing the convergence guarantees of policy iteration. One important special case is when policy evaluation is stopped after just one sweep (one update of each state). This algorithm is called **value iteration**, which follows this update:
\begin{align}
v_{k+1}&amp;\doteq\max_a\mathbb{E}\left[R_{t+1}+\gamma v_k(S_{t+1})|S_t=s,A_t=a\right] \\\\ &amp;=\max_a\sum_{s&apos;,r}p(s&apos;,r|s,a)\left[r+\gamma v_k(s&apos;)\right],
\end{align}
for all $s\in\mathcal{S}$. Once again, thanks to [Banach&apos;s fixed point theorem]({% post_url 2021-07-10-optimal-policy-existence %}#banach-fixed-pts), for an arbitrary $v_0$, we have that the sequence $\\{v_k\\}\to v_\*$ as $k\to\infty$.  
We have the backup diagram for this update[^3].
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-07-25/backup-value-iteration.png&quot; alt=&quot;Backup diagram of value iteration update&quot; width=&quot;360&quot; height=&quot;200px&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 3&lt;/b&gt;: Backup diagram of Value Iteration update&lt;/figcaption&gt;
&lt;/figure&gt;&lt;br/&gt;
And here is the pseudocode of the value iteration.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-07-25/value-iteration.png&quot; alt=&quot;value iteration pseudocode&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

### Generalized Policy Iteration
{: #gpi}
The **Generalized Policy Iteration (GPI)** algorithm refers to the idea of combining policy evaluation and policy improvement together to improve the original policy.  
In GPI, the value function is repeatedly driven toward the true value of the current policy and at the same time the policy is being improved optimality with respect to its value function, as in the following diagram.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-07-25/gpi.png&quot; alt=&quot;GPI&quot; width=&quot;200&quot; height=&quot;320px&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 4&lt;/b&gt;: Generalized Policy Iteration&lt;/figcaption&gt;
&lt;/figure&gt;&lt;br/&gt;
Once it reaches the stationary state (when both evaluation and improvement no long produce any updates), then the current value function and policy must be optimal.  
The evaluation and improvement processes in GPI can be viewed as both competing and cooperating. They competing in the sense that on the one hand, making policy greedy w.r.t the value function typically makes value function incorrect for the new policy. And on the other hand, approximating the value function closer to the true value of the policy typically forces the policy is no longer to be greedy. But in the long run, they two processes cooperate to find a single joint solution: the optimal value function and an optimal policy.
&lt;figure&gt;
	&lt;img src=&quot;/assets/images/2021-07-25/gpi-rel.png&quot; alt=&quot;GPI interaction&quot; width=&quot;360&quot; height=&quot;200px&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
	&lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 5&lt;/b&gt;: Interaction between the evaluation and improvement processes in GPI&lt;/figcaption&gt;
&lt;/figure&gt;

### Example - Gambler&apos;s Problem
{: #example}
(This example is taken from *Reinforcement Learning: An Introduction* book, *Example 4.3*.)  

Let&apos;s say you are a gambler, who decides to bet on the outcomes of sequence of coin flips. On each flip, you have to decide how many dollars, in integer, you will bet. Each time you win, when the coin comes up head, the amount of money you get is exactly the same as the money that you staked on that flip. Same it goes in the tail case, you will lose that amount of dollars. The game ends when you reach your goal, let&apos;s assume, $\\$100$, or when your hands are empty, $\\$0$. This task can be formulated as undiscounted, episodic, finite MDP. The state is your capital, $s\in\\{1,2,\dots,99\\}$; the actions are stakes, $a\in\\{0,1,\dots,\min\left(s,100-s\right)\\}$. The reward is zero on all trainsitions except those on which you reach your goal, when it is $+1$.
And we also assume that the probability of the coin coming up heads, $p_h=0.4$.

**Solution code**  
The code can be found [here](https://github.com/trunghng/reinforcement-learning-an-introduction-imp/blob/main/chapter-4/gambler.py).

&lt;button type=&quot;button&quot; class=&quot;collapsible&quot; id=&quot;codeP&quot;&gt;Click to show the code&lt;/button&gt;
&lt;div class=&quot;codePanel&quot; id=&quot;codePdata&quot; markdown=&quot;1&quot;&gt;
&lt;br&gt;

```python
import numpy as np
import matplotlib.pyplot as plt

GOAL = 100
#For convenience, we introduce 2 dummy states: 0 and terminal state
states = np.arange(0, GOAL + 1)
rewards = {&apos;terminal&apos;: 1, &apos;non-terminal&apos;: 0}
HEAD_PROB = 0.4
GAMMA = 1  # discount factor


def value_iteration(theta):
    V = np.zeros(states.shape)
    V_set = []
    policy = np.zeros(V.shape)

    while True:
        delta = 0
        V_set.append(V.copy())
        for state in states[1:GOAL]:
            old_value = V[state].copy()

            actions = np.arange(0, min(state, GOAL - state) + 1)
            new_value = 0
            for action in actions:
                next_head_state = states[state] + action
                next_tail_state = states[state] - action
                head_reward = rewards[&apos;terminal&apos;] if next_head_state == GOAL else rewards[&apos;non-terminal&apos;]
                tail_reward = rewards[&apos;non-terminal&apos;]
                value = HEAD_PROB * (head_reward + GAMMA * V[next_head_state]) + \
                    (1 - HEAD_PROB) * (tail_reward + GAMMA * V[next_tail_state])
                if value &gt; new_value:
                    new_value = value

            V[state] = new_value
            delta = max(delta, abs(old_value - V[state]))
            print(&apos;Max value changed: &apos;, delta)

        if delta &lt; theta:
            V_set.append(V)
            break

    for state in states[1:GOAL]:
        values = []
        actions = np.arange(min(state, 100 - state) + 1)
        for action in actions:
            next_head_state = states[state] + action
            next_tail_state = states[state] - action
            head_reward = rewards[&apos;terminal&apos;] if next_head_state == GOAL else rewards[&apos;non-terminal&apos;]
            tail_reward = rewards[&apos;non-terminal&apos;]
            values.append(HEAD_PROB * (head_reward + GAMMA * V[next_head_state]) +
                          (1 - HEAD_PROB) * (tail_reward + GAMMA * V[next_tail_state]))
        policy[state] = actions[np.argmax(np.round(values[1:], 4)) + 1]

    return V_set, policy


if __name__ == &apos;__main__&apos;:
    theta = 1e-13
    value_funcs, optimal_policy = value_iteration(theta)
    optimal_value = value_funcs[-1]
    print(optimal_value)

    plt.figure(figsize=(10, 20))
    plt.subplot(211)
    for sweep, value in enumerate(value_funcs):
        plt.plot(value, label=&apos;sweep {}&apos;.format(sweep))
    plt.xlabel(&apos;Capital&apos;)
    plt.ylabel(&apos;Value estimates&apos;)
    plt.legend(loc=&apos;best&apos;)
    plt.subplot(212)
    plt.scatter(states, optimal_policy)
    plt.xlabel(&apos;Capital&apos;)
    plt.ylabel(&apos;Final policy (stake)&apos;)

    plt.savefig(&apos;./gambler.png&apos;)
    plt.close()
```
&lt;/div&gt;
And here is our results after running the code
&lt;figure&gt;
    &lt;img src=&quot;/assets/images/2021-07-25/gambler.png&quot; alt=&quot;gambler&quot; width=&quot;450&quot; height=&quot;900px&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot;/&gt;
    &lt;figcaption style=&quot;text-align: center;font-style: italic;&quot;&gt;&lt;b&gt;Figure 7&lt;/b&gt;: Example - Gambler&apos;s Problem Result&lt;/figcaption&gt;
&lt;/figure&gt;

## References
[1] Richard S. Sutton &amp; Andrew G. Barto. [Reinforcement Learning: An Introduction](https://mitpress.mit.edu/books/reinforcement-learning-second-edition)  

[2] David Silver. [UCL course on RL](https://www.davidsilver.uk/teaching/)  

[3] Csaba Szepesvári. [Algorithms for Reinforcement Learning](https://www.amazon.com/Algorithms-Reinforcement-Synthesis-Artificial-Intelligence/dp/1608454924)  

[4] A. Lazaric. [Markov Decision Processes and Dynamic Programming](http://researchers.lille.inria.fr/~lazaric/Webpage/MVA-RL_Course14_files/slides-lecture-02-handout.pdf)  

[5] [Dynamic Programming](https://en.wikipedia.org/wiki/Dynamic_programming)  

[6] [Shangtong Zhang&apos;s repo](https://github.com/ShangtongZhang/reinforcement-learning-an-introduction)  

[7] [Policy Improvement theorem](https://stats.stackexchange.com/a/258783)

## Footnotes
[^1]: In the third step, the expression
	\begin{equation}
	\mathbb{E}\_{\pi&apos;}\left[R_{t+1}+\gamma v_\pi(S_{t+1})|S_t=s\right]
	\end{equation}
	means &apos;&apos;the discounted expected value when starting in state $s$, choosing action according to $\pi&apos;$ for the next time step, and following $\pi$ thereafter&quot;. And so on for the two, or n next steps. Therefore, we have that:
	\begin{equation}
	\mathbb{E}\_{\pi&apos;}\left[R_{t+1}+\gamma v_\pi(S_{t+1})|S_t=s\right]=\mathbb{E}\left[R_{t+1}+\gamma v_\pi(S_{t+1})|S_t=s,A_t=\pi&apos;(s)\right]
	\end{equation}  

[^2]: The idea of policy improvement also extends to stochastic policies.
[^3]: Value iteration can be used in conjunction with action-value function, which takes the following update:
	\begin{align}
	q_{k+1}(s,a)&amp;\doteq\mathbb{E}\left[R_{t+1}+\gamma\max_{a&apos;}q_k(S_{t+1},a&apos;)|S_t=s,A_t=a\right] \\\\ &amp;=\sum_{s&apos;,r}p(s&apos;,r|s,a)\left[r+\gamma\max_{a&apos;}q_k(s&apos;,a&apos;)\right]
	\end{align}
	Yep, that&apos;s right, the sequence $\\{q_k\\}\to q_\*$ as $k\to\infty$ at a geometric rate thanks to [Banach&apos;s fixed point theorem]({% post_url 2021-07-10-optimal-policy-existence %}#banach-fixed-pts).</content><author><name>Trung H. Nguyen</name><email>trung.skipper@gmail.com</email></author><category term="artificial-intelligent" /><category term="reinforcement-learning" /><category term="artificial-intelligent" /><category term="reinforcement-learning" /><category term="dynamic-programming" /><category term="my-rl" /><summary type="html">In two previous posts, Markov Decision Process (MDP) and Bellman equations and Optimal Policy Existence, we have known how MDPs, Bellman equations are defined and how they work. In this post, we are going to talk about how these MDPs are solved with Dynamic Programming.</summary></entry><entry><title type="html">Optimal Policy Existence</title><link href="http://localhost:4000/artificial-intelligent/reinforcement-learning/2021/07/10/optimal-policy-existence.html" rel="alternate" type="text/html" title="Optimal Policy Existence" /><published>2021-07-10T13:03:00+07:00</published><updated>2021-07-10T13:03:00+07:00</updated><id>http://localhost:4000/artificial-intelligent/reinforcement-learning/2021/07/10/optimal-policy-existence</id><content type="html" xml:base="http://localhost:4000/artificial-intelligent/reinforcement-learning/2021/07/10/optimal-policy-existence.html">&gt; In the previous post about [**Markov Decision Processes, Bellman equations**]({% post_url 2021-06-27-mdp-bellman-eqn %}), we mentioned that there exists a policy $\pi_\*$ that is better than or equal to all other policies. And now, we are here to prove it.  

&lt;!-- excerpt-end --&gt;
- [Norms, Contractions, Banach&apos;s Fixed-point Theorem](#norms-contractions-banach-fixed-pts)
	- [Norms](#norms)
	- [Contractions](#contractions)
	- [Banach&apos;s Fixed-point Theorem](#banach-fixed-pts)
- [Bellman Operator](#bellman-operator)
- [Proof of the existence](#proof)
- [References](#references)
- [Footnotes](#footnotes)


Before catching the pokémon, we need to prepare ourselves some pokéball.  

## Norms, Contractions, Banach&apos;s Fixed-point Theorem
{: #norms-contractions-banach-fixed-pts}

### Norms
**Definition** (*Norm*)  
Given a vector space $\mathcal{V}\subseteq\mathbb{R}^d$, a function $f:\mathcal{V}\to\mathbb{R}^+\_0$ is a *norm* if and only if
1. If $f(v)=0$ for some $v\in\mathcal{V}$, then $v=0$
2. For any $\lambda\in\mathbb{R},v\in\mathcal{V},f(\lambda v)=\|\lambda\|v$
3. For any $u,v\in\mathbb{R}, f(u+v)\leq f(u)+f(v)$

**Examples** (*Norm*)
1. $\ell^p$ norms: for $p\geq 1$,
\begin{equation}
\Vert v\Vert\_p=\left(\sum_{i=1}^{d}\|v_i\|^p\right)^{1/p}
\end{equation}
2. $\ell^\infty$ norms:
\begin{equation}
\Vert v\Vert_\infty=\max_{1\leq i\leq d}\|v_i\|
\end{equation}
3. $\ell^{\mu,p}$: the weighted variants of these norm are defined as
\begin{equation}
\Vert v\Vert_p=\begin{cases}\left(\sum_{i=1}^{d}\frac{\|v_i\|^p}{w_i}\right)^{1/p}&amp;\text{if }1\leq p\&lt;\infty\\\\ \max_{1\leq i\leq d}\frac{\|v_i\|}{w_i}&amp;\text{if }p=\infty\end{cases}
\end{equation}
4. $\ell^{2,P}$: the matrix-weighted 2-norm is defined as
\begin{equation}
\Vert v\Vert^2\_P=v^\intercal Pv
\end{equation}
Similarly, we can define norms over spaces of functions. For example, if $\mathcal{V}$ is the vector space of functions over domain $\mathcal{X}$ which are *uniformly bounded*[^1], then
\begin{equation}
\Vert f\Vert_\infty=\sup_{x\in\mathcal{X}}\vert f(x)\vert
\end{equation}

**Definition** (*Convergence in norm*)  
Let $\mathcal{V}=(\mathcal{V},\Vert\cdot\Vert)$ be a *normed vector space*[^2]. Let $v_n\in\mathcal{V}$ is a sequence of vectors ($n\in\mathbb{N}$). The sequence ($v_n,n\geq 0$) is said to *converge to* $v\in\mathcal{V}$ in the norm $\Vert\cdot\Vert$, denoted as $v_n\to\_{\Vert\cdot\Vert}v$ if
\begin{equation}
\lim_{n\to\infty}\Vert v_n-v\Vert=0,
\end{equation}
&lt;br/&gt;

**Definition** (*Cauchy sequence*[^3])  
Let ($v_n;n\geq 0$) be a sequence of vectors of a normed vector space $\mathcal{V}=(\mathcal{V},\Vert\cdot\Vert)$. Then $v_n$ is called a *Cauchy sequence* if
\begin{equation}
\lim_{n\to\infty}\sup_{m\geq n}\Vert v_n-v_m\Vert=0
\end{equation}
Normed vector spaces where all Cauchy sequences are convergent are special: we can find examples of normed vector spaces such that some of the Cauchy sequences in the vector space do not have a limit.  
&lt;br/&gt;

**Definition** (*Completeness*)  
A normed vector space $\mathcal{V}=(\mathcal{V},\Vert\cdot\Vert)$ is called *complete* if every Cauchy sequence in $\mathcal{V}$ is convergent in the norm of the vector space.  


### Contractions
**Definition** (*Lipschitz function*, *Contraction*)   
Let $\mathcal{V}=(\mathcal{V},\Vert\cdot\Vert)$ be a normed vector space. A mapping $\mathcal{T}:\mathcal{V}\to\mathcal{V}$ is called *L-Lipschitz* if for any $u,v\in\mathcal{V}$,
\begin{equation}
\Vert\mathcal{T}u-\mathcal{T}v\Vert\leq L\Vert u-v\Vert
\end{equation}
A mapping $\mathcal{T}$ is called a *non-expansion* if it is *Lipschitzian* with $L\leq 1$. It is called a *contraction* if it is *Lipschitzian* with $L&lt;1$. In this case, $L$ is called the *contraction factor of* $\mathcal{T}$ and $\mathcal{T}$ is called an *L-contraction*.  

**Remark**  
If $\mathcal{T}$ is *Lipschitz*, it is also continuous in the sense that if $v_n\to_{\Vert\cdot\Vert}v$, then also $\mathcal{T}v_n\to_{\Vert\cdot\Vert}\mathcal{T}v$. This is because $\Vert\mathcal{T}v_n-\mathcal{T}v\Vert\leq L\Vert v_n-v\Vert\to 0$ as $n\to\infty$.  


### Banach&apos;s Fixed-point Theorem
{: #banach-fixed-pts}
**Definition** (*Banach space*)  
A complete, normed vector space is called a *Banach space*.  
&lt;br/&gt;

**Definition** (*Fixed point*)  
Let $\mathcal{T}:\mathcal{V}\to\mathcal{V}$ be some mapping. The vector $v\in\mathcal{V}$ is called a *fixed point of* $\mathcal{T}$ if $\mathcal{T}v=v$.  
&lt;br/&gt;

**Theorem** (*Banach&apos;s fixed-point*)[^4]      
Let $\mathcal{V}$ be a Banach space and $\mathcal{T}:\mathcal{V}\to\mathcal{V}$ be a $\gamma$-contraction mapping. Then
1. $\mathcal{T}$ admits a *unique fixed point* $v$.
2. For any $v_0\in\mathcal{V}$, if $v_{n+1}=\mathcal{T}v_n$, then $v_n\to_{\Vert\cdot\Vert}v$ with a *geometric convergence rate*[^5]:
\begin{equation}
\Vert v_n-v\Vert\leq\gamma^n\Vert v_0-v\Vert
\end{equation}


## Bellman Operator
Previously, we defined Bellman equation for state-value function $v_\pi(s)$ as:
\begin{align}
v_\pi(s)&amp;=\sum_{a\in\mathcal{A}}\pi(a|s)\sum_{s&apos;\in\mathcal{S},r}p(s&apos;,r|s,a)\left[r+\gamma v_\pi(s&apos;)\right] \\\\\text{or}\quad v_\pi(s)&amp;=\sum_{a\in\mathcal{A}}\pi(a|s)\left(\mathcal{R}^a_s+\gamma\sum_{s&apos;\in\mathcal{S}}\mathcal{P}^a_{ss&apos;}v_\pi(s&apos;)\right)\tag{1}\label{1}
\end{align}
If we let
\begin{align}
\mathcal{P}^\pi_{ss&apos;}&amp;=\sum_{a\in\mathcal{A}}\pi(a|s)\mathcal{P}^a_{ss&apos;}; \\\\\mathcal{R}^\pi_s&amp;=\sum_{a\in\mathcal{A}}\pi(a|s)\mathcal{R}^a_s
\end{align}
then we can rewrite \eqref{1} in another form as
\begin{equation}
v_\pi(s)=\mathcal{R}^\pi_s+\gamma\sum_{s&apos;\in\mathcal{S}}\mathcal{P}^\pi_{ss&apos;}v_\pi(s&apos;)\tag{2}\label{2}
\end{equation}
&lt;br/&gt;
**Definition** (*Bellman operator*)  
We define the *Bellman operator* underlying $\pi,\mathcal{T}:\mathbb{R}^\mathcal{S}\to\mathbb{R}^\mathcal{S}$, by:
\begin{equation}
(\mathcal{T}^\pi v)(s)=\mathcal{R}^\pi_s+\gamma\sum_{s&apos;\in\mathcal{S}}\mathcal{P}^\pi_{ss&apos;}v(s&apos;)
\end{equation}
&lt;br/&gt;
With the help of $\mathcal{T}^\pi$, equation \eqref{2} can be rewrite as:
\begin{equation}
\mathcal{T}^\pi v_\pi=v_\pi\tag{3}\label{3}
\end{equation}
Similarly, we can rewrite the *Bellman optimality equation for* $v_\*$
\begin{align}
v_\*(s)&amp;=\max_{a\in\mathcal{A}}\sum_{s&apos;\in\mathcal{S},r}p(s&apos;,r|s,a)\left[r+\gamma v_\*(s&apos;)\right] \\\\ &amp;=\max_{a\in\mathcal{A}}\left(\mathcal{R}^a_s+\gamma\sum_{s&apos;\in\mathcal{S}}\mathcal{P}^a_{ss&apos;}v_\*(s&apos;)\right)\tag{4}\label{4}
\end{align}
and thus, we can define the *Bellman optimality operator* $\mathcal{T}^\*:\mathcal{R}^\mathcal{S}\to\mathcal{R}^\mathcal{S}$, by:
\begin{equation}
(\mathcal{T}^\* v)(s)=\max_{a\in\mathcal{A}}\left(\mathcal{R}^a_s+\gamma\sum_{s&apos;\in\mathcal{S}}\mathcal{P}^a_{ss&apos;}v(s&apos;)\right)
\end{equation}
And thus, with the help of $\mathcal{T}^\*$, we can rewrite the equation \eqref{4} as:
\begin{equation}
\mathcal{T}^\*v_\*=v_\*\tag{5}\label{5}
\end{equation}
&lt;br/&gt;
Now everything is all set, we can move on to the next step.  

## Proof of the existence
{: #proof}
- Let $B(\mathcal{S})$ be the space of *uniformly bounded functions* with domain $\mathcal{S}$:
\begin{equation}
B(\mathcal{S})=\\{v:\mathcal{S}\to\mathbb{R}:\Vert v\Vert_\infty&lt;+\infty\\}
\end{equation}
- We will view $B(\mathcal{S})$ as a normed vector space with the norm $\Vert\cdot\Vert_\infty$. It is easily seen that $(B(\mathcal{S}),\Vert\cdot\Vert_\infty)$ is complete: If ($v_n;n\geq0$) is a Cauchy sequence in it then for any $s\in\mathcal{S}$, ($v_n(s);n\geq0$) is also a Cauchy sequence over the reals. Denoting by $v(s)$ the limit of ($v_n(s)$), we can show that $\Vert v_n-v\Vert_\infty\to0$. Vaguely speaking, this holds because ($v_n;n\geq0$) is a Cauchy sequence in the norm $\Vert\cdot\Vert_\infty$  so the rate of convergence of $v_n(s)$ to $v(s)$ is independent of $s$.   

- Pick any stationary policy $\pi$.
- We have that $\mathcal{T}^\pi$ is *well-defined* since: if $u\in B(\mathcal{S})$, then also $\mathcal{T}^\pi u\in B(S)$.
- From equation \eqref{3}, we have that $v_\pi$ is a fixed point to $\mathcal{T}^\pi$.  
We also have that $\mathcal{T}^\pi$ is a $\gamma$-contraction in $\Vert\cdot\Vert_\infty$ since for any $u, v\in B(\mathcal{S})$,
\begin{align}
\Vert\mathcal{T}^\pi u-\mathcal{T}^\pi v\Vert_\infty&amp;=\gamma\max_{s\in\mathcal{S}}\left|\sum_{s&apos;\in\mathcal{S}}\mathcal{P}^\pi_{ss&apos;}\left(u(s&apos;)-v(s&apos;)\right)\right| \\\\ &amp;\leq\gamma\max_{s\in\mathcal{S}}\sum_{s&apos;\in\mathcal{S}}\mathcal{P}^\pi_{ss&apos;}\left|u(s&apos;)-v(s&apos;)\right| \\\\ &amp;\leq\gamma\max_{s\in\mathcal{S}}\sum_{s&apos;\in\mathcal{S}}\mathcal{P}^\pi_{ss&apos;}\Vert u-v\Vert_\infty \\\\ &amp;=\gamma\Vert u-v\Vert_\infty,
\end{align}
where the last line follows from $\sum_{s&apos;\in\mathcal{S}}\mathcal{P}^\pi_{ss&apos;}=1$.
- It follows that in order to find $v_\pi$, we can construct the sequence $v_0,\mathcal{T}^\pi v_0,(\mathcal{T}^\pi)^2 v_0,\dots$, which, by Banach&apos;s fixed-point theorem will converge to $v_\pi$ at a geometric rate.
- From the definition \eqref{5} of $\mathcal{T}^\*$, we have that $\mathcal{T}^\*$ is well-defined.
- Using the fact that $\left|\max_{a\in\mathcal{A}}f(a)-\max_{a\in\mathcal{A}}g(a)\right|\leq\max_{a\in\mathcal{A}}\left|f(a)-g(a)\right|$, similarly, we have:
\begin{align}
\Vert\mathcal{T}^\*u-\mathcal{T}^\*v\Vert_\infty&amp;\leq\gamma\max_{(s,a)\in\mathcal{S}\times\mathcal{A}}\sum_{s&apos;\in\mathcal{S}}\mathcal{P}^a_{ss&apos;}\left|u(s&apos;)-v(s&apos;)\right| \\\\ &amp;\leq\gamma\max_{(s,a)\in\mathcal{S}\times\mathcal{A}}\sum_{s&apos;\in\mathcal{S}}\mathcal{P}^a_{ss&apos;}\Vert u-v\Vert_\infty \\\\ &amp;=\gamma\Vert u-v\Vert_\infty,
\end{align}
which tells us that $\mathcal{T}^\*$ is a $\gamma$-contraction in $\Vert\cdot\Vert_\infty$.
&lt;br/&gt;

**Theorem**  
Let $v$ be the fixed point of $\mathcal{T}^\*$ and assume that there is policy $\pi$ which is greedy w.r.t $v:\mathcal{T}^\pi v=\mathcal{T}^\* v$. Then $v=v_\*$ and $\pi$ is an optimal policy.  
***Proof***  
Pick any stationary policy $\pi$. Then $\mathcal{T}^\pi\leq\mathcal{T}^\*$ in the sense that for any function $v\in B(\mathcal{S})$, $\mathcal{T}^\pi v\leq\mathcal{T}^\* v$ holds ($u\leq v$ means that $u(s)\leq v(s),\forall s\in\mathcal{S}$).  
Hence, for all $n\geq0$,
\begin{equation}
v_\pi=\mathcal{T}^\pi v_\pi\leq\mathcal{T}^\*v_\pi\leq(\mathcal{T}^\*)^2 v_\pi\leq\dots\leq(\mathcal{T}^\*)^n v_\pi
\end{equation}
or
\begin{equation}
v_\pi\leq(\mathcal{T}^\*)^n v_\pi
\end{equation}
Since $\mathcal{T}^\*$ is a contraction, the right-hand side converges to $v$, the unique fixed point of $\mathcal{T}^\*$. Thus, $v_\pi\leq v$. And since $\pi$ was arbitrary, we obtain that $v_\*\leq v$.  
Pick a policy $\pi$ such that $\mathcal{T}^\pi v=\mathcal{T}^\*v$, then $v$ is also a fixed point of $\mathcal{V}^\pi$. Since $v_\pi$ is the unique fixed point of $\mathcal{T}^\pi$, we have that $v=v_\pi$, which shows that $v_\*=v$ and that $\pi$ is an optimal policy.  


## References
[1] Csaba Szepesvári. [Algorithms for Reinforcement Learning](https://www.amazon.com/Algorithms-Reinforcement-Synthesis-Artificial-Intelligence/dp/1608454924)  

[2] A. Lazaric. [Markov Decision Processes and Dynamic Programming](http://researchers.lille.inria.fr/~lazaric/Webpage/MVA-RL_Course14_files/slides-lecture-02-handout.pdf)  

[3] [What is the Bellman operator in reinforcement learning?](https://ai.stackexchange.com/a/11133)  

[4] Richard S. Sutton &amp; Andrew G. Barto. [Reinforcement Learning: An Introduction](https://mitpress.mit.edu/books/reinforcement-learning-second-edition)  

[5] [Normed vector space](https://en.wikipedia.org/wiki/Normed_vector_space)


## Footnotes
[^1]: A function is called *uniformly bounded* exactly when $\Vert f\Vert_\infty&lt;+\infty$.
[^2]: A *normed vector space* is a vector space over the real or complex number, on which a norm is defined.
[^3]: We are gonna talk further about *sequences* in another [post]({% post_url 2021-09-06-infinite-series-of-constants %}#convergent-sequences).
[^4]: ***Proof***  
	Pick any $v_0\in\mathcal{V}$ and define $v_n$ as in the statement of the theorem. a. We first demonstrate that $(v_n)$ converges to some vector. b. Then we will show that this vector is a fixed point to $\mathcal{T}$. c. Finally, we show that $\mathcal{T}$ has a single fixed point. Assume that $\mathcal{T}$ is a $\gamma$-contraction.  
	a. To show that $(v_n)$ converges, it suffices  to show that $(v_n)$ is a Cauchy sequence. We have:
	\begin{align}
	\Vert v_{n+1}-v_n\Vert&amp;=\Vert\mathcal{T}v_{n}-\mathcal{T}v_{n-1}\Vert \\\\ &amp;\leq\gamma\Vert v_{n}-v_{n-1}\Vert \\\\ &amp;\quad\vdots \\\\ &amp;\leq\gamma^n\Vert v_1-v_0\Vert
	\end{align}
	From the properties of norms, we have:
	\begin{align}
	\Vert v_{n+k}-v_n\Vert&amp;\leq\Vert v_{n+1}-v_n\Vert+\dots+\Vert v_{n+k}-v_{n+k-1}\Vert \\\\ &amp;\leq\left(\gamma^n+\dots+\gamma^{n+k-1}\right)\Vert v_1-v_0\Vert \\\\ &amp;=\gamma^n\dfrac{1-\gamma^{k}}{1-\gamma}\Vert v_1-v_0\Vert
	\end{align}
	and so
	\begin{equation}
	\lim_{n\to\infty}\sup_{k\geq0}\Vert v_{n+k}-v_n\Vert=0,
	\end{equation}
	shows us that $(v_n;n\geq0)$ is indeed a Cauchy sequence. Let $v$ be its limit.  
	b. Recall that the definition of the sequence $(v_n;n\geq0)$
	\begin{equation}
	v_{n+1}=\mathcal{T}v_n
	\end{equation}
	Taking the limes as $n\to\infty$ of both sides, one the one hand, we get that $v_{n+1}\to _{\Vert\cdot\Vert}v$. On the other hand, $\mathcal{T}v_n\to _{\Vert\cdot\Vert}\mathcal{T}v$, since $\mathcal{T}$ is a contraction, hence it is continuous. Therefore, we must have $v=\mathcal{T}v$, which tells us that $v$ is a fixed point of $\mathcal{T}$.  
	c. Let us assume that $v,v&apos;$ are both fixed points of $\mathcal{T}$. Then,
	\begin{align}
	\Vert v-v&apos;\Vert&amp;=\Vert\mathcal{T}v-\mathcal{v&apos;}\Vert \\\\ &amp;\leq\gamma\Vert v-v&apos;\Vert \\\\ \text{or}\quad(1-\gamma)\Vert v-v&apos;\Vert&amp;\leq0
	\end{align}
	Thus, we must have that $\Vert v-v&apos;\Vert=0$. Therefore, $v-v&apos;=0$ or $v=v&apos;$.  
	And finally,
	\begin{align}
	\Vert v_n-v\Vert&amp;=\Vert\mathcal{T}v\_{n-1}-\mathcal{T}v\Vert \\\\ &amp;\leq\gamma\Vert v\_{n-1}-v\Vert \\\\ &amp;\quad\vdots \\\\ &amp;\leq\gamma^n\Vert v_0-v\Vert
	\end{align}

[^5]: Also, there&apos;s gonna be a post about *rate of convergence*.</content><author><name>Trung H. Nguyen</name><email>trung.skipper@gmail.com</email></author><category term="artificial-intelligent" /><category term="reinforcement-learning" /><category term="artificial-intelligent" /><category term="reinforcement-learning" /><category term="mathematics" /><category term="my-rl" /><summary type="html">In the previous post about Markov Decision Processes, Bellman equations, we mentioned that there exists a policy $\pi_*$ that is better than or equal to all other policies. And now, we are here to prove it.</summary></entry><entry><title type="html">Measures</title><link href="http://localhost:4000/random-stuffs/measure-theory/2021/07/03/measure.html" rel="alternate" type="text/html" title="Measures" /><published>2021-07-03T07:00:00+07:00</published><updated>2021-07-03T07:00:00+07:00</updated><id>http://localhost:4000/random-stuffs/measure-theory/2021/07/03/measure</id><content type="html" xml:base="http://localhost:4000/random-stuffs/measure-theory/2021/07/03/measure.html">&gt; When talking about *measure*, you might associate it with the idea of *length*, the measurement of something in one dimension. And then probably, you will extend your idea into two dimensions with *area*, or even three dimensions with *volume*.  

&lt;!-- excerpt-end --&gt;
Despite of having different number of dimensions, all *length*, *area*, *volume* share the same properties:  

1. *Non-negative*: In principle, length, area, and volume can be any positive value. But negative length has no meaning. Same thing happens with negative area and negative volume.
2. *Additivity*: To get from Hanoi to Singapore by air, you have to transit at Ho Chi Minh city (HCMC). If we cut that path into two non-overlapping pieces, say Hanoi - HCMC, and HCMC - Singapore, then the total length of the two pieces must be equal to the length of original path. If we divide a rectangular into non-overlapping pieces, the area of pieces combined must be the same as the original one. The same is true for volume as well.
3. *Empty Set*: An empty cup of water has volume zero.
4. *Other Null Sets*: The length of a point is 0. The area of a line, or a curve is 0. The volume of a plane or a surface is 0.
5. *Translation Invariance*: Length, area and volume are unchanged (*invariant*) under shifts (*translation*) in space.
6. *Hyper-rectangles*: An interval of form $[a, b]\subset\mathbb{R}^3$ has length $b-a$. The area of a rectangle $[a_1,b_1]\times[a_2,b_2]$ is $(b_1-a_1)(b_2-a_2)$. And the volume of a rectangular $[a_1,b_1]\times[a_2,b_2]\times[a_3,b_3]$ is $(b_1-a_1)(b_2-a_2)(b_3-a_3)$.  

![Lego](/assets/images/lego.jpg)  
&lt;br/&gt;

- [Lebesgue Measure](#lebesgue-measure)
- [Measures](#measures)
- [Integration with respect to a Measure: The Idea](#int-measure-idea)
- [Properties of the Integral](#prop-int)
- [Integration with respect to a Measure: The Details](#int-measure-detail)
- [Constructing Measures from old ones](#construct-measure)
- [Other types of Measures](#other-types)
- [References](#references)
- [Other Resources](#other-resources)
- [Footnotes](#footnotes)

## Lebesgue Measure
Is an extension of the classical notion of length in $\mathbb{R}$, area in $\mathbb{R}^2$ to any $\mathbb{R}^k$ using k-dimensional hyper-rectangles.

**Definition**  
Given an open set $S\equiv\sum_k(a_k,b_k)$ containing disjoint intervals, the **Lebesgue measure** is defined by:
\begin{equation}
\mu_L(S)\equiv\sum_{k}(b_k-a_k)
\end{equation}
Given a closed set $S&apos;\equiv[a,b]-\sum_k(a_k,b_k)$,
\begin{equation}
\mu_L(S&apos;)\equiv(b-a)-\sum_k(b_k-a_k)
\end{equation}

## Measures
**Definition**  
Let $\mathcal{X}$ be any set. A *measure* on $\mathcal{X}$ is a function $\mu$ that maps the set of subsets on $\mathcal{X}$ to $[0,\infty]$ ($\mu:2^\mathcal{X}\rightarrow[0,\infty]$) that satisfies:
1. $\mu(\emptyset)=0$
2. *Countable additivity property*: for any countable and pairwise disjoint collection of subsets of $\mathcal{X},\mathcal{A_1},\mathcal{A_2},\dots$,
\begin{equation}
\mu\left(\bigcup_i\mathcal{A_i}\right)=\sum_i\mu(\mathcal{A_i})
\end{equation}
$\mu(\mathcal{A})$ is called *measure of the set $\mathcal{A}$*, or *measure of $\mathcal{A}$*.

**Properties**    
1. *Monotonicity*: If $\mathcal{A}\subset\mathcal{B}$, then $\mu(\mathcal{A})\leq\mu(\mathcal{B})$
2. *Subadditivity*: If $\mathcal{A_1},\mathcal{A_2},\dots$ is a countable collection of sets, not necessarily disjoint, then
\begin{equation}
\mu\left(\bigcup_i\mathcal{A_i}\right)\leq\sum_i\mu(\mathcal{A_i})
\end{equation}

**Examples**
1. *Cardinality of a set* $$\#\mathcal{A}$$
2. *A point mass at 0*. Consider a measure $$\delta_{\{0\}}$$ on $\mathbb{R}$ defined to give measure 1 to any set that contains 0 and measure 0 to any set that does not
\begin{equation}\delta_{\{0\}}(\mathcal{A})=\\#\left(A\cap\\{0\\}\right)=\begin{cases}
1\quad\textsf{if }0\in\mathcal{A} \\\\ 0\quad\textsf{otherwise}
\end{cases}\end{equation}
for $\mathcal{A}\subset\mathbb{R}$
3. *Counting measure on the integers*. Consider a measure $\mu_\mathbb{Z}$ that assigns to each set $\mathcal{A}$ the number of integers contained in $\mathcal{A}$
\begin{equation}
\delta_\mathbb{Z}(\mathcal{A})=\\#\left(\mathcal{A}\cap\mathbb{Z}\right)
\end{equation}
4. *Geometric measure*. Suppose that $0\&lt;r&lt;1$. We define a measure on $\mathbb{R}$ that assigns to a set $\mathcal{A}$ a geometrically weighted sum over non-negative integers in $\mathcal{A}$
\begin{equation}
\mu(\mathcal{A})=\sum_{i\in\mathcal{A}\cap\mathbb{Z}^+}r^i
\end{equation}
5. *Binomial measure*. Let $n\in\mathbb{N}^+$ and let $0\&lt;p&lt;1$. We define $\mu$ as:
\begin{equation}
\mu(\mathcal{A})=\sum_{k\in\mathcal{A}\cap\\{0,1,\dots,n\\}}{n\choose k}p^k(1-p)^{n-k}
\end{equation}
6. *Bivariate Gaussian*. We define a measure on $\mathbb{R}^2$ by:
\begin{equation}
\mu({\mathcal{A}})=\int_\mathcal{A}\dfrac{1}{2\pi}\exp\left({\dfrac{-1}{2}(x^2+y^2)}\right)\,dx\,dy
\end{equation}
7. *Uniform on a Ball in $\mathbb{R}^3$*. Let $\mathcal{B}$ be the set of points in $\mathbb{R}^3$ that are within a distance 1 from the origin (unit ball in $\mathbb{R}^3$). We define a measure on $\mathbb{R}^3$ as:
\begin{equation}
\mu(\mathcal{A})=\dfrac{3}{4\pi}\mu_L(\mathcal{A}\cap\mathcal{B})
\end{equation}

## Integration with respect to a Measure: The Idea
{: #int-measure-idea}
Consider $f:\mathcal{X}\rightarrow\mathbb{R}$, where $\mathcal{X}$ is any set and a measure $\mu$ on $\mathcal{X}$ and compute the integral of $f$ w.r.t $\mu$: $\int f(x)\,\mu(dx)$. We have:
1. For any function $f$,
\begin{equation}
\int g(x)\,\mu_L(dx)=\int g(x)\,dx
\end{equation}
Because $\mu_L(dx)\equiv\mu_L([x,x+dx[)=dx$
2. For any function $f$,
\begin{equation}
\int g(x)\,\delta_{\\{\alpha\\}}(dx)=g(\alpha)
\end{equation}
Consider the infinitesimal $\delta_{\\{\alpha\\}}(dx)$ as $x$ ranges over $\mathbb{R}$. If $x\neq\alpha$, then the infinitesimal interval $[x,x+dx[$ does not contain $\alpha$, so
\begin{equation}
\delta_{\\{\alpha\\}}(dx)\equiv\delta_{\\{\alpha\\}}([x,x+dx[)=0
\end{equation}
If $x=\alpha,\delta_{\\{\alpha\\}}(dx)\equiv\delta_{\\{\alpha\\}}([x,x+dx[)=1$. Thus, when we add up all of the infinitesimals, we get $g(\alpha)\cdot1=g(\alpha)$
3. For any function $f$,
\begin{equation}
\int g(x)\,\delta_\mathbb{Z}(dx)=\sum_{i\in\mathbb{Z}}g(i)
\end{equation}
Similarly, consider the infinitesimal $\delta_\mathbb{Z}(dx)$ as $x$ ranges over $\mathbb{R}$. If $x\notin\mathbb{Z}$, then $\delta_\mathbb{Z}(dx)\equiv\delta_\mathbb{Z}([x,x+dx[)=0$. And otherwise if $x\in\mathbb{Z}$, $\delta_\mathbb{Z}(dx)\equiv\delta_\mathbb{Z}([x,x+dx[)=1$ since an infinitesimal interval can contain at most one integer. Hence, $g(x)\,\delta_\mathbb{Z}=g(x)$ if $x\in\mathbb{Z}$ and $=0$ otherwise. When we add up all of the infinitesimals over $x$, we get the sum above.
4. Suppose $\mathcal{C}$ is a countable set. We can define *counting measure* on $\mathcal{C}$ to map $\mathcal{A}\rightarrow\\#(\mathcal{A}\cap\mathcal{C})$ (recall that $\delta_\mathcal{C}(\mathcal{A})=\\#(\mathcal{A}\cap\mathcal{C})$). For any function $f$,
\begin{equation}
\int g(x)\,\delta_\mathcal{C}(dx)=\sum_{v\in\mathcal{C}}g(v),
\end{equation}
using the same basic argument as in the above example.  

From the above examples, we have that *integrals w.r.t to Lebesgue measure are just ordinary integrals, and that integrals w.r.t Counting measure are just ordinary summation*.  
Consider measures built from Lebesgue and Counting measure, we have:
1. Suppose $\mu$ is a measure that satisfies $\mu(dx)=f(x)\,\mu_L(dx)$, then for any function $g$,
\begin{equation}
\int g(x)\,\mu(dx)=\int g(x)\,f(x)\,\mu_L(dx)=\int g(x)\,f(x)\,dx
\end{equation}
We say that $f$ is the density of $\mu$ w.r.t Lebesgue measure in this case.
2. Suppose $\mu$ is a measure that satisfies $\mu(dx)=p(x)\delta_\mathcal{C}(dx)$ for a countable set $\mathcal{C}$, then for any function g,
\begin{equation}
\int g(x)\,\mu(dx)=\int g(x)\,p(x)\,\delta_\mathcal{C}(dx)=\sum_{v\in\mathcal{C}}g(v)\,f(v)
\end{equation}
We say that $p$ is the density of $\mu$ w.r.t Counting measure on $\mathcal{C}$.

## Properties of the Integral
{: #prop-int}
A function is said to be *integrable* w.r.t $\mu$ if $\int|f(x)|\,\mu(dx)&lt;\infty$. An integrable function has a well-defined and finite integral. If $f(x)\geq0$, the integral is always well-defined but may be $\infty$.  
Suppose $\mu$ is a measure on $\mathcal{X},\mathcal{A}\subset\mathcal{X}$, and $g$ is a real-valued function on $\mathcal{X}$. We define the integral of $g$ over the set $\mathcal{A}$, denoted by $\int_\mathcal{A}g(x)\,\mu(dx)$, as
\begin{equation}
\int_\mathcal{A}g(x)\,\mu(dx)=\int g(x)\,𝟙\_\mathcal{A}(x)\,\mu(dx),
\end{equation}
where $$𝟙_\mathcal{A}$$ is an *indicator function* ($$𝟙_\mathcal{A}(x)=1$$ if $x\in\mathcal{A}$, and $=0$ otherwise).  

Let $\mu$ is a measure on $\mathcal{X},\mathcal{A},\mathcal{B}\subset\mathcal{X},c\in\mathbb{R}$ and $f,g$ are integrable functions. The following properties hold for every $\mu$
1. *Constant Functions*
\begin{equation}
\int_\mathcal{A}c\,\mu(dx)=c\cdot\mu(\mathcal{A})
\end{equation}
2. *Linearity*
\begin{align}
\int_\mathcal{A}cf(x)\,\mu(dx)&amp;=c\int_\mathcal{A}f(x)\,\mu(dx) \\\\\int_\mathcal{A}\left(f(x)+g(x)\right)\,\mu(dx)&amp;=\int_\mathcal{A}f(x)\,\mu(dx)+\int_\mathcal{A}g(x)\,\mu(dx)
\end{align}
3. *Monotonicity*. If $f\leq g$, then $\int_\mathcal{A}f(x)\,\mu(dx)\leq\int_\mathcal{A}g(x)\,\mu(dx),\forall\mathcal{A}$. This implies:
- If $f\geq0$, then $\int f(x)\,\mu(dx)\geq0$.
- If $f\geq0$ and $\mathcal{A}\subset\mathcal{B}$, then $\int_\mathcal{A}f(x)\,\mu(dx)\leq\int_\mathcal{B}f(x)\,\mu(dx)$.
4. *Null Sets*. If $\mu(\mathcal{A})=0$, then $\int_\mathcal{A}f(x)\,\mu(dx)=0$.
5. *Absolute Values*
\begin{equation}
\left|\int f(x)\,\mu(dx)\right|\leq\int\left|f(x)\right|\,\mu(dx)
\end{equation}
6. *Monotone Convergence*. If $0\leq f_1\leq f_2\leq\dots$ is an increasing sequence of integrable functions that converge to $f$, then
\begin{equation}
\lim_{k\to\infty}\int f_k(x)\,\mu(dx)=\int f(x)\,\mu(dx)
\end{equation}
7. *Linearity in region of integration*. If $\mathcal{A}\cap\mathcal{B}=\emptyset$,
\begin{equation}
\int_{\mathcal{A}\cup\mathcal{B}}f(x)\,\mu(dx)=\int_\mathcal{A}f(x)\,\mu(dx)+\int_\mathcal{B}f(x)\,\mu(dx)
\end{equation}

## Integration with respect to a Measure: The Details
{: #int-measure-detail}
1. **Step 1**. Define the integral for simple functions.
- *Simple function*: is a function that takes only a finite number of different values.
		- All constant functions are simple functions.
		- The indicator function ($𝟙_\mathcal{A}$) of a set $\mathcal{A}\subset\mathcal{X}$ is a simple function (taking values in $\\{0,1\\}$).
		- Any constant times an indicator ($c𝟙_\mathcal{A}$) is also a simple function (taking values in $\\{0,c\\}$).
		- Similarly, given disjoint sets $\mathcal{A_1},\mathcal{A_2}$, the linear combination $$c_1𝟙_\mathcal{A_1}+c_2𝟙_\mathcal{A_2}$$ is a simple function (taking values in $\\{0,c_1,c_2\\}$)[^1].
		- In fact, any simple function can be expressed as a linear combination of a finite number of indicator functions. That is, if $f$ is *any* simple function on $\mathcal{X}$, then there exists some finite integer $n$, non-zero constants $c_1,\dots,c_n$ and *disjoint* sets $\mathcal{A_1},\dots\mathcal{A_n}\subset\mathcal{X}$ such that
		\begin{equation}
		f=c_1𝟙\_\mathcal{A_1}+\dots+c_n𝟙\_\mathcal{A_n}
		\end{equation}
- So, if $f:\mathcal{X}\to\mathbb{R}$ is a simple function as just defined, we have that
\begin{equation}
\int \mu(dx)=c_1\mu(\mathcal{A_1})+\dots+c_n\mu(\mathcal{A_n})
\end{equation}
2. **Step 2**. Define the integral for general non-negative functions, approximating the general function by simple functions.
- The idea is that we can approximate any general non-negative function $f:\mathcal{X}\to[0,\infty[$ well by some non-negative simple functions that $\leq f$ [^2].
- If $f:\mathcal{X}\to[0,\infty[$ is a general function and $0\leq s\leq f$ is a simple function (then $\int s(x)\,\mu(dx)\leq\int f(x)\,\mu(dx)$). The closer that $s$ approximates $f$, the closer we expect $\int s(x)\,\mu(dx)$ and $\int f(x)\,\mu(x)$ to be.
- To be more precise, we define the integral $\int f(x)\,\mu(dx)$ to be the smallest value $I$ such that $\int s(x)\,\mu(x)\leq I$, for all simple functions $0\leq s\leq f$.
\begin{equation}
\int f(x)\,\mu(dx)\approx\sup\left\\{\int s(x)\,\mu(dx)\right\\}
\end{equation}
3. **Step 3**. Define the integral for general real-valued functions by separately integrating the positive and negative parts of the function.
- If $f:\mathcal{X}\to\mathbb{R}$ is a general function, we can define its *positive part* $f^+$ and its *negative part* $f^-$ by
\begin{align}
f^+(x)&amp;=\max\left(f(x),0\right) \\\\ f^-(x)&amp;=\max\left(-f(x),0\right)
\end{align}
- Since both $f^+$ and $f^-$ are non-negative functions and $f=f^+-f^-$, we have
\begin{equation}
\int f(x)\,\mu(dx)=\int f^+(x)\,\mu(dx)-\int f^-(x)\,\mu(dx)
\end{equation}
This is a well-defined number (possibly infinite) if and only if at least one of $f^+$ and $f^-$ has a finite integral.

## Constructing Measures from old ones
{: #construct-measure}
1. *Sums and multiples*  
- Consider the point mass measures at 0 and 1, $$\delta_{\\{0\\}},\delta_{{1}}$$, and construct a two new measures on $\mathbb{R}$, $$\mu=\delta_{\\{0\\}}+\delta_{\\{1\\}}$$ and $$v=4\delta_{\\{0\\}}$$, defined by
\begin{align}
\mu(\mathcal{A})&amp;=\delta_{\\{0\\}}(\mathcal{A})+\delta_{\\{0\\}}(\mathcal{A}) \\\\ v(\mathcal{A})&amp;=4\delta_{\\{0\\}}(\mathcal{A})
\end{align}
- The measure $\mu$ counts how many elements of $$\\{0,1\\}$$ are in its argument. Thus, the counting measure of the integers can be re-expressed as
\begin{equation}
\delta_\mathbb{Z}=\sum_{i=-\infty}^{\infty}\delta_{\\{i\\}}
\end{equation}
- By combining the operations of summation and multiplication, we can write the Geometric measure in the above example 
\begin{equation}
\sum_{i=0}^{\infty}r^i\delta_{\\{i\\}}
\end{equation}
2. *Restriction to a Subset*
- Suppose $\mu$ is a measure on $\mathcal{X}$ and $\mathcal{B}\subset\mathcal{X}$. We can define a new measure on $\mathcal{B}$ which maps $\mathcal{A}\subset\mathcal{B}\to\mu(\mathcal{A})$. This is called the restriction of $\mu$ to the set $\mathcal{B}$.
3. *Measure Induced by a Function*
- Suppose $\mu$ is a measure on $\mathcal{X}$ and $g:\mathcal{X}\to\mathcal{Y}$. We can use $\mu$ and $g$ to define a new measure $v$ on $\mathcal{Y}$ by
\begin{equation}
v(\mathcal{A})=\mu(g^{-1}(\mathcal{A})),
\end{equation}
for $\mathcal{A}\subset\mathcal{Y}$. This is called the *measure induced from $\mu$ by $g$*.
- Therefore, for any $f:\mathcal{Y}\to\mathbb{R}$,
\begin{equation}
\int f(y)\,v(dy)=\int f(g(x))\,\mu(dx)
\end{equation}
4. *Integrating a Density*
- Suppose $\mu$ is a measure on $\mathcal{X}$ and $f:\mathcal{X}\to\mathbb{R}$. We can define a new measure $v$ on $\mathcal{X}$ as
\begin{equation}
v(\mathcal{A})=\int_\mathcal{A}f(x)\,\mu(dx)\tag{1}\label{1}
\end{equation}
We say that $f$ is the *density* of the measure $v$ w.r.t $\mu$.
- If $v,\mu$ are measures for which the equation \eqref{1} holds for every $\mathcal{A}\subset\mathcal{X}$, we say that $v$ has a density $f$ w.r.t $\mu$. This implies two useful results:
		- $\mu(\mathcal{A})=0$ implies $v(\mathcal{A})=0$.
		- $v(dx)=f(x)\,\mu(dx)$.

## Other types of Measures
{: #other-types}
Suppose that $\mu$ is a measure on $\mathcal{X}$
1. If $\mu(\mathcal{X})=\infty$, we say that $\mu$ is an *infinite measure*.
2. If $\mu(\mathcal{X}&lt;\infty)$, we say that $\mu$ is a *finite measure*.
3. If $\mu(\mathcal{X}&lt;1)$, we say that $\mu$ is a *probability measure*.
4. If there exists a countable set $\mathcal{S}$ such that $\mu(\mathcal{X}-\mathcal{S})=0$, we say that $\mu$ is a *discrete measure*. Equivalently, $\mu$ has a density w.r.t *counting measure* on $\mathcal{S}$.
5. If $\mu$ has a density w.r.t Lebesgue measure, we say that $\mu$ is a *continuous measure*.
6. If $\mu$ is neither *continuous* nor *discrete*, we say that $\mu$ is a *mixed measure*.

## References
[1] Literally, this post is mainly written from a source that I&apos;ve lost the reference :(. Hope that I can update this line soon.  

[2] [Lebesgue Measure](https://mathworld.wolfram.com/LebesgueMeasure.html)  

[3] [Measure Theory for Probability: A Very Brief Introduction](https://www.countbayesie.com/blog/2015/8/17/a-very-brief-and-non-mathematical-introduction-to-measure-theory-for-probability)

## Other Resources
1. [Music and Measure Theory - 3Blue1Brown](https://www.youtube.com/watch?v=cyW5z-M2yzw) - this is one of my favourite Youtube channels.

## Footnotes
[^1]: If $\mathcal{A_1},\mathcal{A_2}$ were not disjoint, we could define $\mathcal{B_1}=\mathcal{A_1}-\mathcal{A_2}$, $\mathcal{B_2}=\mathcal{A_2}-\mathcal{A_1}$, and $\mathcal{B_3}=\mathcal{A_1}\cap\mathcal{A_2}$. Then the function is equal to $$c_1𝟙_\mathcal{B_1}+c_2𝟙_\mathcal{B_2}+(c_1+c_2)𝟙_\mathcal{B_3}$$.
[^2]:</content><author><name>Trung H. Nguyen</name><email>trung.skipper@gmail.com</email></author><category term="random-stuffs" /><category term="measure-theory" /><category term="mathematics" /><category term="measure-theory" /><category term="random-stuffs" /><summary type="html">When talking about measure, you might associate it with the idea of length, the measurement of something in one dimension. And then probably, you will extend your idea into two dimensions with area, or even three dimensions with volume.</summary></entry><entry><title type="html">Markov Decision Processes, Bellman equations</title><link href="http://localhost:4000/artificial-intelligent/reinforcement-learning/2021/06/27/mdp-bellman-eqn.html" rel="alternate" type="text/html" title="Markov Decision Processes, Bellman equations" /><published>2021-06-27T08:00:00+07:00</published><updated>2021-06-27T08:00:00+07:00</updated><id>http://localhost:4000/artificial-intelligent/reinforcement-learning/2021/06/27/mdp-bellman-eqn</id><content type="html" xml:base="http://localhost:4000/artificial-intelligent/reinforcement-learning/2021/06/27/mdp-bellman-eqn.html">&gt; You may have known or heard vaguely about a computer program called **AlphaGo** - the AI has beaten Lee Sedol - the winner of 18 world Go titles. One of the techniques it used is called **self-play** against its other instances, with **Reinforcement Learning**.  

&lt;!-- excerpt-end --&gt;
- [What is Reinforcement Learning?](#what-is-rl)
- [Markov Decision Processes (MDPs)](#mdp)
	- [Return](#return)
	- [Policy](#policy)
	- [Value Function](#value-function)
	- [Optimal Policy and Optimal Value Function](#opt-policy-opt-value-func)
- [Bellman Equations](#bellman-equations)
	- [Bellman Backup Diagram](#bellman-backup-diagram)
	- [Bellman Optimality Equations](#bellman-optimality-equations)
	- [Backup diagram for $v_\*$ and $q_\*$](#backup-vq)
- [References](#references)


#### What is Reinforcement Learning?
{: #what-is-rl}
Say, there is an unknown **environment** that we&apos;re trying to put an **agent** on. By interacting with the **agent** through taking **actions** that gives rise to **rewards** continually, the **agent** learns a **policy** that maximize the cumulative **rewards**.  
**Reinforcement Learning (RL)**, roughly speaking, is an area of Machine Learning that describes methods aimed to learn a good strategy (called **policy**) for the **agent** from experimental trials and relative simple feedback received. With the optimal **policy**, the **agent** is capable to actively adapt to the environment to maximize future **rewards**.
![RL](/assets/images/robot.png)

#### Markov Decision Processes (MDPs)
{: #mdp}
**Markov decision processes (MDPs)** formally describe an environment for **RL**. And almost all **RL** problems can be formalized as **MDPs**.  

**Definition (MDP)**  
A **Markov Decision Process** is a tuple $⟨\mathcal{S}, \mathcal{A}, \mathcal{P}, \mathcal{R}, \gamma⟩$
- $\mathcal{S}$ is a set of states called *state space*
- $\mathcal{A}$ is a set of actions called *action space*
- $\mathcal{P}$ is a state transition probability matrix  
	$$\mathcal{P}^a_{ss&apos;}=P(S_{t+1}=s&apos;|S_t=s,A_t=a)$$
- $\mathcal{R}$ is a reward function  
	$$\mathcal{R}^a_s=\mathbb{E}\left[R_{t+1}|S_t=s,A_t=a\right]$$
- $\gamma\in[0, 1]$ is a discount factor for future reward

**MDP** is an extension of [Markov chain]({% post_url 2021-06-19-markov-chain %}). If only one action exists for each state, and all rewards are the same, an **MDP** reduces to a *Markov chain*. All states in **MDP** has [Markov property]({% post_url 2021-06-19-markov-chain %}#markov-property), referring to the fact that the current state captures all relevant information from the history.
\begin{equation}
P(S_{t+1}|S_t)=P(S_{t+1}|S_1,\dots,S_t)
\end{equation}

##### Return
In the preceding section, we have said that the goal of agent is to maximize the cumulative reward in the long run. In general, we seek to maximize the **expected return**.  

**Definition** (*Return*)  
The **return** $G_t$ is the total discounted reward from t
\begin{equation}
G_t=R_{t+1}+\gamma R_{t+2}+\gamma^2 R_{t+3}+\dots=\sum_{k=0}^{\infty}\gamma^k R_{t+k+1},
\end{equation}
where $\gamma\in[0,1]$ is called *discount rate* (or *discount factor*).  

The *discount rate* $\gamma$ determines the present value of future rewards: a reward received
k time steps in the future is worth only $\gamma^{k-1}$ times what it would be worth if it were received immediately. And also, it provides mathematical convenience since as $k\rightarrow\infty$ then $\gamma^k\rightarrow 0$.

##### Policy
**Policy**, which is denoted as $\pi$, is the behavior function of the agent. $\pi$ is a mapping from states to probabilities of selecting each possible action. In other words, it lets us know which action to take in the current state $s$ and can be either *deterministic* or *stochastic*.
- *Deterministic policy*:	$\quad\pi(s)=a$
- *Stochastic policy*: $\quad\pi(a\|s)=P(A_t=a\|S_t=s)$

##### Value Function
**Value function** measures *how good* a particular state is (or *how good* it is to perform a given action in a given state).  

**Definition** (*state-value function*)  
The **state-value function** of a state $s$ under a policy $\pi$, denoted as $v_\pi(s)$, is the expected return starting from state $s$ and following $\pi$ thereafter:
\begin{equation}
v_\pi(s)=\mathbb{E}\_\pi[G_t|S_t=s]
\end{equation}

**Definition** (*action-value function*)  
Similarly, we define the value of taking action $a$ in state $s$ under a policy $\pi$, denoted as $q_\pi(s,a)$, as the expected return starting from $s$, taking the action $a$, and thereafter following policy $\pi$:
\begin{equation}
q_\pi(s,a)=\mathbb{E}\_\pi[G_t|S_t=s,A_t=a]
\end{equation}

Since we follow the policy $\pi$, we have that
\begin{equation}
v_\pi(s)=\sum_{a\in\mathcal{A}}q_\pi(s,a)\pi(a|s)
\end{equation}

##### Optimal Policy and Optimal Value Function
{: #opt-policy-opt-value-func}
For finite MDPs (finite state and action space), we can precisely define an **optimal policy**. *Value functions* define a partial ordering over policies. A policy $\pi$ is defined to be better than or equal to a policy $\pi&apos;$ if its expected return is greater than or equal to that of $\pi&apos;$ for all states. In other words,
\begin{equation}
\pi\geq\pi&apos;\iff v_\pi(s)\geq v_{\pi&apos;} \forall s\in\mathcal{S}
\end{equation}

**Theorem** (*Optimal policy*)  
For any MDP, there exists an optimal policy $\pi_\*$ that is better than or equal to all other policies,
\begin{equation}
\pi_\*\geq\pi,\forall\pi
\end{equation}

The proof of the above theorem is going to be provided in another [post]({% post_url 2021-07-10-optimal-policy-existence %}) since we need some additional tools to do that.  

There may be more than one **optimal policy**, they share the same *state-value function*, called **optimal state-value function** though.
\begin{equation}
v_\*(s)=\max_{\pi}v_\pi(s)
\end{equation}
**Optimal policies** also share the same *action-value function*, called **optimal action-value function**
\begin{equation}
q_\*(s,a)=\max_{\pi}q_\pi(s,a)
\end{equation}

#### Bellman Equations
A fundamental property of *value functions* used throughout RL is that they satisfy recursive relationships
\begin{align}
v_\pi(s)&amp;\doteq \mathbb{E}\_\pi[G_t|S_t=s] \\\\&amp;=\mathbb{E}\_\pi[R_t+\gamma G_{t+1}|S_t=s] \\\\&amp;=\sum_{s&apos;,r,g&apos;,a}p(s&apos;,r,g&apos;,a|s)(r+\gamma g&apos;) \\\\&amp;=\sum_{a}p(a|s)\sum_{s&apos;,r,g&apos;}p(s&apos;,r,g&apos;|a,s)(r+\gamma g&apos;) \\\\&amp;=\sum_{a}\pi(a|s)\sum_{s&apos;,r,g&apos;}p(s&apos;,r|a,s)p(g&apos;|s&apos;,r,a,s)(r+\gamma g&apos;) \\\\&amp;=\sum_{a}\pi(a|s)\sum_{s&apos;,r}p(s&apos;,r|a,s)\sum_{g&apos;}p(g&apos;|s&apos;)(r+\gamma g&apos;) \\\\&amp;=\sum_{a}\pi(a|s)\sum_{s&apos;,r}p(s&apos;,r|a,s)\left[r+\gamma\sum_{g&apos;}p(g&apos;|s&apos;)g&apos;\right] \\\\&amp;=\sum_{a}\pi(a|s)\sum_{s&apos;,r}p(s&apos;,r|a,s)\left[r+\gamma v_\pi(s&apos;)\right],
\end{align}
where $p(s&apos;,r|s,a)=P(S_{t+1}=s&apos;,R_{t+1}=r|S_t=s,A_t=a)$, which defines the dynamics of the MDP. The last equation is called the *Bellman equation for* $v_\pi(s)$. It expresses a relationship between the value state $s$, $v_\pi(s)$ and the values of its successor states $s&apos;$, $v_\pi(s&apos;)$.  

Similarly, we define the *Bellman equation for* $q_\pi(s,a)$
\begin{align}
q_\pi(s,a)&amp;\doteq\mathbb{E}\_\pi[G_t|S_t=s,A_t=a] \\\\&amp;=\mathbb{E}\_\pi[R_t+\gamma G_{t+1}|S_t=s,A_t=a] \\\\&amp;=\sum_{s&apos;,r}p(s&apos;,r|s,a)\left[r+\gamma\sum_{a&apos;}\pi(a&apos;|s&apos;)q_\pi(s&apos;,a&apos;)\right]
\end{align}

##### Bellman Backup Diagram
Backup diagram of *state-value function* and *action-value function* respectively
&lt;p float=&quot;left&quot;&gt;
  &lt;img src=&quot;/assets/images/state.png&quot; width=&quot;350&quot; /&gt;
  &lt;img src=&quot;/assets/images/action.png&quot; width=&quot;350&quot; /&gt; 
&lt;/p&gt;

##### Bellman Optimality Equations
Since $v_\*$ is the value function for a policy, it must satisfy the *Bellman equation for state-values*. Moreover, it is also the optimal value function, then we have
\begin{align}
v_\*(s)&amp;=\max_{a\in\mathcal{A(s)}}q_{\pi_\*}(s,a) \\\\&amp;=\max_{a}\mathbb{E}\_{\pi_\*}[G_t|S_t=s,A_t=a] \\\\&amp;=\max_{a}\mathbb{E}\_{\pi_\*}[R_{t+1}+\gamma G_{t+1}|S_t=s,A_t=a] \\\\&amp;=\max_{a}\mathbb{E}[R_{t+1}+\gamma v_\*(S_{t+1})|S_t=s,A_t=a] \\\\&amp;=\max_{a}\sum_{s&apos;,r}p(s&apos;,r|s,a)[r+\gamma v_\*(s&apos;)]
\end{align}
The last two equations are two forms of the *Bellman optimality equation for* $v_\*$. Similarly, we have the *Bellman optimality equation for* $q_\*$
\begin{align}
q_\*(s,a)&amp;=\mathbb{E}\left[R_{t+1}+\gamma\max_{a&apos;}q_\*(S_{t+1},a&apos;)|S_t=s,A_t=a\right] \\\\&amp;=\sum_{s&apos;,r}p(s&apos;,r|s,a)\left[r+\gamma\max_{a&apos;}q_\*(s&apos;,a&apos;)\right]
\end{align}

##### Backup diagram for $v_\*$ and $q_\*$
{: #backup-vq}
![backup diagram for optimal value func](/assets/images/opt.png)

#### References
[1] Richard S. Sutton &amp; Andrew G. Barto. [Reinforcement Learning: An Introduction](https://mitpress.mit.edu/books/reinforcement-learning-second-edition)    

[2] David Silver. [UCL course on RL](https://www.davidsilver.uk/teaching/)  

[3] [A (Long) Peek into Reinforcement Learning](https://lilianweng.github.io/lil-log/2018/02/19/a-long-peek-into-reinforcement-learning.html)  

[4] [AlphaGo](https://deepmind.com/research/case-studies/alphago-the-story-so-far)</content><author><name>Trung H. Nguyen</name><email>trung.skipper@gmail.com</email></author><category term="artificial-intelligent" /><category term="reinforcement-learning" /><category term="artificial-intelligent" /><category term="reinforcement-learning" /><category term="my-rl" /><summary type="html">You may have known or heard vaguely about a computer program called AlphaGo - the AI has beaten Lee Sedol - the winner of 18 world Go titles. One of the techniques it used is called self-play against its other instances, with Reinforcement Learning.</summary></entry><entry><title type="html">Markov Chain</title><link href="http://localhost:4000/random-stuffs/probability-statistics/2021/06/19/markov-chain.html" rel="alternate" type="text/html" title="Markov Chain" /><published>2021-06-19T22:27:00+07:00</published><updated>2021-06-19T22:27:00+07:00</updated><id>http://localhost:4000/random-stuffs/probability-statistics/2021/06/19/markov-chain</id><content type="html" xml:base="http://localhost:4000/random-stuffs/probability-statistics/2021/06/19/markov-chain.html">&gt; Since I have no idea how to begin with this post, why not just dive straight into details :P  

&lt;!-- excerpt-end --&gt;
- [Markov Property](#markov-property)
- [Transition Matrix](#transition-matrix)
	- [n-step Transition Probability](#nstep-trans-prob)
- [Marginal Distribution of $X_n$](#marginal-dist-xn)
- [Properties](#properties)
- [Stationary Distribution](#stationary-distribution)
- [Reversibility](#reversibility)
- [Examples and Applications](#exp-app)
- [References](#references)
- [Footnotes](#footnotes)


**Markov chain**[^1][^2] is a stochastic process in which the random variables follow a special property called *Markov*.  

#### Markov Property
A sequence of random variables $X_0, X_1, X_2, \dots$ taking values in the *state space* $S=${$1, 2,\dots, M$}. For all $n\geq0$,
\begin{equation}
P(X_{n+1}=j|X_n=i)=P(X_{n+1}=j|X_n=i,X_{n-1}=i_{n-1},X_{n-2}=i_{n-2},\dots,X_0=i_0)
\end{equation}
In other words, knowledge of the preceding state is all we need to determine the probability distribution of the current state[^3].  

#### Transition Matrix
The quantity $P(X_{n+1}=j|X_n=i)$ is *transition probability* from state $i$ to $j$.  
If we denote that $q_{ij}=P(X_{n+1}=j|X_n=i)$ and let $Q=(q_{ij})$, which is a $M\times M$ matrix, there we have the *transition matrix* $Q$ of the chain.  
Therefore, each row of $Q$ is a conditional probability mass function (PMF) of $X_{n+1}$ given $X_n$. And hence, sum of its entries is 1.  

##### n-step Transition Probability
{: #nstep-trans-prob}
The n-step *transition probability* from $i$ to $j$ is the probability of being at $i$ and $n$ steps later being at $j$, and be denoted as $q_{ij}^{(n)}$,
\begin{equation}
q_{ij}^{(n)}=P(X_n=j|X_0=i)
\end{equation}
We have that
\begin{equation}
q_{ij}^{(2)}=\sum_{k}^{}q_{ik}q_{kj}
\end{equation}
since it has to go through an intermediary step $k$ to reach $j$ in 2 steps from $i$. It&apos;s easily seen that the right hand side is $Q_{ij}^2$. And by induction, we have that:
\begin{equation}
q_{ij}^{(n)}=Q_{ij}^{n}
\end{equation}
$Q^n$ is also called the *n-step transition matrix*.  

##### Marginal Distribution of $X_n$
{: #marginal-dist-xn}
Let $t=(t_1,\dots,t_M)^\intercal$, where $t_i=P(X_0=i)$. By the law of total probability (LOTP), we have that:
\begin{align}
P(X_n=j)&amp;=\sum_{i=1}^{M}P(X_0=i)P(X_n=j|X_0=i) \\\\&amp;=\sum_{i=1}^{M}t_iq_{ij}^{(n)}
\end{align}
or the marginal distribution of $X_n$ is given by $tQ^n$.

#### Properties
1. State $i$ of a Markov chain is defined as *recurrent* or *transient* depending upon whether or not the Markov chain will eventually return to it. Starting with *recurrent* state i, the chain will return to it with the probability of 1. Otherwise, it is *transient*. 
	- **Proposition**: Number of returns to *transient* state is distributed by *Geom($p$)*, with $p&gt;0$ is the probability of never returning to $i$.
2. A Markov chain is defined as *irreducible* if there exists a chain of steps between any $i,j$ that has positive probability. That is for any $i,j$, there is some $n&gt;0,\in\mathbb{N}$ such that $Q^n_{ij}&gt;0$. If not *irreducible*, it&apos;s called *reducible*
	- **Proposition**: *Irreducible* implies all states *recurrent*
3. A state $i$ has *period* $k&gt;0$ if $k$ is the greatest common divisor (gcd) of the possible numbers of steps it can take to return to $i$ when starting at $i$.
And thus, $k=gcd(n)$ such that $Q^n_{ii}&gt;0$. $i$ is called *aperiodic* if $k_i=1$, and *periodic* otherwise. The chain itself is called *aperiodic* if all its states are *aperiodic*, and *periodic* otherwise.

#### Stationary Distribution
A vector $s=(s_1,\dots,s_M)^\intercal$ such that $s_i\geq0$ and $\sum_{i}s_i=1$ is a *stationary distribution* for a Markov chain if
\begin{equation}
\sum_{i}s_iq_{ij}=s_j
\end{equation}
for all $j$, or equivalently $sQ=s$.  

**Theorem** (*Existence and uniqueness of stationary distribution*)  
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Any *irreducible* Markov chain has a unique *stationary distribution*. In this distribution, every state has positive probability.  

The theorem is a consequence of a result from *Perron-Frobenius theorem*.  

**Theorem** (*Convergence to stationary distribution*)  
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Let $X_0,X_1,\dots$ be a Markov chain with *stationary distribution* $s$ and *transition matrix* $Q$, such that some power $Q^m$ has all entries positive (or in the other words, the chain is *irreducible* and *aperiodic*). Then $P(X_n=i)$ converges to $s_i$ as $n\rightarrow\infty$ (or $Q^n$ converges to a matrix in which each row is $s$).  

**Theorem** (*Expected time to run*)  
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Let $X_0,X_1,\dots$ be an *irreducible* Markov chain with *stationary distribution* $s$. Let $r_i$ be the expected time it takes the chain to return to $i$, given that it starts at $i$. Then $s_i=1/r_i$

#### Reversibility
Let $Q=(q_{ij})$ be the *transition matrix* of a Markov chain. Suppose there is an $s=(s_1,\dots,s_M)^\intercal$ with $s_i\geq0,\sum_{i}s_i=1$, such that
\begin{equation}
s_iq_{ij}=s_jq_{ji}
\end{equation}
for all states $i,j$. This equation is called *reversibility* or *detailed balance* condition. And if the condition holds, we say that the chain is *reversible* w.r.t $s$.  

**Proposition** (*Reversible implies stationary*)  
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Suppose that $Q=(q_{ij})$ be the *transition matrix* of a Markov chain that is *reversible* w.r.t to an $s=(s_1,\dots,s_M)^\intercal$ with with $s_i\geq0,\sum_{i}s_i=1$. Then $s$ is a *stationary distribution* of the chain. (*proof*:$\sum_{j}s_jq_{ji}=\sum_{j}s_iq_{ij}=s_i\sum_{j}q_{ij}=s_i$)  

**Proposition**  
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;If each column of $Q$ sum to 1, then the *uniform distribution* over all states $(1/M,\dots,1/M)$, is a *stationary distribution*. (This kind of matrix is called *doubly stochastic matrix*).

#### Examples and Applications
{: #exp-app}
- [*Finite-state machines*](https://en.wikipedia.org/wiki/Finite-state_machine), [*random walks*](https://en.wikipedia.org/wiki/Random_walk)
- Diced board games such as Ludo, Monopoly,...
- [*Google PageRank*](https://en.wikipedia.org/wiki/PageRank) - the heart of Google search
- Markov Decision Process (MDP), which is gonna be the content of next [post]({% post_url 2021-06-27-mdp-bellman-eqn %}).
- And various other applications.

#### References
[1] Joseph K. Blitzstein &amp; Jessica Hwang. [Introduction to Probability](https://www.amazon.com/Introduction-Probability-Chapman-Statistical-Science/dp/1466575573)  

[2] [Brillant&apos;s Markov chain](https://brilliant.org/wiki/markov-chains/)  

[3] [Perron-Frobenius theorem](https://en.wikipedia.org/wiki/Perron–Frobenius_theorem)

#### Footnotes
[^1]: This is more like intuitive and less formal definition of Markov chain, we will have a more concrete definition with the help of *Measure theory* after the post about it.
[^2]: The Markov chain here is *time-homogeneous* Markov chain, in which the probability of any state transition is independent of time.
[^3]: Well, it only matters where you are, not where you&apos;ve been.</content><author><name>Trung H. Nguyen</name><email>trung.skipper@gmail.com</email></author><category term="random-stuffs" /><category term="probability-statistics" /><category term="mathematics" /><category term="probability-statistics" /><summary type="html">Since I have no idea how to begin with this post, why not just dive straight into details :P</summary></entry></feed>